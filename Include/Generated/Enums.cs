// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!
// GENERATED ROBLOX ENUMS

namespace Roblox.Enum
{
	public static class AccessModifierType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Allow { get; } = null!;
		public static Type Deny { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AccessoryType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type Hat { get; } = null!;
		public static Type Hair { get; } = null!;
		public static Type Face { get; } = null!;
		public static Type Neck { get; } = null!;
		public static Type Shoulder { get; } = null!;
		public static Type Front { get; } = null!;
		public static Type Back { get; } = null!;
		public static Type Waist { get; } = null!;
		public static Type TShirt { get; } = null!;
		public static Type Shirt { get; } = null!;
		public static Type Pants { get; } = null!;
		public static Type Jacket { get; } = null!;
		public static Type Sweater { get; } = null!;
		public static Type Shorts { get; } = null!;
		public static Type LeftShoe { get; } = null!;
		public static Type RightShoe { get; } = null!;
		public static Type DressSkirt { get; } = null!;
		public static Type Eyebrow { get; } = null!;
		public static Type Eyelash { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ActionType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Nothing { get; } = null!;
		public static Type Pause { get; } = null!;
		public static Type Lose { get; } = null!;
		public static Type Draw { get; } = null!;
		public static Type Win { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ActuatorRelativeTo
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Attachment0 { get; } = null!;
		public static Type Attachment1 { get; } = null!;
		public static Type World { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ActuatorType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Motor { get; } = null!;
		public static Type Servo { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AdEventType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type RewardedAdLoaded { get; } = null!;
		public static Type RewardedAdGrant { get; } = null!;
		public static Type RewardedAdUnloaded { get; } = null!;
		public static Type VideoLoaded { get; } = null!;
		public static Type VideoRemoved { get; } = null!;
		public static Type UserCompletedVideo { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AdShape
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type HorizontalRectangle { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AdTeleportMethod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Undefined { get; } = null!;
		public static Type PortalForward { get; } = null!;
		public static Type InGameMenuBackButton { get; } = null!;
		public static Type UIBackButton { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AdUIEventType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type AdLabelClicked { get; } = null!;
		public static Type VolumeButtonClicked { get; } = null!;
		public static Type FullscreenButtonClicked { get; } = null!;
		public static Type PlayButtonClicked { get; } = null!;
		public static Type PauseButtonClicked { get; } = null!;
		public static Type CloseButtonClicked { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AdUIType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Image { get; } = null!;
		public static Type Video { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AdUnitStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Inactive { get; } = null!;
		public static Type Active { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AdornCullingMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type Never { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AlignType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type PrimaryAxisParallel { get; } = null!;
		public static Type PrimaryAxisPerpendicular { get; } = null!;
		public static Type PrimaryAxisLookAt { get; } = null!;
		public static Type AllAxes { get; } = null!;
		public static Type Parallel { get; } = null!;
		public static Type Perpendicular { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AlphaMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Overlay { get; } = null!;
		public static Type Transparency { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnalyticsCustomFieldKeys
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type CustomField01 { get; } = null!;
		public static Type CustomField02 { get; } = null!;
		public static Type CustomField03 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnalyticsEconomyAction
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Acquire { get; } = null!;
		public static Type Spend { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnalyticsEconomyFlowType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Sink { get; } = null!;
		public static Type Source { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnalyticsEconomyTransactionType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type IAP { get; } = null!;
		public static Type Shop { get; } = null!;
		public static Type Gameplay { get; } = null!;
		public static Type ContextualPurchase { get; } = null!;
		public static Type TimedReward { get; } = null!;
		public static Type Onboarding { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnalyticsLogLevel
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Trace { get; } = null!;
		public static Type Debug { get; } = null!;
		public static Type Information { get; } = null!;
		public static Type Warning { get; } = null!;
		public static Type Error { get; } = null!;
		public static Type Fatal { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnalyticsProgressionStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Begin { get; } = null!;
		public static Type Complete { get; } = null!;
		public static Type Abandon { get; } = null!;
		public static Type Fail { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnalyticsProgressionType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Custom { get; } = null!;
		public static Type Start { get; } = null!;
		public static Type Fail { get; } = null!;
		public static Type Complete { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnimationClipFromVideoStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Initializing { get; } = null!;
		public static Type Pending { get; } = null!;
		public static Type Processing { get; } = null!;
		public static Type ErrorGeneric { get; } = null!;
		public static Type Success { get; } = null!;
		public static Type ErrorVideoTooLong { get; } = null!;
		public static Type ErrorNoPersonDetected { get; } = null!;
		public static Type ErrorVideoUnstable { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type Cancelled { get; } = null!;
		public static Type ErrorMultiplePeople { get; } = null!;
		public static Type ErrorUploadingVideo { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnimationPriority
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Core { get; } = null!;
		public static Type Idle { get; } = null!;
		public static Type Movement { get; } = null!;
		public static Type Action { get; } = null!;
		public static Type Action2 { get; } = null!;
		public static Type Action3 { get; } = null!;
		public static Type Action4 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AnimatorRetargetingMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AppShellActionType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type OpenApp { get; } = null!;
		public static Type TapChatTab { get; } = null!;
		public static Type TapConversationEntry { get; } = null!;
		public static Type TapAvatarTab { get; } = null!;
		public static Type ReadConversation { get; } = null!;
		public static Type TapGamePageTab { get; } = null!;
		public static Type TapHomePageTab { get; } = null!;
		public static Type GamePageLoaded { get; } = null!;
		public static Type HomePageLoaded { get; } = null!;
		public static Type AvatarEditorPageLoaded { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AppShellFeature
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Chat { get; } = null!;
		public static Type AvatarEditor { get; } = null!;
		public static Type GamePage { get; } = null!;
		public static Type HomePage { get; } = null!;
		public static Type More { get; } = null!;
		public static Type Landing { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AppUpdateStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type NotSupported { get; } = null!;
		public static Type Failed { get; } = null!;
		public static Type NotAvailable { get; } = null!;
		public static Type Available { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ApplyStrokeMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Contextual { get; } = null!;
		public static Type Border { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AspectType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type FitWithinMaxSize { get; } = null!;
		public static Type ScaleWithParentSize { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AssetCreatorType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type User { get; } = null!;
		public static Type Group { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AssetFetchStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type Failure { get; } = null!;
		public static Type None { get; } = null!;
		public static Type Loading { get; } = null!;
		public static Type TimedOut { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AssetType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Image { get; } = null!;
		public static Type TShirt { get; } = null!;
		public static Type Audio { get; } = null!;
		public static Type Mesh { get; } = null!;
		public static Type Lua { get; } = null!;
		public static Type Hat { get; } = null!;
		public static Type Place { get; } = null!;
		public static Type Model { get; } = null!;
		public static Type Shirt { get; } = null!;
		public static Type Pants { get; } = null!;
		public static Type Decal { get; } = null!;
		public static Type Head { get; } = null!;
		public static Type Face { get; } = null!;
		public static Type Gear { get; } = null!;
		public static Type Badge { get; } = null!;
		public static Type Animation { get; } = null!;
		public static Type Torso { get; } = null!;
		public static Type RightArm { get; } = null!;
		public static Type LeftArm { get; } = null!;
		public static Type LeftLeg { get; } = null!;
		public static Type RightLeg { get; } = null!;
		public static Type Package { get; } = null!;
		public static Type GamePass { get; } = null!;
		public static Type Plugin { get; } = null!;
		public static Type MeshPart { get; } = null!;
		public static Type HairAccessory { get; } = null!;
		public static Type FaceAccessory { get; } = null!;
		public static Type NeckAccessory { get; } = null!;
		public static Type ShoulderAccessory { get; } = null!;
		public static Type FrontAccessory { get; } = null!;
		public static Type BackAccessory { get; } = null!;
		public static Type WaistAccessory { get; } = null!;
		public static Type ClimbAnimation { get; } = null!;
		public static Type DeathAnimation { get; } = null!;
		public static Type FallAnimation { get; } = null!;
		public static Type IdleAnimation { get; } = null!;
		public static Type JumpAnimation { get; } = null!;
		public static Type RunAnimation { get; } = null!;
		public static Type SwimAnimation { get; } = null!;
		public static Type WalkAnimation { get; } = null!;
		public static Type PoseAnimation { get; } = null!;
		public static Type EarAccessory { get; } = null!;
		public static Type EyeAccessory { get; } = null!;
		public static Type EmoteAnimation { get; } = null!;
		public static Type Video { get; } = null!;
		public static Type TShirtAccessory { get; } = null!;
		public static Type ShirtAccessory { get; } = null!;
		public static Type PantsAccessory { get; } = null!;
		public static Type JacketAccessory { get; } = null!;
		public static Type SweaterAccessory { get; } = null!;
		public static Type ShortsAccessory { get; } = null!;
		public static Type LeftShoeAccessory { get; } = null!;
		public static Type RightShoeAccessory { get; } = null!;
		public static Type DressSkirtAccessory { get; } = null!;
		public static Type FontFamily { get; } = null!;
		public static Type EyebrowAccessory { get; } = null!;
		public static Type EyelashAccessory { get; } = null!;
		public static Type MoodAnimation { get; } = null!;
		public static Type DynamicHead { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AssetTypeVerification
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type ClientOnly { get; } = null!;
		public static Type Always { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AudioApiRollout
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Disabled { get; } = null!;
		public static Type Automatic { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AudioFilterType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Peak { get; } = null!;
		public static Type LowShelf { get; } = null!;
		public static Type HighShelf { get; } = null!;
		public static Type Lowpass12dB { get; } = null!;
		public static Type Lowpass24dB { get; } = null!;
		public static Type Lowpass48dB { get; } = null!;
		public static Type Highpass12dB { get; } = null!;
		public static Type Highpass24dB { get; } = null!;
		public static Type Highpass48dB { get; } = null!;
		public static Type Bandpass { get; } = null!;
		public static Type Notch { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AudioSubType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Music { get; } = null!;
		public static Type SoundEffect { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AudioWindowSize
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Small { get; } = null!;
		public static Type Medium { get; } = null!;
		public static Type Large { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AutoIndentRule
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Off { get; } = null!;
		public static Type Absolute { get; } = null!;
		public static Type Relative { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AutomaticSize
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type X { get; } = null!;
		public static Type Y { get; } = null!;
		public static Type XY { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarAssetType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type TShirt { get; } = null!;
		public static Type Hat { get; } = null!;
		public static Type Shirt { get; } = null!;
		public static Type Pants { get; } = null!;
		public static Type Head { get; } = null!;
		public static Type Face { get; } = null!;
		public static Type Gear { get; } = null!;
		public static Type Torso { get; } = null!;
		public static Type RightArm { get; } = null!;
		public static Type LeftArm { get; } = null!;
		public static Type LeftLeg { get; } = null!;
		public static Type RightLeg { get; } = null!;
		public static Type HairAccessory { get; } = null!;
		public static Type FaceAccessory { get; } = null!;
		public static Type NeckAccessory { get; } = null!;
		public static Type ShoulderAccessory { get; } = null!;
		public static Type FrontAccessory { get; } = null!;
		public static Type BackAccessory { get; } = null!;
		public static Type WaistAccessory { get; } = null!;
		public static Type ClimbAnimation { get; } = null!;
		public static Type FallAnimation { get; } = null!;
		public static Type IdleAnimation { get; } = null!;
		public static Type JumpAnimation { get; } = null!;
		public static Type RunAnimation { get; } = null!;
		public static Type SwimAnimation { get; } = null!;
		public static Type WalkAnimation { get; } = null!;
		public static Type MoodAnimation { get; } = null!;
		public static Type EmoteAnimation { get; } = null!;
		public static Type TShirtAccessory { get; } = null!;
		public static Type ShirtAccessory { get; } = null!;
		public static Type PantsAccessory { get; } = null!;
		public static Type JacketAccessory { get; } = null!;
		public static Type SweaterAccessory { get; } = null!;
		public static Type ShortsAccessory { get; } = null!;
		public static Type LeftShoeAccessory { get; } = null!;
		public static Type RightShoeAccessory { get; } = null!;
		public static Type DressSkirtAccessory { get; } = null!;
		public static Type EyebrowAccessory { get; } = null!;
		public static Type EyelashAccessory { get; } = null!;
		public static Type DynamicHead { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarChatServiceFeature
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type UniverseAudio { get; } = null!;
		public static Type UniverseVideo { get; } = null!;
		public static Type PlaceAudio { get; } = null!;
		public static Type PlaceVideo { get; } = null!;
		public static Type UserAudioEligible { get; } = null!;
		public static Type UserAudio { get; } = null!;
		public static Type UserVideoEligible { get; } = null!;
		public static Type UserVideo { get; } = null!;
		public static Type UserBanned { get; } = null!;
		public static Type UserVerifiedForVoice { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarContextMenuOption
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Friend { get; } = null!;
		public static Type Chat { get; } = null!;
		public static Type Emote { get; } = null!;
		public static Type InspectMenu { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarGenerationError
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type DownloadFailed { get; } = null!;
		public static Type Canceled { get; } = null!;
		public static Type Offensive { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarGenerationJobStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NotStarted { get; } = null!;
		public static Type InProgress { get; } = null!;
		public static Type Completed { get; } = null!;
		public static Type Failed { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarItemType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Asset { get; } = null!;
		public static Type Bundle { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarJointUpgrade
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Enabled { get; } = null!;
		public static Type Disabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarPromptResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type PermissionDenied { get; } = null!;
		public static Type Failed { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarThumbnailCustomizationType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Closeup { get; } = null!;
		public static Type FullBody { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class AvatarUnificationMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Axis
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type X { get; } = null!;
		public static Type Y { get; } = null!;
		public static Type Z { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BinType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Script { get; } = null!;
		public static Type GameTool { get; } = null!;
		public static Type Grab { get; } = null!;
		public static Type Clone { get; } = null!;
		public static Type Hammer { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BodyPart
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Head { get; } = null!;
		public static Type Torso { get; } = null!;
		public static Type LeftArm { get; } = null!;
		public static Type RightArm { get; } = null!;
		public static Type LeftLeg { get; } = null!;
		public static Type RightLeg { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BodyPartR15
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Head { get; } = null!;
		public static Type UpperTorso { get; } = null!;
		public static Type LowerTorso { get; } = null!;
		public static Type LeftFoot { get; } = null!;
		public static Type LeftLowerLeg { get; } = null!;
		public static Type LeftUpperLeg { get; } = null!;
		public static Type RightFoot { get; } = null!;
		public static Type RightLowerLeg { get; } = null!;
		public static Type RightUpperLeg { get; } = null!;
		public static Type LeftHand { get; } = null!;
		public static Type LeftLowerArm { get; } = null!;
		public static Type LeftUpperArm { get; } = null!;
		public static Type RightHand { get; } = null!;
		public static Type RightLowerArm { get; } = null!;
		public static Type RightUpperArm { get; } = null!;
		public static Type RootPart { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BorderMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Outline { get; } = null!;
		public static Type Middle { get; } = null!;
		public static Type Inset { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BreakReason
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Other { get; } = null!;
		public static Type Error { get; } = null!;
		public static Type SpecialBreakpoint { get; } = null!;
		public static Type UserBreakpoint { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BreakpointRemoveReason
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Requested { get; } = null!;
		public static Type ScriptChanged { get; } = null!;
		public static Type ScriptRemoved { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BulkMoveMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type FireAllEvents { get; } = null!;
		public static Type FireCFrameChanged { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class BundleType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type BodyParts { get; } = null!;
		public static Type Animations { get; } = null!;
		public static Type Shoes { get; } = null!;
		public static Type DynamicHead { get; } = null!;
		public static Type DynamicHeadAvatar { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Button
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Jump { get; } = null!;
		public static Type Dismount { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ButtonStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Custom { get; } = null!;
		public static Type RobloxButtonDefault { get; } = null!;
		public static Type RobloxButton { get; } = null!;
		public static Type RobloxRoundButton { get; } = null!;
		public static Type RobloxRoundDefaultButton { get; } = null!;
		public static Type RobloxRoundDropdownButton { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CSGAsyncDynamicCollision
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Experimental { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CageType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Inner { get; } = null!;
		public static Type Outer { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CameraMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Classic { get; } = null!;
		public static Type LockFirstPerson { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CameraPanMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Classic { get; } = null!;
		public static Type EdgeBump { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CameraSpeedAdjustBinding
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type RmbScroll { get; } = null!;
		public static Type AltScroll { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CameraType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Fixed { get; } = null!;
		public static Type Attach { get; } = null!;
		public static Type Watch { get; } = null!;
		public static Type Track { get; } = null!;
		public static Type Follow { get; } = null!;
		public static Type Custom { get; } = null!;
		public static Type Scriptable { get; } = null!;
		public static Type Orbital { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CatalogCategoryFilter
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Featured { get; } = null!;
		public static Type Collectibles { get; } = null!;
		public static Type CommunityCreations { get; } = null!;
		public static Type Premium { get; } = null!;
		public static Type Recommended { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CatalogSortAggregation
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Past12Hours { get; } = null!;
		public static Type PastDay { get; } = null!;
		public static Type Past3Days { get; } = null!;
		public static Type PastWeek { get; } = null!;
		public static Type PastMonth { get; } = null!;
		public static Type AllTime { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CatalogSortType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Relevance { get; } = null!;
		public static Type PriceHighToLow { get; } = null!;
		public static Type PriceLowToHigh { get; } = null!;
		public static Type MostFavorited { get; } = null!;
		public static Type RecentlyCreated { get; } = null!;
		public static Type Bestselling { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CellBlock
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Solid { get; } = null!;
		public static Type VerticalWedge { get; } = null!;
		public static Type CornerWedge { get; } = null!;
		public static Type InverseCornerWedge { get; } = null!;
		public static Type HorizontalWedge { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CellMaterial
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Empty { get; } = null!;
		public static Type Grass { get; } = null!;
		public static Type Sand { get; } = null!;
		public static Type Brick { get; } = null!;
		public static Type Granite { get; } = null!;
		public static Type Asphalt { get; } = null!;
		public static Type Iron { get; } = null!;
		public static Type Aluminum { get; } = null!;
		public static Type Gold { get; } = null!;
		public static Type WoodPlank { get; } = null!;
		public static Type WoodLog { get; } = null!;
		public static Type Gravel { get; } = null!;
		public static Type CinderBlock { get; } = null!;
		public static Type MossyStone { get; } = null!;
		public static Type Cement { get; } = null!;
		public static Type RedPlastic { get; } = null!;
		public static Type BluePlastic { get; } = null!;
		public static Type Water { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CellOrientation
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NegZ { get; } = null!;
		public static Type X { get; } = null!;
		public static Type Z { get; } = null!;
		public static Type NegX { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CenterDialogType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type UnsolicitedDialog { get; } = null!;
		public static Type PlayerInitiatedDialog { get; } = null!;
		public static Type ModalDialog { get; } = null!;
		public static Type QuitDialog { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CharacterControlMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Legacy { get; } = null!;
		public static Type NoCharacterController { get; } = null!;
		public static Type LuaCharacterController { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ChatCallbackType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OnCreatingChatWindow { get; } = null!;
		public static Type OnClientSendingMessage { get; } = null!;
		public static Type OnClientFormattingMessage { get; } = null!;
		public static Type OnServerReceivingMessage { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ChatColor
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Blue { get; } = null!;
		public static Type Green { get; } = null!;
		public static Type Red { get; } = null!;
		public static Type White { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ChatMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Menu { get; } = null!;
		public static Type TextAndMenu { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ChatPrivacyMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type AllUsers { get; } = null!;
		public static Type NoOne { get; } = null!;
		public static Type Friends { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ChatStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Classic { get; } = null!;
		public static Type Bubble { get; } = null!;
		public static Type ClassicAndBubble { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ChatVersion
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type LegacyChatService { get; } = null!;
		public static Type TextChatService { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ClientAnimatorThrottlingMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CloseReason
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type RobloxMaintenance { get; } = null!;
		public static Type DeveloperShutdown { get; } = null!;
		public static Type DeveloperUpdate { get; } = null!;
		public static Type ServerEmpty { get; } = null!;
		public static Type OutOfMemory { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CollaboratorStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Editing3D { get; } = null!;
		public static Type Scripting { get; } = null!;
		public static Type PrivateScripting { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CollisionFidelity
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Hull { get; } = null!;
		public static Type Box { get; } = null!;
		public static Type PreciseConvexDecomposition { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CommandPermission
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Plugin { get; } = null!;
		public static Type LocalUser { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CompileTarget
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Client { get; } = null!;
		public static Type CoreScript { get; } = null!;
		public static Type Studio { get; } = null!;
		public static Type CoreScriptRaw { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CompletionItemKind
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Text { get; } = null!;
		public static Type Method { get; } = null!;
		public static Type Function { get; } = null!;
		public static Type Constructor { get; } = null!;
		public static Type Field { get; } = null!;
		public static Type Variable { get; } = null!;
		public static Type Class { get; } = null!;
		public static Type Interface { get; } = null!;
		public static Type Module { get; } = null!;
		public static Type Property { get; } = null!;
		public static Type Unit { get; } = null!;
		public static Type Value { get; } = null!;
		public static Type Enum { get; } = null!;
		public static Type Keyword { get; } = null!;
		public static Type Snippet { get; } = null!;
		public static Type Color { get; } = null!;
		public static Type File { get; } = null!;
		public static Type Reference { get; } = null!;
		public static Type Folder { get; } = null!;
		public static Type EnumMember { get; } = null!;
		public static Type Constant { get; } = null!;
		public static Type Struct { get; } = null!;
		public static Type Event { get; } = null!;
		public static Type Operator { get; } = null!;
		public static Type TypeParameter { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CompletionItemTag
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Deprecated { get; } = null!;
		public static Type IncorrectIndexType { get; } = null!;
		public static Type PluginPermissions { get; } = null!;
		public static Type CommandLinePermissions { get; } = null!;
		public static Type RobloxPermissions { get; } = null!;
		public static Type AddParens { get; } = null!;
		public static Type PutCursorInParens { get; } = null!;
		public static Type TypeCorrect { get; } = null!;
		public static Type ClientServerBoundaryViolation { get; } = null!;
		public static Type Invalidated { get; } = null!;
		public static Type PutCursorBeforeEnd { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CompletionTriggerKind
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Invoked { get; } = null!;
		public static Type TriggerCharacter { get; } = null!;
		public static Type TriggerForIncompleteCompletions { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ComputerCameraMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Classic { get; } = null!;
		public static Type Follow { get; } = null!;
		public static Type Orbital { get; } = null!;
		public static Type CameraToggle { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ComputerMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type KeyboardMouse { get; } = null!;
		public static Type ClickToMove { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ConnectionError
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OK { get; } = null!;
		public static Type Unknown { get; } = null!;
		public static Type DisconnectErrors { get; } = null!;
		public static Type DisconnectBadhash { get; } = null!;
		public static Type DisconnectSecurityKeyMismatch { get; } = null!;
		public static Type DisconnectProtocolMismatch { get; } = null!;
		public static Type DisconnectReceivePacketError { get; } = null!;
		public static Type DisconnectReceivePacketStreamError { get; } = null!;
		public static Type DisconnectSendPacketError { get; } = null!;
		public static Type DisconnectIllegalTeleport { get; } = null!;
		public static Type DisconnectDuplicatePlayer { get; } = null!;
		public static Type DisconnectDuplicateTicket { get; } = null!;
		public static Type DisconnectTimeout { get; } = null!;
		public static Type DisconnectLuaKick { get; } = null!;
		public static Type DisconnectOnRemoteSysStats { get; } = null!;
		public static Type DisconnectHashTimeout { get; } = null!;
		public static Type DisconnectCloudEditKick { get; } = null!;
		public static Type DisconnectPlayerless { get; } = null!;
		public static Type DisconnectNewSecurityKeyMismatch { get; } = null!;
		public static Type DisconnectEvicted { get; } = null!;
		public static Type DisconnectDevMaintenance { get; } = null!;
		public static Type DisconnectRobloxMaintenance { get; } = null!;
		public static Type DisconnectRejoin { get; } = null!;
		public static Type DisconnectConnectionLost { get; } = null!;
		public static Type DisconnectIdle { get; } = null!;
		public static Type DisconnectRaknetErrors { get; } = null!;
		public static Type DisconnectWrongVersion { get; } = null!;
		public static Type DisconnectBySecurityPolicy { get; } = null!;
		public static Type DisconnectBlockedIP { get; } = null!;
		public static Type DisconnectClientFailure { get; } = null!;
		public static Type DisconnectClientRequest { get; } = null!;
		public static Type DisconnectPrivateServerKickout { get; } = null!;
		public static Type DisconnectModeratedGame { get; } = null!;
		public static Type ServerShutdown { get; } = null!;
		public static Type ReplicatorTimeout { get; } = null!;
		public static Type PlayerRemoved { get; } = null!;
		public static Type DisconnectOutOfMemoryKeepPlayingLeave { get; } = null!;
		public static Type DisconnectRomarkEndOfTest { get; } = null!;
		public static Type DisconnectCollaboratorPermissionRevoked { get; } = null!;
		public static Type DisconnectCollaboratorUnderage { get; } = null!;
		public static Type NetworkInternal { get; } = null!;
		public static Type NetworkSend { get; } = null!;
		public static Type NetworkTimeout { get; } = null!;
		public static Type NetworkMisbehavior { get; } = null!;
		public static Type NetworkSecurity { get; } = null!;
		public static Type ReplacementReady { get; } = null!;
		public static Type PlacelaunchErrors { get; } = null!;
		public static Type PlacelaunchDisabled { get; } = null!;
		public static Type PlacelaunchError { get; } = null!;
		public static Type PlacelaunchGameEnded { get; } = null!;
		public static Type PlacelaunchGameFull { get; } = null!;
		public static Type PlacelaunchUserLeft { get; } = null!;
		public static Type PlacelaunchRestricted { get; } = null!;
		public static Type PlacelaunchUnauthorized { get; } = null!;
		public static Type PlacelaunchFlooded { get; } = null!;
		public static Type PlacelaunchHashExpired { get; } = null!;
		public static Type PlacelaunchHashException { get; } = null!;
		public static Type PlacelaunchPartyCannotFit { get; } = null!;
		public static Type PlacelaunchHttpError { get; } = null!;
		public static Type PlacelaunchUserPrivacyUnauthorized { get; } = null!;
		public static Type PlacelaunchCreatorBan { get; } = null!;
		public static Type PlacelaunchCustomMessage { get; } = null!;
		public static Type PlacelaunchOtherError { get; } = null!;
		public static Type TeleportErrors { get; } = null!;
		public static Type TeleportFailure { get; } = null!;
		public static Type TeleportGameNotFound { get; } = null!;
		public static Type TeleportGameEnded { get; } = null!;
		public static Type TeleportGameFull { get; } = null!;
		public static Type TeleportUnauthorized { get; } = null!;
		public static Type TeleportFlooded { get; } = null!;
		public static Type TeleportIsTeleporting { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ConnectionState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Connected { get; } = null!;
		public static Type Disconnected { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ContextActionPriority
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Low { get; } = null!;
		public static Type Medium { get; } = null!;
		public static Type High { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ContextActionResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Sink { get; } = null!;
		public static Type Pass { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ControlMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Classic { get; } = null!;
		public static Type MouseLockSwitch { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CoreGuiType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type PlayerList { get; } = null!;
		public static Type Health { get; } = null!;
		public static Type Backpack { get; } = null!;
		public static Type Chat { get; } = null!;
		public static Type All { get; } = null!;
		public static Type EmotesMenu { get; } = null!;
		public static Type SelfView { get; } = null!;
		public static Type Captures { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CreateOutfitFailure
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type InvalidName { get; } = null!;
		public static Type OutfitLimitReached { get; } = null!;
		public static Type Other { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CreatorType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type User { get; } = null!;
		public static Type Group { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CreatorTypeFilter
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type User { get; } = null!;
		public static Type Group { get; } = null!;
		public static Type All { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CurrencyType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Robux { get; } = null!;
		public static Type Tix { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class CustomCameraMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Classic { get; } = null!;
		public static Type Follow { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DataStoreRequestType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type GetAsync { get; } = null!;
		public static Type SetIncrementAsync { get; } = null!;
		public static Type UpdateAsync { get; } = null!;
		public static Type GetSortedAsync { get; } = null!;
		public static Type SetIncrementSortedAsync { get; } = null!;
		public static Type OnUpdate { get; } = null!;
		public static Type ListAsync { get; } = null!;
		public static Type GetVersionAsync { get; } = null!;
		public static Type RemoveVersionAsync { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DebuggerEndReason
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type ClientRequest { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type InvalidHost { get; } = null!;
		public static Type Disconnected { get; } = null!;
		public static Type ServerShutdown { get; } = null!;
		public static Type ServerProtocolMismatch { get; } = null!;
		public static Type ConfigurationFailed { get; } = null!;
		public static Type RpcError { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DebuggerExceptionBreakMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Never { get; } = null!;
		public static Type Always { get; } = null!;
		public static Type Unhandled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DebuggerFrameType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type C { get; } = null!;
		public static Type Lua { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DebuggerPauseReason
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type Requested { get; } = null!;
		public static Type Breakpoint { get; } = null!;
		public static Type Exception { get; } = null!;
		public static Type SingleStep { get; } = null!;
		public static Type Entrypoint { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DebuggerStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type ConnectionLost { get; } = null!;
		public static Type InvalidResponse { get; } = null!;
		public static Type InternalError { get; } = null!;
		public static Type InvalidState { get; } = null!;
		public static Type RpcError { get; } = null!;
		public static Type InvalidArgument { get; } = null!;
		public static Type ConnectionClosed { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DecreaseMinimumPartDensityMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DevCameraOcclusionMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Zoom { get; } = null!;
		public static Type Invisicam { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DevComputerCameraMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type UserChoice { get; } = null!;
		public static Type Classic { get; } = null!;
		public static Type Follow { get; } = null!;
		public static Type Orbital { get; } = null!;
		public static Type CameraToggle { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DevComputerMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type UserChoice { get; } = null!;
		public static Type KeyboardMouse { get; } = null!;
		public static Type ClickToMove { get; } = null!;
		public static Type Scriptable { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DevTouchCameraMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type UserChoice { get; } = null!;
		public static Type Classic { get; } = null!;
		public static Type Follow { get; } = null!;
		public static Type Orbital { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DevTouchMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type UserChoice { get; } = null!;
		public static Type Thumbstick { get; } = null!;
		public static Type DPad { get; } = null!;
		public static Type Thumbpad { get; } = null!;
		public static Type ClickToMove { get; } = null!;
		public static Type Scriptable { get; } = null!;
		public static Type DynamicThumbstick { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DeveloperMemoryTag
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Internal { get; } = null!;
		public static Type HttpCache { get; } = null!;
		public static Type Instances { get; } = null!;
		public static Type Signals { get; } = null!;
		public static Type LuaHeap { get; } = null!;
		public static Type Script { get; } = null!;
		public static Type PhysicsCollision { get; } = null!;
		public static Type PhysicsParts { get; } = null!;
		public static Type GraphicsSolidModels { get; } = null!;
		public static Type GraphicsMeshParts { get; } = null!;
		public static Type GraphicsParticles { get; } = null!;
		public static Type GraphicsParts { get; } = null!;
		public static Type GraphicsSpatialHash { get; } = null!;
		public static Type GraphicsTerrain { get; } = null!;
		public static Type GraphicsTexture { get; } = null!;
		public static Type GraphicsTextureCharacter { get; } = null!;
		public static Type Sounds { get; } = null!;
		public static Type StreamingSounds { get; } = null!;
		public static Type TerrainVoxels { get; } = null!;
		public static Type Gui { get; } = null!;
		public static Type Animation { get; } = null!;
		public static Type Navigation { get; } = null!;
		public static Type GeometryCSG { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DeviceFeatureType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type DeviceCapture { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DeviceType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type Desktop { get; } = null!;
		public static Type Tablet { get; } = null!;
		public static Type Phone { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DialogBehaviorType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type SinglePlayer { get; } = null!;
		public static Type MultiplePlayers { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DialogPurpose
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Quest { get; } = null!;
		public static Type Help { get; } = null!;
		public static Type Shop { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DialogTone
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Neutral { get; } = null!;
		public static Type Friendly { get; } = null!;
		public static Type Enemy { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DominantAxis
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Width { get; } = null!;
		public static Type Height { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DraftStatusCode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OK { get; } = null!;
		public static Type DraftOutdated { get; } = null!;
		public static Type ScriptRemoved { get; } = null!;
		public static Type DraftCommitted { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DragDetectorDragStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type TranslateLine { get; } = null!;
		public static Type TranslatePlane { get; } = null!;
		public static Type TranslatePlaneOrLine { get; } = null!;
		public static Type TranslateLineOrPlane { get; } = null!;
		public static Type TranslateViewPlane { get; } = null!;
		public static Type RotateAxis { get; } = null!;
		public static Type RotateTrackball { get; } = null!;
		public static Type Scriptable { get; } = null!;
		public static Type BestForDevice { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DragDetectorPermissionPolicy
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Nobody { get; } = null!;
		public static Type Everybody { get; } = null!;
		public static Type Scriptable { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DragDetectorResponseStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Geometric { get; } = null!;
		public static Type Physical { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DraggerCoordinateSpace
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Object { get; } = null!;
		public static Type World { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class DraggerMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Geometric { get; } = null!;
		public static Type Physical { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class EasingDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type In { get; } = null!;
		public static Type Out { get; } = null!;
		public static Type InOut { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class EasingStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Linear { get; } = null!;
		public static Type Sine { get; } = null!;
		public static Type Back { get; } = null!;
		public static Type Quad { get; } = null!;
		public static Type Quart { get; } = null!;
		public static Type Quint { get; } = null!;
		public static Type Bounce { get; } = null!;
		public static Type Elastic { get; } = null!;
		public static Type Exponential { get; } = null!;
		public static Type Circular { get; } = null!;
		public static Type Cubic { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ElasticBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type WhenScrollable { get; } = null!;
		public static Type Always { get; } = null!;
		public static Type Never { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class EnviromentalPhysicsThrottle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type DefaultAuto { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Always { get; } = null!;
		public static Type Skip2 { get; } = null!;
		public static Type Skip4 { get; } = null!;
		public static Type Skip8 { get; } = null!;
		public static Type Skip16 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ExperienceAuthScope
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type DefaultScope { get; } = null!;
		public static Type CreatorAssetsCreate { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ExplosionType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NoCraters { get; } = null!;
		public static Type Craters { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FACSDataLod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type LOD0 { get; } = null!;
		public static Type LOD1 { get; } = null!;
		public static Type LODCount { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FacialAnimationStreamingState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Audio { get; } = null!;
		public static Type Video { get; } = null!;
		public static Type Place { get; } = null!;
		public static Type Server { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FieldOfViewMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Vertical { get; } = null!;
		public static Type Diagonal { get; } = null!;
		public static Type MaxAxis { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FillDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Horizontal { get; } = null!;
		public static Type Vertical { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FilterResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Accepted { get; } = null!;
		public static Type Rejected { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FinishRecordingOperation
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Cancel { get; } = null!;
		public static Type Commit { get; } = null!;
		public static Type Append { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FluidFidelity
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type UseCollisionGeometry { get; } = null!;
		public static Type UsePreciseGeometry { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FluidForces
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Experimental { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Font
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Legacy { get; } = null!;
		public static Type Arial { get; } = null!;
		public static Type ArialBold { get; } = null!;
		public static Type SourceSans { get; } = null!;
		public static Type SourceSansBold { get; } = null!;
		public static Type SourceSansLight { get; } = null!;
		public static Type SourceSansItalic { get; } = null!;
		public static Type Bodoni { get; } = null!;
		public static Type Garamond { get; } = null!;
		public static Type Cartoon { get; } = null!;
		public static Type Code { get; } = null!;
		public static Type Highway { get; } = null!;
		public static Type SciFi { get; } = null!;
		public static Type Arcade { get; } = null!;
		public static Type Fantasy { get; } = null!;
		public static Type Antique { get; } = null!;
		public static Type SourceSansSemibold { get; } = null!;
		public static Type Gotham { get; } = null!;
		public static Type GothamMedium { get; } = null!;
		public static Type GothamBold { get; } = null!;
		public static Type GothamBlack { get; } = null!;
		public static Type AmaticSC { get; } = null!;
		public static Type Bangers { get; } = null!;
		public static Type Creepster { get; } = null!;
		public static Type DenkOne { get; } = null!;
		public static Type Fondamento { get; } = null!;
		public static Type FredokaOne { get; } = null!;
		public static Type GrenzeGotisch { get; } = null!;
		public static Type IndieFlower { get; } = null!;
		public static Type JosefinSans { get; } = null!;
		public static Type Jura { get; } = null!;
		public static Type Kalam { get; } = null!;
		public static Type LuckiestGuy { get; } = null!;
		public static Type Merriweather { get; } = null!;
		public static Type Michroma { get; } = null!;
		public static Type Nunito { get; } = null!;
		public static Type Oswald { get; } = null!;
		public static Type PatrickHand { get; } = null!;
		public static Type PermanentMarker { get; } = null!;
		public static Type Roboto { get; } = null!;
		public static Type RobotoCondensed { get; } = null!;
		public static Type RobotoMono { get; } = null!;
		public static Type Sarpanch { get; } = null!;
		public static Type SpecialElite { get; } = null!;
		public static Type TitilliumWeb { get; } = null!;
		public static Type Ubuntu { get; } = null!;
		public static Type BuilderSans { get; } = null!;
		public static Type BuilderSansMedium { get; } = null!;
		public static Type BuilderSansBold { get; } = null!;
		public static Type BuilderSansExtraBold { get; } = null!;
		public static Type Arimo { get; } = null!;
		public static Type ArimoBold { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FontSize
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Size8 { get; } = null!;
		public static Type Size9 { get; } = null!;
		public static Type Size10 { get; } = null!;
		public static Type Size11 { get; } = null!;
		public static Type Size12 { get; } = null!;
		public static Type Size14 { get; } = null!;
		public static Type Size18 { get; } = null!;
		public static Type Size24 { get; } = null!;
		public static Type Size36 { get; } = null!;
		public static Type Size48 { get; } = null!;
		public static Type Size28 { get; } = null!;
		public static Type Size32 { get; } = null!;
		public static Type Size42 { get; } = null!;
		public static Type Size60 { get; } = null!;
		public static Type Size96 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FontStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Normal { get; } = null!;
		public static Type Italic { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FontWeight
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Thin { get; } = null!;
		public static Type ExtraLight { get; } = null!;
		public static Type Light { get; } = null!;
		public static Type Regular { get; } = null!;
		public static Type Medium { get; } = null!;
		public static Type SemiBold { get; } = null!;
		public static Type Bold { get; } = null!;
		public static Type ExtraBold { get; } = null!;
		public static Type Heavy { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ForceLimitMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Magnitude { get; } = null!;
		public static Type PerAxis { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FormFactor
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Symmetric { get; } = null!;
		public static Type Brick { get; } = null!;
		public static Type Plate { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FrameStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Custom { get; } = null!;
		public static Type ChatBlue { get; } = null!;
		public static Type RobloxSquare { get; } = null!;
		public static Type RobloxRound { get; } = null!;
		public static Type ChatGreen { get; } = null!;
		public static Type ChatRed { get; } = null!;
		public static Type DropShadow { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FramerateManagerMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type On { get; } = null!;
		public static Type Off { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FriendRequestEvent
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Issue { get; } = null!;
		public static Type Revoke { get; } = null!;
		public static Type Accept { get; } = null!;
		public static Type Deny { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FriendStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type NotFriend { get; } = null!;
		public static Type Friend { get; } = null!;
		public static Type FriendRequestSent { get; } = null!;
		public static Type FriendRequestReceived { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class FunctionalTestResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Passed { get; } = null!;
		public static Type Warning { get; } = null!;
		public static Type Error { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class GameAvatarType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type R6 { get; } = null!;
		public static Type R15 { get; } = null!;
		public static Type PlayerChoice { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class GamepadType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type PS4 { get; } = null!;
		public static Type PS5 { get; } = null!;
		public static Type XboxOne { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class GearGenreSetting
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type AllGenres { get; } = null!;
		public static Type MatchingGenreOnly { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class GearType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type MeleeWeapons { get; } = null!;
		public static Type RangedWeapons { get; } = null!;
		public static Type Explosives { get; } = null!;
		public static Type PowerUps { get; } = null!;
		public static Type NavigationEnhancers { get; } = null!;
		public static Type MusicalInstruments { get; } = null!;
		public static Type SocialItems { get; } = null!;
		public static Type BuildingTools { get; } = null!;
		public static Type Transport { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Genre
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type All { get; } = null!;
		public static Type TownAndCity { get; } = null!;
		public static Type Fantasy { get; } = null!;
		public static Type SciFi { get; } = null!;
		public static Type Ninja { get; } = null!;
		public static Type Scary { get; } = null!;
		public static Type Pirate { get; } = null!;
		public static Type Adventure { get; } = null!;
		public static Type Sports { get; } = null!;
		public static Type Funny { get; } = null!;
		public static Type WildWest { get; } = null!;
		public static Type War { get; } = null!;
		public static Type SkatePark { get; } = null!;
		public static Type Tutorial { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class GraphicsMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type Direct3D11 { get; } = null!;
		public static Type OpenGL { get; } = null!;
		public static Type Metal { get; } = null!;
		public static Type Vulkan { get; } = null!;
		public static Type NoGraphics { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class GuiState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Idle { get; } = null!;
		public static Type Hover { get; } = null!;
		public static Type Press { get; } = null!;
		public static Type NonInteractable { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class GuiType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Core { get; } = null!;
		public static Type Custom { get; } = null!;
		public static Type PlayerNameplates { get; } = null!;
		public static Type CustomBillboards { get; } = null!;
		public static Type CoreBillboards { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HandlesStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Resize { get; } = null!;
		public static Type Movement { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HighlightDepthMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type AlwaysOnTop { get; } = null!;
		public static Type Occluded { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HorizontalAlignment
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Center { get; } = null!;
		public static Type Left { get; } = null!;
		public static Type Right { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HoverAnimateSpeed
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type VerySlow { get; } = null!;
		public static Type Slow { get; } = null!;
		public static Type Medium { get; } = null!;
		public static Type Fast { get; } = null!;
		public static Type VeryFast { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HttpCachePolicy
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Full { get; } = null!;
		public static Type DataOnly { get; } = null!;
		public static Type Default { get; } = null!;
		public static Type InternalRedirectRefresh { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HttpCompression
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Gzip { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HttpContentType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type ApplicationJson { get; } = null!;
		public static Type ApplicationXml { get; } = null!;
		public static Type ApplicationUrlEncoded { get; } = null!;
		public static Type TextPlain { get; } = null!;
		public static Type TextXml { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HttpError
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OK { get; } = null!;
		public static Type InvalidUrl { get; } = null!;
		public static Type DnsResolve { get; } = null!;
		public static Type ConnectFail { get; } = null!;
		public static Type OutOfMemory { get; } = null!;
		public static Type TimedOut { get; } = null!;
		public static Type TooManyRedirects { get; } = null!;
		public static Type InvalidRedirect { get; } = null!;
		public static Type NetFail { get; } = null!;
		public static Type Aborted { get; } = null!;
		public static Type SslConnectFail { get; } = null!;
		public static Type SslVerificationFail { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HttpRequestType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type MarketplaceService { get; } = null!;
		public static Type Players { get; } = null!;
		public static Type Chat { get; } = null!;
		public static Type Avatar { get; } = null!;
		public static Type Analytics { get; } = null!;
		public static Type Localization { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HumanoidCollisionType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OuterBox { get; } = null!;
		public static Type InnerBox { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HumanoidDisplayDistanceType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Viewer { get; } = null!;
		public static Type Subject { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HumanoidHealthDisplayType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type DisplayWhenDamaged { get; } = null!;
		public static Type AlwaysOn { get; } = null!;
		public static Type AlwaysOff { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HumanoidRigType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type R6 { get; } = null!;
		public static Type R15 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class HumanoidStateType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type FallingDown { get; } = null!;
		public static Type Ragdoll { get; } = null!;
		public static Type GettingUp { get; } = null!;
		public static Type Jumping { get; } = null!;
		public static Type Swimming { get; } = null!;
		public static Type Freefall { get; } = null!;
		public static Type Flying { get; } = null!;
		public static Type Landed { get; } = null!;
		public static Type Running { get; } = null!;
		public static Type RunningNoPhysics { get; } = null!;
		public static Type StrafingNoPhysics { get; } = null!;
		public static Type Climbing { get; } = null!;
		public static Type Seated { get; } = null!;
		public static Type PlatformStanding { get; } = null!;
		public static Type Dead { get; } = null!;
		public static Type Physics { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class IKCollisionsMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NoCollisions { get; } = null!;
		public static Type OtherMechanismsAnchored { get; } = null!;
		public static Type IncludeContactedMechanisms { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class IKControlConstraintSupport
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class IKControlType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Transform { get; } = null!;
		public static Type Position { get; } = null!;
		public static Type Rotation { get; } = null!;
		public static Type LookAt { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class IXPLoadingStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Pending { get; } = null!;
		public static Type Initialized { get; } = null!;
		public static Type ErrorInvalidUser { get; } = null!;
		public static Type ErrorConnection { get; } = null!;
		public static Type ErrorJsonParse { get; } = null!;
		public static Type ErrorTimedOut { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ImageAlphaType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type LockCanvasAlpha { get; } = null!;
		public static Type LockCanvasColor { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ImageCombineType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type BlendSourceOver { get; } = null!;
		public static Type Overwrite { get; } = null!;
		public static Type Add { get; } = null!;
		public static Type Multiply { get; } = null!;
		public static Type AlphaBlend { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class InOut
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Edge { get; } = null!;
		public static Type Inset { get; } = null!;
		public static Type Center { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class InfoType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Asset { get; } = null!;
		public static Type Product { get; } = null!;
		public static Type GamePass { get; } = null!;
		public static Type Subscription { get; } = null!;
		public static Type Bundle { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class InitialDockState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Top { get; } = null!;
		public static Type Bottom { get; } = null!;
		public static Type Left { get; } = null!;
		public static Type Right { get; } = null!;
		public static Type Float { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class InputType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NoInput { get; } = null!;
		public static Type Constant { get; } = null!;
		public static Type Sin { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class InterpolationThrottlingMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class InviteState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Placed { get; } = null!;
		public static Type Accepted { get; } = null!;
		public static Type Declined { get; } = null!;
		public static Type Missed { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ItemLineAlignment
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type Start { get; } = null!;
		public static Type Center { get; } = null!;
		public static Type End { get; } = null!;
		public static Type Stretch { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class JoinSource
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type CreatedItemAttribution { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class JointCreationMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type All { get; } = null!;
		public static Type Surface { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class KeyCode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type Backspace { get; } = null!;
		public static Type Tab { get; } = null!;
		public static Type Clear { get; } = null!;
		public static Type Return { get; } = null!;
		public static Type Pause { get; } = null!;
		public static Type Escape { get; } = null!;
		public static Type Space { get; } = null!;
		public static Type QuotedDouble { get; } = null!;
		public static Type Hash { get; } = null!;
		public static Type Dollar { get; } = null!;
		public static Type Percent { get; } = null!;
		public static Type Ampersand { get; } = null!;
		public static Type Quote { get; } = null!;
		public static Type LeftParenthesis { get; } = null!;
		public static Type RightParenthesis { get; } = null!;
		public static Type Asterisk { get; } = null!;
		public static Type Plus { get; } = null!;
		public static Type Comma { get; } = null!;
		public static Type Minus { get; } = null!;
		public static Type Period { get; } = null!;
		public static Type Slash { get; } = null!;
		public static Type Zero { get; } = null!;
		public static Type One { get; } = null!;
		public static Type Two { get; } = null!;
		public static Type Three { get; } = null!;
		public static Type Four { get; } = null!;
		public static Type Five { get; } = null!;
		public static Type Six { get; } = null!;
		public static Type Seven { get; } = null!;
		public static Type Eight { get; } = null!;
		public static Type Nine { get; } = null!;
		public static Type Colon { get; } = null!;
		public static Type Semicolon { get; } = null!;
		public static Type LessThan { get; } = null!;
		public static Type Equals { get; } = null!;
		public static Type GreaterThan { get; } = null!;
		public static Type Question { get; } = null!;
		public static Type At { get; } = null!;
		public static Type LeftBracket { get; } = null!;
		public static Type BackSlash { get; } = null!;
		public static Type RightBracket { get; } = null!;
		public static Type Caret { get; } = null!;
		public static Type Underscore { get; } = null!;
		public static Type Backquote { get; } = null!;
		public static Type A { get; } = null!;
		public static Type B { get; } = null!;
		public static Type C { get; } = null!;
		public static Type D { get; } = null!;
		public static Type E { get; } = null!;
		public static Type F { get; } = null!;
		public static Type G { get; } = null!;
		public static Type H { get; } = null!;
		public static Type I { get; } = null!;
		public static Type J { get; } = null!;
		public static Type K { get; } = null!;
		public static Type L { get; } = null!;
		public static Type M { get; } = null!;
		public static Type N { get; } = null!;
		public static Type O { get; } = null!;
		public static Type P { get; } = null!;
		public static Type Q { get; } = null!;
		public static Type R { get; } = null!;
		public static Type S { get; } = null!;
		public static Type T { get; } = null!;
		public static Type U { get; } = null!;
		public static Type V { get; } = null!;
		public static Type W { get; } = null!;
		public static Type X { get; } = null!;
		public static Type Y { get; } = null!;
		public static Type Z { get; } = null!;
		public static Type LeftCurly { get; } = null!;
		public static Type Pipe { get; } = null!;
		public static Type RightCurly { get; } = null!;
		public static Type Tilde { get; } = null!;
		public static Type Delete { get; } = null!;
		public static Type World0 { get; } = null!;
		public static Type World1 { get; } = null!;
		public static Type World2 { get; } = null!;
		public static Type World3 { get; } = null!;
		public static Type World4 { get; } = null!;
		public static Type World5 { get; } = null!;
		public static Type World6 { get; } = null!;
		public static Type World7 { get; } = null!;
		public static Type World8 { get; } = null!;
		public static Type World9 { get; } = null!;
		public static Type World10 { get; } = null!;
		public static Type World11 { get; } = null!;
		public static Type World12 { get; } = null!;
		public static Type World13 { get; } = null!;
		public static Type World14 { get; } = null!;
		public static Type World15 { get; } = null!;
		public static Type World16 { get; } = null!;
		public static Type World17 { get; } = null!;
		public static Type World18 { get; } = null!;
		public static Type World19 { get; } = null!;
		public static Type World20 { get; } = null!;
		public static Type World21 { get; } = null!;
		public static Type World22 { get; } = null!;
		public static Type World23 { get; } = null!;
		public static Type World24 { get; } = null!;
		public static Type World25 { get; } = null!;
		public static Type World26 { get; } = null!;
		public static Type World27 { get; } = null!;
		public static Type World28 { get; } = null!;
		public static Type World29 { get; } = null!;
		public static Type World30 { get; } = null!;
		public static Type World31 { get; } = null!;
		public static Type World32 { get; } = null!;
		public static Type World33 { get; } = null!;
		public static Type World34 { get; } = null!;
		public static Type World35 { get; } = null!;
		public static Type World36 { get; } = null!;
		public static Type World37 { get; } = null!;
		public static Type World38 { get; } = null!;
		public static Type World39 { get; } = null!;
		public static Type World40 { get; } = null!;
		public static Type World41 { get; } = null!;
		public static Type World42 { get; } = null!;
		public static Type World43 { get; } = null!;
		public static Type World44 { get; } = null!;
		public static Type World45 { get; } = null!;
		public static Type World46 { get; } = null!;
		public static Type World47 { get; } = null!;
		public static Type World48 { get; } = null!;
		public static Type World49 { get; } = null!;
		public static Type World50 { get; } = null!;
		public static Type World51 { get; } = null!;
		public static Type World52 { get; } = null!;
		public static Type World53 { get; } = null!;
		public static Type World54 { get; } = null!;
		public static Type World55 { get; } = null!;
		public static Type World56 { get; } = null!;
		public static Type World57 { get; } = null!;
		public static Type World58 { get; } = null!;
		public static Type World59 { get; } = null!;
		public static Type World60 { get; } = null!;
		public static Type World61 { get; } = null!;
		public static Type World62 { get; } = null!;
		public static Type World63 { get; } = null!;
		public static Type World64 { get; } = null!;
		public static Type World65 { get; } = null!;
		public static Type World66 { get; } = null!;
		public static Type World67 { get; } = null!;
		public static Type World68 { get; } = null!;
		public static Type World69 { get; } = null!;
		public static Type World70 { get; } = null!;
		public static Type World71 { get; } = null!;
		public static Type World72 { get; } = null!;
		public static Type World73 { get; } = null!;
		public static Type World74 { get; } = null!;
		public static Type World75 { get; } = null!;
		public static Type World76 { get; } = null!;
		public static Type World77 { get; } = null!;
		public static Type World78 { get; } = null!;
		public static Type World79 { get; } = null!;
		public static Type World80 { get; } = null!;
		public static Type World81 { get; } = null!;
		public static Type World82 { get; } = null!;
		public static Type World83 { get; } = null!;
		public static Type World84 { get; } = null!;
		public static Type World85 { get; } = null!;
		public static Type World86 { get; } = null!;
		public static Type World87 { get; } = null!;
		public static Type World88 { get; } = null!;
		public static Type World89 { get; } = null!;
		public static Type World90 { get; } = null!;
		public static Type World91 { get; } = null!;
		public static Type World92 { get; } = null!;
		public static Type World93 { get; } = null!;
		public static Type World94 { get; } = null!;
		public static Type World95 { get; } = null!;
		public static Type KeypadZero { get; } = null!;
		public static Type KeypadOne { get; } = null!;
		public static Type KeypadTwo { get; } = null!;
		public static Type KeypadThree { get; } = null!;
		public static Type KeypadFour { get; } = null!;
		public static Type KeypadFive { get; } = null!;
		public static Type KeypadSix { get; } = null!;
		public static Type KeypadSeven { get; } = null!;
		public static Type KeypadEight { get; } = null!;
		public static Type KeypadNine { get; } = null!;
		public static Type KeypadPeriod { get; } = null!;
		public static Type KeypadDivide { get; } = null!;
		public static Type KeypadMultiply { get; } = null!;
		public static Type KeypadMinus { get; } = null!;
		public static Type KeypadPlus { get; } = null!;
		public static Type KeypadEnter { get; } = null!;
		public static Type KeypadEquals { get; } = null!;
		public static Type Up { get; } = null!;
		public static Type Down { get; } = null!;
		public static Type Right { get; } = null!;
		public static Type Left { get; } = null!;
		public static Type Insert { get; } = null!;
		public static Type Home { get; } = null!;
		public static Type End { get; } = null!;
		public static Type PageUp { get; } = null!;
		public static Type PageDown { get; } = null!;
		public static Type F1 { get; } = null!;
		public static Type F2 { get; } = null!;
		public static Type F3 { get; } = null!;
		public static Type F4 { get; } = null!;
		public static Type F5 { get; } = null!;
		public static Type F6 { get; } = null!;
		public static Type F7 { get; } = null!;
		public static Type F8 { get; } = null!;
		public static Type F9 { get; } = null!;
		public static Type F10 { get; } = null!;
		public static Type F11 { get; } = null!;
		public static Type F12 { get; } = null!;
		public static Type F13 { get; } = null!;
		public static Type F14 { get; } = null!;
		public static Type F15 { get; } = null!;
		public static Type NumLock { get; } = null!;
		public static Type CapsLock { get; } = null!;
		public static Type ScrollLock { get; } = null!;
		public static Type RightShift { get; } = null!;
		public static Type LeftShift { get; } = null!;
		public static Type RightControl { get; } = null!;
		public static Type LeftControl { get; } = null!;
		public static Type RightAlt { get; } = null!;
		public static Type LeftAlt { get; } = null!;
		public static Type RightMeta { get; } = null!;
		public static Type LeftMeta { get; } = null!;
		public static Type LeftSuper { get; } = null!;
		public static Type RightSuper { get; } = null!;
		public static Type Mode { get; } = null!;
		public static Type Compose { get; } = null!;
		public static Type Help { get; } = null!;
		public static Type Print { get; } = null!;
		public static Type SysReq { get; } = null!;
		public static Type Break { get; } = null!;
		public static Type Menu { get; } = null!;
		public static Type Power { get; } = null!;
		public static Type Euro { get; } = null!;
		public static Type Undo { get; } = null!;
		public static Type ButtonX { get; } = null!;
		public static Type ButtonY { get; } = null!;
		public static Type ButtonA { get; } = null!;
		public static Type ButtonB { get; } = null!;
		public static Type ButtonR1 { get; } = null!;
		public static Type ButtonL1 { get; } = null!;
		public static Type ButtonR2 { get; } = null!;
		public static Type ButtonL2 { get; } = null!;
		public static Type ButtonR3 { get; } = null!;
		public static Type ButtonL3 { get; } = null!;
		public static Type ButtonStart { get; } = null!;
		public static Type ButtonSelect { get; } = null!;
		public static Type DPadLeft { get; } = null!;
		public static Type DPadRight { get; } = null!;
		public static Type DPadUp { get; } = null!;
		public static Type DPadDown { get; } = null!;
		public static Type Thumbstick1 { get; } = null!;
		public static Type Thumbstick2 { get; } = null!;
		public static Type MouseLeftButton { get; } = null!;
		public static Type MouseRightButton { get; } = null!;
		public static Type MouseMiddleButton { get; } = null!;
		public static Type MouseBackButton { get; } = null!;
		public static Type MouseNoButton { get; } = null!;
		public static Type MouseX { get; } = null!;
		public static Type MouseY { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class KeyInterpolationMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Constant { get; } = null!;
		public static Type Linear { get; } = null!;
		public static Type Cubic { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class KeywordFilterType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Include { get; } = null!;
		public static Type Exclude { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Language
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class LeftRight
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Left { get; } = null!;
		public static Type Center { get; } = null!;
		public static Type Right { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Limb
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Head { get; } = null!;
		public static Type Torso { get; } = null!;
		public static Type LeftArm { get; } = null!;
		public static Type RightArm { get; } = null!;
		public static Type LeftLeg { get; } = null!;
		public static Type RightLeg { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class LineJoinMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Round { get; } = null!;
		public static Type Bevel { get; } = null!;
		public static Type Miter { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ListDisplayMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Horizontal { get; } = null!;
		public static Type Vertical { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ListenerType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Camera { get; } = null!;
		public static Type CFrame { get; } = null!;
		public static Type ObjectPosition { get; } = null!;
		public static Type ObjectCFrame { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class LiveEditingAtomicUpdateResponse
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type FailureGuidNotFound { get; } = null!;
		public static Type FailureHashMismatch { get; } = null!;
		public static Type FailureOperationIllegal { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class LiveEditingBroadcastMessageType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Normal { get; } = null!;
		public static Type Warning { get; } = null!;
		public static Type Error { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class LoadCharacterLayeredClothing
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class LoadDynamicHeads
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class LocationType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Character { get; } = null!;
		public static Type Camera { get; } = null!;
		public static Type ObjectPosition { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MarketplaceBulkPurchasePromptStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Completed { get; } = null!;
		public static Type Aborted { get; } = null!;
		public static Type Error { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MarketplaceItemPurchaseStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type SystemError { get; } = null!;
		public static Type AlreadyOwned { get; } = null!;
		public static Type InsufficientRobux { get; } = null!;
		public static Type QuantityLimitExceeded { get; } = null!;
		public static Type QuotaExceeded { get; } = null!;
		public static Type NotForSale { get; } = null!;
		public static Type NotAvailableForPurchaser { get; } = null!;
		public static Type PriceMismatch { get; } = null!;
		public static Type SoldOut { get; } = null!;
		public static Type PurchaserIsSeller { get; } = null!;
		public static Type InsufficientMembership { get; } = null!;
		public static Type PlaceInvalid { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MarketplaceProductType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type AvatarAsset { get; } = null!;
		public static Type AvatarBundle { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MarkupKind
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type PlainText { get; } = null!;
		public static Type Markdown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Material
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Plastic { get; } = null!;
		public static Type SmoothPlastic { get; } = null!;
		public static Type Neon { get; } = null!;
		public static Type Wood { get; } = null!;
		public static Type WoodPlanks { get; } = null!;
		public static Type Marble { get; } = null!;
		public static Type Slate { get; } = null!;
		public static Type Concrete { get; } = null!;
		public static Type Granite { get; } = null!;
		public static Type Brick { get; } = null!;
		public static Type Pebble { get; } = null!;
		public static Type Cobblestone { get; } = null!;
		public static Type Rock { get; } = null!;
		public static Type Sandstone { get; } = null!;
		public static Type Basalt { get; } = null!;
		public static Type CrackedLava { get; } = null!;
		public static Type Limestone { get; } = null!;
		public static Type Pavement { get; } = null!;
		public static Type CorrodedMetal { get; } = null!;
		public static Type DiamondPlate { get; } = null!;
		public static Type Foil { get; } = null!;
		public static Type Metal { get; } = null!;
		public static Type Grass { get; } = null!;
		public static Type LeafyGrass { get; } = null!;
		public static Type Sand { get; } = null!;
		public static Type Fabric { get; } = null!;
		public static Type Snow { get; } = null!;
		public static Type Mud { get; } = null!;
		public static Type Ground { get; } = null!;
		public static Type Asphalt { get; } = null!;
		public static Type Salt { get; } = null!;
		public static Type Ice { get; } = null!;
		public static Type Glacier { get; } = null!;
		public static Type Glass { get; } = null!;
		public static Type ForceField { get; } = null!;
		public static Type Air { get; } = null!;
		public static Type Water { get; } = null!;
		public static Type Cardboard { get; } = null!;
		public static Type Carpet { get; } = null!;
		public static Type CeramicTiles { get; } = null!;
		public static Type ClayRoofTiles { get; } = null!;
		public static Type RoofShingles { get; } = null!;
		public static Type Leather { get; } = null!;
		public static Type Plaster { get; } = null!;
		public static Type Rubber { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MaterialPattern
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Regular { get; } = null!;
		public static Type Organic { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MembershipType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type BuildersClub { get; } = null!;
		public static Type TurboBuildersClub { get; } = null!;
		public static Type OutrageousBuildersClub { get; } = null!;
		public static Type Premium { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MeshPartDetailLevel
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type DistanceBased { get; } = null!;
		public static Type Level00 { get; } = null!;
		public static Type Level01 { get; } = null!;
		public static Type Level02 { get; } = null!;
		public static Type Level03 { get; } = null!;
		public static Type Level04 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MeshPartHeadsAndAccessories
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MeshScaleUnit
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Stud { get; } = null!;
		public static Type Meter { get; } = null!;
		public static Type CM { get; } = null!;
		public static Type MM { get; } = null!;
		public static Type Foot { get; } = null!;
		public static Type Inch { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MeshType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Head { get; } = null!;
		public static Type Torso { get; } = null!;
		public static Type Wedge { get; } = null!;
		public static Type Sphere { get; } = null!;
		public static Type Cylinder { get; } = null!;
		public static Type FileMesh { get; } = null!;
		public static Type Brick { get; } = null!;
		public static Type Prism { get; } = null!;
		public static Type Pyramid { get; } = null!;
		public static Type ParallelRamp { get; } = null!;
		public static Type RightAngleRamp { get; } = null!;
		public static Type CornerWedge { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MessageType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type MessageOutput { get; } = null!;
		public static Type MessageInfo { get; } = null!;
		public static Type MessageWarning { get; } = null!;
		public static Type MessageError { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ModelLevelOfDetail
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type StreamingMesh { get; } = null!;
		public static Type Disabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ModelStreamingBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Legacy { get; } = null!;
		public static Type Improved { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ModelStreamingMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Atomic { get; } = null!;
		public static Type Persistent { get; } = null!;
		public static Type PersistentPerPlayer { get; } = null!;
		public static Type Nonatomic { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ModerationStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type ReviewedApproved { get; } = null!;
		public static Type ReviewedRejected { get; } = null!;
		public static Type NotReviewed { get; } = null!;
		public static Type NotApplicable { get; } = null!;
		public static Type Invalid { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ModifierKey
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Shift { get; } = null!;
		public static Type Ctrl { get; } = null!;
		public static Type Alt { get; } = null!;
		public static Type Meta { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MouseBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type LockCenter { get; } = null!;
		public static Type LockCurrentPosition { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MoveState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Stopped { get; } = null!;
		public static Type Coasting { get; } = null!;
		public static Type Pushing { get; } = null!;
		public static Type Stopping { get; } = null!;
		public static Type AirFree { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MoverConstraintRootBehaviorMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class MuteState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unmuted { get; } = null!;
		public static Type Muted { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class NameOcclusion
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NoOcclusion { get; } = null!;
		public static Type EnemyOcclusion { get; } = null!;
		public static Type OccludeAll { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class NetworkOwnership
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type Manual { get; } = null!;
		public static Type OnContact { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class NetworkStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type Connected { get; } = null!;
		public static Type Disconnected { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class NoiseType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type SimplexGabor { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class NormalId
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Right { get; } = null!;
		public static Type Top { get; } = null!;
		public static Type Back { get; } = null!;
		public static Type Left { get; } = null!;
		public static Type Bottom { get; } = null!;
		public static Type Front { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class OperationType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Null { get; } = null!;
		public static Type Union { get; } = null!;
		public static Type Subtraction { get; } = null!;
		public static Type Intersection { get; } = null!;
		public static Type Primitive { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class OrientationAlignmentMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OneAttachment { get; } = null!;
		public static Type TwoAttachment { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class OutfitSource
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type All { get; } = null!;
		public static Type Created { get; } = null!;
		public static Type Purchased { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class OutfitType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type All { get; } = null!;
		public static Type Avatar { get; } = null!;
		public static Type DynamicHead { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class OutputLayoutMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Horizontal { get; } = null!;
		public static Type Vertical { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class OverrideMouseIconBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type ForceShow { get; } = null!;
		public static Type ForceHide { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PackagePermission
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type NoAccess { get; } = null!;
		public static Type Revoked { get; } = null!;
		public static Type UseView { get; } = null!;
		public static Type Edit { get; } = null!;
		public static Type Own { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PartType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Ball { get; } = null!;
		public static Type Block { get; } = null!;
		public static Type Cylinder { get; } = null!;
		public static Type Wedge { get; } = null!;
		public static Type CornerWedge { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ParticleEmitterShape
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Box { get; } = null!;
		public static Type Sphere { get; } = null!;
		public static Type Cylinder { get; } = null!;
		public static Type Disc { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ParticleEmitterShapeInOut
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Outward { get; } = null!;
		public static Type Inward { get; } = null!;
		public static Type InAndOut { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ParticleEmitterShapeStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Volume { get; } = null!;
		public static Type Surface { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ParticleFlipbookLayout
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Grid2x2 { get; } = null!;
		public static Type Grid4x4 { get; } = null!;
		public static Type Grid8x8 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ParticleFlipbookMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Loop { get; } = null!;
		public static Type OneShot { get; } = null!;
		public static Type PingPong { get; } = null!;
		public static Type Random { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ParticleFlipbookTextureCompatible
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NotCompatible { get; } = null!;
		public static Type Compatible { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ParticleOrientation
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type FacingCamera { get; } = null!;
		public static Type FacingCameraWorldUp { get; } = null!;
		public static Type VelocityParallel { get; } = null!;
		public static Type VelocityPerpendicular { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PathStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type NoPath { get; } = null!;
		public static Type ClosestNoPath { get; } = null!;
		public static Type ClosestOutOfRange { get; } = null!;
		public static Type FailStartNotEmpty { get; } = null!;
		public static Type FailFinishNotEmpty { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PathWaypointAction
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Walk { get; } = null!;
		public static Type Jump { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PermissionLevelShown
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Game { get; } = null!;
		public static Type RobloxGame { get; } = null!;
		public static Type RobloxScript { get; } = null!;
		public static Type Studio { get; } = null!;
		public static Type Roblox { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PhysicsSimulationRate
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Fixed240Hz { get; } = null!;
		public static Type Fixed120Hz { get; } = null!;
		public static Type Fixed60Hz { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PhysicsSteppingMethod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Fixed { get; } = null!;
		public static Type Adaptive { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Platform
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Windows { get; } = null!;
		public static Type OSX { get; } = null!;
		public static Type IOS { get; } = null!;
		public static Type Android { get; } = null!;
		public static Type XBoxOne { get; } = null!;
		public static Type PS4 { get; } = null!;
		public static Type PS3 { get; } = null!;
		public static Type XBox360 { get; } = null!;
		public static Type WiiU { get; } = null!;
		public static Type NX { get; } = null!;
		public static Type Ouya { get; } = null!;
		public static Type AndroidTV { get; } = null!;
		public static Type Chromecast { get; } = null!;
		public static Type Linux { get; } = null!;
		public static Type SteamOS { get; } = null!;
		public static Type WebOS { get; } = null!;
		public static Type DOS { get; } = null!;
		public static Type BeOS { get; } = null!;
		public static Type UWP { get; } = null!;
		public static Type PS5 { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PlaybackState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Begin { get; } = null!;
		public static Type Delayed { get; } = null!;
		public static Type Playing { get; } = null!;
		public static Type Paused { get; } = null!;
		public static Type Completed { get; } = null!;
		public static Type Cancelled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PlayerActions
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type CharacterForward { get; } = null!;
		public static Type CharacterBackward { get; } = null!;
		public static Type CharacterLeft { get; } = null!;
		public static Type CharacterRight { get; } = null!;
		public static Type CharacterJump { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PlayerCharacterDestroyBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PlayerChatType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type All { get; } = null!;
		public static Type Team { get; } = null!;
		public static Type Whisper { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PoseEasingDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type In { get; } = null!;
		public static Type Out { get; } = null!;
		public static Type InOut { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PoseEasingStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Linear { get; } = null!;
		public static Type Constant { get; } = null!;
		public static Type Elastic { get; } = null!;
		public static Type Cubic { get; } = null!;
		public static Type Bounce { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PositionAlignmentMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OneAttachment { get; } = null!;
		public static Type TwoAttachment { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PreferredTextSize
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Medium { get; } = null!;
		public static Type Large { get; } = null!;
		public static Type Larger { get; } = null!;
		public static Type Largest { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PrimalPhysicsSolver
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Experimental { get; } = null!;
		public static Type Disabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PrimitiveType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Null { get; } = null!;
		public static Type Ball { get; } = null!;
		public static Type Cylinder { get; } = null!;
		public static Type Block { get; } = null!;
		public static Type Wedge { get; } = null!;
		public static Type CornerWedge { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PrivilegeType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Owner { get; } = null!;
		public static Type Admin { get; } = null!;
		public static Type Member { get; } = null!;
		public static Type Visitor { get; } = null!;
		public static Type Banned { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ProductLocationRestriction
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type AvatarShop { get; } = null!;
		public static Type AllowedGames { get; } = null!;
		public static Type AllGames { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ProductPurchaseDecision
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NotProcessedYet { get; } = null!;
		public static Type PurchaseGranted { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PromptCreateAssetResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type PermissionDenied { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type UploadFailed { get; } = null!;
		public static Type NoUserInput { get; } = null!;
		public static Type UnknownFailure { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PromptCreateAvatarResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type PermissionDenied { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type UploadFailed { get; } = null!;
		public static Type NoUserInput { get; } = null!;
		public static Type InvalidHumanoidDescription { get; } = null!;
		public static Type UGCValidationFailed { get; } = null!;
		public static Type ModeratedName { get; } = null!;
		public static Type MaxOutfits { get; } = null!;
		public static Type UnknownFailure { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PromptPublishAssetResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type PermissionDenied { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type UploadFailed { get; } = null!;
		public static Type NoUserInput { get; } = null!;
		public static Type UnknownFailure { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class PropertyStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Ok { get; } = null!;
		public static Type Warning { get; } = null!;
		public static Type Error { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ProximityPromptExclusivity
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OnePerButton { get; } = null!;
		public static Type OneGlobally { get; } = null!;
		public static Type AlwaysShow { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ProximityPromptInputType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Keyboard { get; } = null!;
		public static Type Gamepad { get; } = null!;
		public static Type Touch { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ProximityPromptStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class QualityLevel
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type Level01 { get; } = null!;
		public static Type Level02 { get; } = null!;
		public static Type Level03 { get; } = null!;
		public static Type Level04 { get; } = null!;
		public static Type Level05 { get; } = null!;
		public static Type Level06 { get; } = null!;
		public static Type Level07 { get; } = null!;
		public static Type Level08 { get; } = null!;
		public static Type Level09 { get; } = null!;
		public static Type Level10 { get; } = null!;
		public static Type Level11 { get; } = null!;
		public static Type Level12 { get; } = null!;
		public static Type Level13 { get; } = null!;
		public static Type Level14 { get; } = null!;
		public static Type Level15 { get; } = null!;
		public static Type Level16 { get; } = null!;
		public static Type Level17 { get; } = null!;
		public static Type Level18 { get; } = null!;
		public static Type Level19 { get; } = null!;
		public static Type Level20 { get; } = null!;
		public static Type Level21 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class R15CollisionType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OuterBox { get; } = null!;
		public static Type InnerBox { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RaycastFilterType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Exclude { get; } = null!;
		public static Type Include { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RejectCharacterDeletions
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RenderFidelity
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type Precise { get; } = null!;
		public static Type Performance { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RenderPriority
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type First { get; } = null!;
		public static Type Input { get; } = null!;
		public static Type Camera { get; } = null!;
		public static Type Character { get; } = null!;
		public static Type Last { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RenderingCacheOptimizationMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RenderingTestComparisonMethod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type psnr { get; } = null!;
		public static Type diff { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ReplicateInstanceDestroySetting
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ResamplerMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Pixelated { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ReservedHighlightId
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Standard { get; } = null!;
		public static Type Selection { get; } = null!;
		public static Type Hover { get; } = null!;
		public static Type Active { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RestPose
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type RotationsReset { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ReturnKeyType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Done { get; } = null!;
		public static Type Go { get; } = null!;
		public static Type Next { get; } = null!;
		public static Type Search { get; } = null!;
		public static Type Send { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ReverbType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NoReverb { get; } = null!;
		public static Type GenericReverb { get; } = null!;
		public static Type PaddedCell { get; } = null!;
		public static Type Room { get; } = null!;
		public static Type Bathroom { get; } = null!;
		public static Type LivingRoom { get; } = null!;
		public static Type StoneRoom { get; } = null!;
		public static Type Auditorium { get; } = null!;
		public static Type ConcertHall { get; } = null!;
		public static Type Cave { get; } = null!;
		public static Type Arena { get; } = null!;
		public static Type Hangar { get; } = null!;
		public static Type CarpettedHallway { get; } = null!;
		public static Type Hallway { get; } = null!;
		public static Type StoneCorridor { get; } = null!;
		public static Type Alley { get; } = null!;
		public static Type Forest { get; } = null!;
		public static Type City { get; } = null!;
		public static Type Mountains { get; } = null!;
		public static Type Quarry { get; } = null!;
		public static Type Plain { get; } = null!;
		public static Type ParkingLot { get; } = null!;
		public static Type SewerPipe { get; } = null!;
		public static Type UnderWater { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RibbonTool
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Select { get; } = null!;
		public static Type Scale { get; } = null!;
		public static Type Rotate { get; } = null!;
		public static Type Move { get; } = null!;
		public static Type Transform { get; } = null!;
		public static Type ColorPicker { get; } = null!;
		public static Type MaterialPicker { get; } = null!;
		public static Type Group { get; } = null!;
		public static Type Ungroup { get; } = null!;
		public static Type None { get; } = null!;
		public static Type PivotEditor { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RigScale
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Rthro { get; } = null!;
		public static Type RthroNarrow { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RigType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type R15 { get; } = null!;
		public static Type Custom { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RollOffMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Inverse { get; } = null!;
		public static Type Linear { get; } = null!;
		public static Type LinearSquare { get; } = null!;
		public static Type InverseTapered { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RotationOrder
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type XYZ { get; } = null!;
		public static Type XZY { get; } = null!;
		public static Type YZX { get; } = null!;
		public static Type YXZ { get; } = null!;
		public static Type ZXY { get; } = null!;
		public static Type ZYX { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RotationType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type MovementRelative { get; } = null!;
		public static Type CameraRelative { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RtlTextSupport
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RunContext
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Legacy { get; } = null!;
		public static Type Server { get; } = null!;
		public static Type Client { get; } = null!;
		public static Type Plugin { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RunState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Stopped { get; } = null!;
		public static Type Running { get; } = null!;
		public static Type Paused { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class RuntimeUndoBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Aggregate { get; } = null!;
		public static Type Snapshot { get; } = null!;
		public static Type Hybrid { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SafeAreaCompatibility
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type FullscreenExtension { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SalesTypeFilter
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type All { get; } = null!;
		public static Type Collectibles { get; } = null!;
		public static Type Premium { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SaveAvatarThumbnailCustomizationFailure
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type BadThumbnailType { get; } = null!;
		public static Type BadYRotDeg { get; } = null!;
		public static Type BadFieldOfViewDeg { get; } = null!;
		public static Type BadDistanceScale { get; } = null!;
		public static Type Other { get; } = null!;
		public static Type Throttled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SaveFilter
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type SaveWorld { get; } = null!;
		public static Type SaveGame { get; } = null!;
		public static Type SaveAll { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SavedQualitySetting
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type QualityLevel1 { get; } = null!;
		public static Type QualityLevel2 { get; } = null!;
		public static Type QualityLevel3 { get; } = null!;
		public static Type QualityLevel4 { get; } = null!;
		public static Type QualityLevel5 { get; } = null!;
		public static Type QualityLevel6 { get; } = null!;
		public static Type QualityLevel7 { get; } = null!;
		public static Type QualityLevel8 { get; } = null!;
		public static Type QualityLevel9 { get; } = null!;
		public static Type QualityLevel10 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ScaleType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Stretch { get; } = null!;
		public static Type Slice { get; } = null!;
		public static Type Tile { get; } = null!;
		public static Type Fit { get; } = null!;
		public static Type Crop { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ScopeCheckResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type ConsentAccepted { get; } = null!;
		public static Type InvalidScopes { get; } = null!;
		public static Type Timeout { get; } = null!;
		public static Type NoUserInput { get; } = null!;
		public static Type BackendError { get; } = null!;
		public static Type UnexpectedError { get; } = null!;
		public static Type InvalidArgument { get; } = null!;
		public static Type ConsentDenied { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ScreenInsets
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type DeviceSafeInsets { get; } = null!;
		public static Type CoreUISafeInsets { get; } = null!;
		public static Type TopbarSafeInsets { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ScreenOrientation
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type LandscapeLeft { get; } = null!;
		public static Type LandscapeRight { get; } = null!;
		public static Type LandscapeSensor { get; } = null!;
		public static Type Portrait { get; } = null!;
		public static Type Sensor { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ScrollBarInset
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type ScrollBar { get; } = null!;
		public static Type Always { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ScrollingDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type X { get; } = null!;
		public static Type Y { get; } = null!;
		public static Type XY { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SecurityCapability
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type RunClientScript { get; } = null!;
		public static Type RunServerScript { get; } = null!;
		public static Type AccessOutsideWrite { get; } = null!;
		public static Type AssetRequire { get; } = null!;
		public static Type LoadString { get; } = null!;
		public static Type ScriptGlobals { get; } = null!;
		public static Type CreateInstances { get; } = null!;
		public static Type Basic { get; } = null!;
		public static Type Audio { get; } = null!;
		public static Type DataStore { get; } = null!;
		public static Type Network { get; } = null!;
		public static Type Physics { get; } = null!;
		public static Type UI { get; } = null!;
		public static Type CSG { get; } = null!;
		public static Type Chat { get; } = null!;
		public static Type Animation { get; } = null!;
		public static Type Avatar { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SelectionBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Escape { get; } = null!;
		public static Type Stop { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SelectionRenderMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Outlines { get; } = null!;
		public static Type BoundingBoxes { get; } = null!;
		public static Type Both { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SelfViewPosition
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type LastPosition { get; } = null!;
		public static Type TopLeft { get; } = null!;
		public static Type TopRight { get; } = null!;
		public static Type BottomLeft { get; } = null!;
		public static Type BottomRight { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SensorMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Floor { get; } = null!;
		public static Type Ladder { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SensorUpdateType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type OnRead { get; } = null!;
		public static Type Manual { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ServerLiveEditingMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Uninitialized { get; } = null!;
		public static Type Enabled { get; } = null!;
		public static Type Disabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ServiceVisibility
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Always { get; } = null!;
		public static Type Off { get; } = null!;
		public static Type WithChildren { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Severity
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Error { get; } = null!;
		public static Type Warning { get; } = null!;
		public static Type Information { get; } = null!;
		public static Type Hint { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SignalBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Immediate { get; } = null!;
		public static Type Deferred { get; } = null!;
		public static Type AncestryDeferred { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SizeConstraint
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type RelativeXY { get; } = null!;
		public static Type RelativeXX { get; } = null!;
		public static Type RelativeYY { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SolverConvergenceMetricType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type IterationBased { get; } = null!;
		public static Type AlgorithmAgnostic { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SolverConvergenceVisualizationMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Disabled { get; } = null!;
		public static Type PerIsland { get; } = null!;
		public static Type PerEdge { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SortDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Ascending { get; } = null!;
		public static Type Descending { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SortOrder
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Name { get; } = null!;
		public static Type Custom { get; } = null!;
		public static Type LayoutOrder { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SpecialKey
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Insert { get; } = null!;
		public static Type Home { get; } = null!;
		public static Type End { get; } = null!;
		public static Type PageUp { get; } = null!;
		public static Type PageDown { get; } = null!;
		public static Type ChatHotkey { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StartCorner
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type TopLeft { get; } = null!;
		public static Type TopRight { get; } = null!;
		public static Type BottomLeft { get; } = null!;
		public static Type BottomRight { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Status
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Poison { get; } = null!;
		public static Type Confusion { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StreamOutBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type LowMemory { get; } = null!;
		public static Type Opportunistic { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StreamingIntegrityMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type MinimumRadiusPause { get; } = null!;
		public static Type PauseOutsideLoadedArea { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StreamingPauseMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type ClientPhysicsPause { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StudioCloseMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type CloseStudio { get; } = null!;
		public static Type CloseDoc { get; } = null!;
		public static Type LogOut { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StudioDataModelType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Edit { get; } = null!;
		public static Type PlayClient { get; } = null!;
		public static Type PlayServer { get; } = null!;
		public static Type Standalone { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StudioPlaceUpdateFailureReason
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Other { get; } = null!;
		public static Type TeamCreateConflict { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StudioScriptEditorColorCategories
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Operator { get; } = null!;
		public static Type Number { get; } = null!;
		public static Type String { get; } = null!;
		public static Type Comment { get; } = null!;
		public static Type Keyword { get; } = null!;
		public static Type Builtin { get; } = null!;
		public static Type Method { get; } = null!;
		public static Type Property { get; } = null!;
		public static Type Nil { get; } = null!;
		public static Type Bool { get; } = null!;
		public static Type Function { get; } = null!;
		public static Type Local { get; } = null!;
		public static Type Self { get; } = null!;
		public static Type LuauKeyword { get; } = null!;
		public static Type FunctionName { get; } = null!;
		public static Type TODO { get; } = null!;
		public static Type Background { get; } = null!;
		public static Type SelectionText { get; } = null!;
		public static Type SelectionBackground { get; } = null!;
		public static Type FindSelectionBackground { get; } = null!;
		public static Type MatchingWordBackground { get; } = null!;
		public static Type Warning { get; } = null!;
		public static Type Error { get; } = null!;
		public static Type Info { get; } = null!;
		public static Type Hint { get; } = null!;
		public static Type Whitespace { get; } = null!;
		public static Type ActiveLine { get; } = null!;
		public static Type DebuggerCurrentLine { get; } = null!;
		public static Type DebuggerErrorLine { get; } = null!;
		public static Type Ruler { get; } = null!;
		public static Type Bracket { get; } = null!;
		public static Type MenuPrimaryText { get; } = null!;
		public static Type MenuSecondaryText { get; } = null!;
		public static Type MenuSelectedText { get; } = null!;
		public static Type MenuBackground { get; } = null!;
		public static Type MenuSelectedBackground { get; } = null!;
		public static Type MenuScrollbarBackground { get; } = null!;
		public static Type MenuScrollbarHandle { get; } = null!;
		public static Type MenuBorder { get; } = null!;
		public static Type DocViewCodeBackground { get; } = null!;
		public static Type AICOOverlayText { get; } = null!;
		public static Type AICOOverlayButtonBackground { get; } = null!;
		public static Type AICOOverlayButtonBackgroundHover { get; } = null!;
		public static Type AICOOverlayButtonBackgroundPressed { get; } = null!;
		public static Type IndentationRuler { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StudioScriptEditorColorPresets
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type RobloxDefault { get; } = null!;
		public static Type Extra1 { get; } = null!;
		public static Type Extra2 { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StudioStyleGuideColor
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type MainBackground { get; } = null!;
		public static Type Titlebar { get; } = null!;
		public static Type Dropdown { get; } = null!;
		public static Type Tooltip { get; } = null!;
		public static Type Notification { get; } = null!;
		public static Type ScrollBar { get; } = null!;
		public static Type ScrollBarBackground { get; } = null!;
		public static Type TabBar { get; } = null!;
		public static Type Tab { get; } = null!;
		public static Type FilterButtonDefault { get; } = null!;
		public static Type FilterButtonHover { get; } = null!;
		public static Type FilterButtonChecked { get; } = null!;
		public static Type FilterButtonAccent { get; } = null!;
		public static Type FilterButtonBorder { get; } = null!;
		public static Type FilterButtonBorderAlt { get; } = null!;
		public static Type RibbonTab { get; } = null!;
		public static Type RibbonTabTopBar { get; } = null!;
		public static Type Button { get; } = null!;
		public static Type MainButton { get; } = null!;
		public static Type RibbonButton { get; } = null!;
		public static Type ViewPortBackground { get; } = null!;
		public static Type InputFieldBackground { get; } = null!;
		public static Type Item { get; } = null!;
		public static Type TableItem { get; } = null!;
		public static Type CategoryItem { get; } = null!;
		public static Type GameSettingsTableItem { get; } = null!;
		public static Type GameSettingsTooltip { get; } = null!;
		public static Type EmulatorBar { get; } = null!;
		public static Type EmulatorDropDown { get; } = null!;
		public static Type ColorPickerFrame { get; } = null!;
		public static Type CurrentMarker { get; } = null!;
		public static Type Border { get; } = null!;
		public static Type DropShadow { get; } = null!;
		public static Type Shadow { get; } = null!;
		public static Type Light { get; } = null!;
		public static Type Dark { get; } = null!;
		public static Type Mid { get; } = null!;
		public static Type MainText { get; } = null!;
		public static Type SubText { get; } = null!;
		public static Type TitlebarText { get; } = null!;
		public static Type BrightText { get; } = null!;
		public static Type DimmedText { get; } = null!;
		public static Type LinkText { get; } = null!;
		public static Type WarningText { get; } = null!;
		public static Type ErrorText { get; } = null!;
		public static Type InfoText { get; } = null!;
		public static Type SensitiveText { get; } = null!;
		public static Type ScriptSideWidget { get; } = null!;
		public static Type ScriptBackground { get; } = null!;
		public static Type ScriptText { get; } = null!;
		public static Type ScriptSelectionText { get; } = null!;
		public static Type ScriptSelectionBackground { get; } = null!;
		public static Type ScriptFindSelectionBackground { get; } = null!;
		public static Type ScriptMatchingWordSelectionBackground { get; } = null!;
		public static Type ScriptOperator { get; } = null!;
		public static Type ScriptNumber { get; } = null!;
		public static Type ScriptString { get; } = null!;
		public static Type ScriptComment { get; } = null!;
		public static Type ScriptKeyword { get; } = null!;
		public static Type ScriptBuiltInFunction { get; } = null!;
		public static Type ScriptWarning { get; } = null!;
		public static Type ScriptError { get; } = null!;
		public static Type ScriptInformation { get; } = null!;
		public static Type ScriptHint { get; } = null!;
		public static Type ScriptWhitespace { get; } = null!;
		public static Type ScriptRuler { get; } = null!;
		public static Type DocViewCodeBackground { get; } = null!;
		public static Type DebuggerCurrentLine { get; } = null!;
		public static Type DebuggerErrorLine { get; } = null!;
		public static Type DiffFilePathText { get; } = null!;
		public static Type DiffTextHunkInfo { get; } = null!;
		public static Type DiffTextNoChange { get; } = null!;
		public static Type DiffTextAddition { get; } = null!;
		public static Type DiffTextDeletion { get; } = null!;
		public static Type DiffTextSeparatorBackground { get; } = null!;
		public static Type DiffTextNoChangeBackground { get; } = null!;
		public static Type DiffTextAdditionBackground { get; } = null!;
		public static Type DiffTextDeletionBackground { get; } = null!;
		public static Type DiffLineNum { get; } = null!;
		public static Type DiffLineNumSeparatorBackground { get; } = null!;
		public static Type DiffLineNumNoChangeBackground { get; } = null!;
		public static Type DiffLineNumAdditionBackground { get; } = null!;
		public static Type DiffLineNumDeletionBackground { get; } = null!;
		public static Type DiffFilePathBackground { get; } = null!;
		public static Type DiffFilePathBorder { get; } = null!;
		public static Type ChatIncomingBgColor { get; } = null!;
		public static Type ChatIncomingTextColor { get; } = null!;
		public static Type ChatOutgoingBgColor { get; } = null!;
		public static Type ChatOutgoingTextColor { get; } = null!;
		public static Type ChatModeratedMessageColor { get; } = null!;
		public static Type Separator { get; } = null!;
		public static Type ButtonBorder { get; } = null!;
		public static Type ButtonText { get; } = null!;
		public static Type InputFieldBorder { get; } = null!;
		public static Type CheckedFieldBackground { get; } = null!;
		public static Type CheckedFieldBorder { get; } = null!;
		public static Type CheckedFieldIndicator { get; } = null!;
		public static Type HeaderSection { get; } = null!;
		public static Type Midlight { get; } = null!;
		public static Type StatusBar { get; } = null!;
		public static Type DialogButton { get; } = null!;
		public static Type DialogButtonText { get; } = null!;
		public static Type DialogButtonBorder { get; } = null!;
		public static Type DialogMainButton { get; } = null!;
		public static Type DialogMainButtonText { get; } = null!;
		public static Type InfoBarWarningBackground { get; } = null!;
		public static Type InfoBarWarningText { get; } = null!;
		public static Type ScriptEditorCurrentLine { get; } = null!;
		public static Type ScriptMethod { get; } = null!;
		public static Type ScriptProperty { get; } = null!;
		public static Type ScriptNil { get; } = null!;
		public static Type ScriptBool { get; } = null!;
		public static Type ScriptFunction { get; } = null!;
		public static Type ScriptLocal { get; } = null!;
		public static Type ScriptSelf { get; } = null!;
		public static Type ScriptLuauKeyword { get; } = null!;
		public static Type ScriptFunctionName { get; } = null!;
		public static Type ScriptTodo { get; } = null!;
		public static Type ScriptBracket { get; } = null!;
		public static Type AttributeCog { get; } = null!;
		public static Type AICOOverlayText { get; } = null!;
		public static Type AICOOverlayButtonBackground { get; } = null!;
		public static Type AICOOverlayButtonBackgroundHover { get; } = null!;
		public static Type AICOOverlayButtonBackgroundPressed { get; } = null!;
		public static Type OnboardingCover { get; } = null!;
		public static Type OnboardingHighlight { get; } = null!;
		public static Type OnboardingShadow { get; } = null!;
		public static Type BreakpointMarker { get; } = null!;
		public static Type DiffLineNumHover { get; } = null!;
		public static Type DiffLineNumSeparatorBackgroundHover { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class StudioStyleGuideModifier
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Selected { get; } = null!;
		public static Type Pressed { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Hover { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Style
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type AlternatingSupports { get; } = null!;
		public static Type BridgeStyleSupports { get; } = null!;
		public static Type NoSupports { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SubscriptionExpirationReason
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type ProductInactive { get; } = null!;
		public static Type ProductDeleted { get; } = null!;
		public static Type SubscriberCancelled { get; } = null!;
		public static Type SubscriberRefunded { get; } = null!;
		public static Type Lapsed { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SubscriptionPaymentStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Paid { get; } = null!;
		public static Type Refunded { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SubscriptionPeriod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Month { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SubscriptionState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NeverSubscribed { get; } = null!;
		public static Type SubscribedWillRenew { get; } = null!;
		public static Type SubscribedWillNotRenew { get; } = null!;
		public static Type SubscribedRenewalPaymentPending { get; } = null!;
		public static Type Expired { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SurfaceConstraint
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Hinge { get; } = null!;
		public static Type SteppingMotor { get; } = null!;
		public static Type Motor { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SurfaceGuiShape
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Flat { get; } = null!;
		public static Type CurvedHorizontally { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SurfaceGuiSizingMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type FixedSize { get; } = null!;
		public static Type PixelsPerStud { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SurfaceType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Smooth { get; } = null!;
		public static Type Glue { get; } = null!;
		public static Type Weld { get; } = null!;
		public static Type Studs { get; } = null!;
		public static Type Inlet { get; } = null!;
		public static Type Universal { get; } = null!;
		public static Type Hinge { get; } = null!;
		public static Type Motor { get; } = null!;
		public static Type SteppingMotor { get; } = null!;
		public static Type SmoothNoOutlines { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class SwipeDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Right { get; } = null!;
		public static Type Left { get; } = null!;
		public static Type Up { get; } = null!;
		public static Type Down { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TableMajorAxis
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type RowMajor { get; } = null!;
		public static Type ColumnMajor { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class Technology
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Voxel { get; } = null!;
		public static Type Compatibility { get; } = null!;
		public static Type ShadowMap { get; } = null!;
		public static Type Future { get; } = null!;
		public static Type Legacy { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TeleportMethod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type TeleportToSpawnByName { get; } = null!;
		public static Type TeleportToPlaceInstance { get; } = null!;
		public static Type TeleportToPrivateServer { get; } = null!;
		public static Type TeleportPartyAsync { get; } = null!;
		public static Type TeleportToVIPServer { get; } = null!;
		public static Type TeleportToInstanceBack { get; } = null!;
		public static Type TeleportUnknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TeleportResult
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Success { get; } = null!;
		public static Type Failure { get; } = null!;
		public static Type GameNotFound { get; } = null!;
		public static Type GameEnded { get; } = null!;
		public static Type GameFull { get; } = null!;
		public static Type Unauthorized { get; } = null!;
		public static Type Flooded { get; } = null!;
		public static Type IsTeleporting { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TeleportState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type RequestedFromServer { get; } = null!;
		public static Type Started { get; } = null!;
		public static Type WaitingForServer { get; } = null!;
		public static Type Failed { get; } = null!;
		public static Type InProgress { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TeleportType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type ToPlace { get; } = null!;
		public static Type ToInstance { get; } = null!;
		public static Type ToReservedServer { get; } = null!;
		public static Type ToVIPServer { get; } = null!;
		public static Type ToInstanceBack { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TerrainAcquisitionMethod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Legacy { get; } = null!;
		public static Type Template { get; } = null!;
		public static Type Generate { get; } = null!;
		public static Type Import { get; } = null!;
		public static Type Convert { get; } = null!;
		public static Type EditAddTool { get; } = null!;
		public static Type EditSeaLevelTool { get; } = null!;
		public static Type EditReplaceTool { get; } = null!;
		public static Type RegionFillTool { get; } = null!;
		public static Type RegionPasteTool { get; } = null!;
		public static Type Other { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TerrainFace
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Top { get; } = null!;
		public static Type Side { get; } = null!;
		public static Type Bottom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextChatMessageStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Unknown { get; } = null!;
		public static Type Success { get; } = null!;
		public static Type Sending { get; } = null!;
		public static Type TextFilterFailed { get; } = null!;
		public static Type Floodchecked { get; } = null!;
		public static Type InvalidPrivacySettings { get; } = null!;
		public static Type InvalidTextChannelPermissions { get; } = null!;
		public static Type MessageTooLong { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Auto { get; } = null!;
		public static Type LeftToRight { get; } = null!;
		public static Type RightToLeft { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextFilterContext
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type PublicChat { get; } = null!;
		public static Type PrivateChat { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextInputType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type NoSuggestions { get; } = null!;
		public static Type Number { get; } = null!;
		public static Type Email { get; } = null!;
		public static Type Phone { get; } = null!;
		public static Type Password { get; } = null!;
		public static Type PasswordShown { get; } = null!;
		public static Type Username { get; } = null!;
		public static Type OneTimePassword { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextTruncate
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type AtEnd { get; } = null!;
		public static Type SplitWord { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextXAlignment
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Left { get; } = null!;
		public static Type Right { get; } = null!;
		public static Type Center { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextYAlignment
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Top { get; } = null!;
		public static Type Center { get; } = null!;
		public static Type Bottom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextureMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Stretch { get; } = null!;
		public static Type Wrap { get; } = null!;
		public static Type Static { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TextureQueryType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NonHumanoid { get; } = null!;
		public static Type NonHumanoidOrphaned { get; } = null!;
		public static Type Humanoid { get; } = null!;
		public static Type HumanoidOrphaned { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ThreadPoolConfig
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type PerCore4 { get; } = null!;
		public static Type PerCore3 { get; } = null!;
		public static Type PerCore2 { get; } = null!;
		public static Type PerCore1 { get; } = null!;
		public static Type Auto { get; } = null!;
		public static Type Threads1 { get; } = null!;
		public static Type Threads2 { get; } = null!;
		public static Type Threads3 { get; } = null!;
		public static Type Threads4 { get; } = null!;
		public static Type Threads8 { get; } = null!;
		public static Type Threads16 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ThrottlingPriority
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Extreme { get; } = null!;
		public static Type ElevatedOnServer { get; } = null!;
		public static Type Default { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ThumbnailSize
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Size48x48 { get; } = null!;
		public static Type Size180x180 { get; } = null!;
		public static Type Size420x420 { get; } = null!;
		public static Type Size60x60 { get; } = null!;
		public static Type Size100x100 { get; } = null!;
		public static Type Size150x150 { get; } = null!;
		public static Type Size352x352 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ThumbnailType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type HeadShot { get; } = null!;
		public static Type AvatarBust { get; } = null!;
		public static Type AvatarThumbnail { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TickCountSampleMethod
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Fast { get; } = null!;
		public static Type Benchmark { get; } = null!;
		public static Type Precise { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TonemapperPreset
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Retro { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TopBottom
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Top { get; } = null!;
		public static Type Center { get; } = null!;
		public static Type Bottom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TouchCameraMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Classic { get; } = null!;
		public static Type Follow { get; } = null!;
		public static Type Orbital { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TouchMovementMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Thumbstick { get; } = null!;
		public static Type DPad { get; } = null!;
		public static Type Thumbpad { get; } = null!;
		public static Type ClickToMove { get; } = null!;
		public static Type DynamicThumbstick { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerError
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Ok { get; } = null!;
		public static Type NoService { get; } = null!;
		public static Type InitFailed { get; } = null!;
		public static Type NoVideo { get; } = null!;
		public static Type VideoError { get; } = null!;
		public static Type VideoNoPermission { get; } = null!;
		public static Type VideoUnsupported { get; } = null!;
		public static Type NoAudio { get; } = null!;
		public static Type AudioError { get; } = null!;
		public static Type AudioNoPermission { get; } = null!;
		public static Type UnsupportedDevice { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerExtrapolationFlagMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Auto { get; } = null!;
		public static Type ForceDisabled { get; } = null!;
		public static Type ExtrapolateFacsAndPose { get; } = null!;
		public static Type ExtrapolateFacsOnly { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerFaceTrackingStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type FaceTrackingSuccess { get; } = null!;
		public static Type FaceTrackingNoFaceFound { get; } = null!;
		public static Type FaceTrackingUnknown { get; } = null!;
		public static Type FaceTrackingLost { get; } = null!;
		public static Type FaceTrackingHasTrackingError { get; } = null!;
		public static Type FaceTrackingIsOccluded { get; } = null!;
		public static Type FaceTrackingUninitialized { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerLodFlagMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Auto { get; } = null!;
		public static Type ForceFalse { get; } = null!;
		public static Type ForceTrue { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerLodValueMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Auto { get; } = null!;
		public static Type Force0 { get; } = null!;
		public static Type Force1 { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Audio { get; } = null!;
		public static Type Video { get; } = null!;
		public static Type AudioVideo { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerPromptEvent
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type LODCameraRecommendDisable { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TrackerType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Face { get; } = null!;
		public static Type UpperBody { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TriStateBoolean
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type False { get; } = null!;
		public static Type True { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class TweenStatus
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Canceled { get; } = null!;
		public static Type Completed { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UIDragDetectorBoundingBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Automatic { get; } = null!;
		public static Type EntireObject { get; } = null!;
		public static Type HitPoint { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UIDragDetectorDragRelativity
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Absolute { get; } = null!;
		public static Type Relative { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UIDragDetectorDragSpace
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Parent { get; } = null!;
		public static Type LayerCollector { get; } = null!;
		public static Type Reference { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UIDragDetectorDragStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type TranslatePlane { get; } = null!;
		public static Type TranslateLine { get; } = null!;
		public static Type Rotate { get; } = null!;
		public static Type Scriptable { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UIDragDetectorResponseStyle
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Offset { get; } = null!;
		public static Type Scale { get; } = null!;
		public static Type CustomOffset { get; } = null!;
		public static Type CustomScale { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UIFlexAlignment
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Fill { get; } = null!;
		public static Type SpaceAround { get; } = null!;
		public static Type SpaceBetween { get; } = null!;
		public static Type SpaceEvenly { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UIFlexMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Grow { get; } = null!;
		public static Type Shrink { get; } = null!;
		public static Type Fill { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UITheme
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Light { get; } = null!;
		public static Type Dark { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UiMessageType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type UiMessageError { get; } = null!;
		public static Type UiMessageInfo { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UsageContext
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Preview { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UserCFrame
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Head { get; } = null!;
		public static Type LeftHand { get; } = null!;
		public static Type RightHand { get; } = null!;
		public static Type Floor { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UserInputState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Begin { get; } = null!;
		public static Type Change { get; } = null!;
		public static Type End { get; } = null!;
		public static Type Cancel { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class UserInputType
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type MouseButton1 { get; } = null!;
		public static Type MouseButton2 { get; } = null!;
		public static Type MouseButton3 { get; } = null!;
		public static Type MouseWheel { get; } = null!;
		public static Type MouseMovement { get; } = null!;
		public static Type Touch { get; } = null!;
		public static Type Keyboard { get; } = null!;
		public static Type Focus { get; } = null!;
		public static Type Accelerometer { get; } = null!;
		public static Type Gyro { get; } = null!;
		public static Type Gamepad1 { get; } = null!;
		public static Type Gamepad2 { get; } = null!;
		public static Type Gamepad3 { get; } = null!;
		public static Type Gamepad4 { get; } = null!;
		public static Type Gamepad5 { get; } = null!;
		public static Type Gamepad6 { get; } = null!;
		public static Type Gamepad7 { get; } = null!;
		public static Type Gamepad8 { get; } = null!;
		public static Type TextInput { get; } = null!;
		public static Type InputMethod { get; } = null!;
		public static Type None { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VRComfortSetting
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Comfort { get; } = null!;
		public static Type Normal { get; } = null!;
		public static Type Expert { get; } = null!;
		public static Type Custom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VRSafetyBubbleMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NoOne { get; } = null!;
		public static Type OnlyFriends { get; } = null!;
		public static Type Anyone { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VRScaling
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type World { get; } = null!;
		public static Type Off { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VRSessionState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Undefined { get; } = null!;
		public static Type Idle { get; } = null!;
		public static Type Visible { get; } = null!;
		public static Type Focused { get; } = null!;
		public static Type Stopping { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VRTouchpad
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Left { get; } = null!;
		public static Type Right { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VRTouchpadMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Touch { get; } = null!;
		public static Type VirtualThumbstick { get; } = null!;
		public static Type ABXY { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VelocityConstraintMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Line { get; } = null!;
		public static Type Plane { get; } = null!;
		public static Type Vector { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VerticalAlignment
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Center { get; } = null!;
		public static Type Top { get; } = null!;
		public static Type Bottom { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VerticalScrollBarPosition
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Right { get; } = null!;
		public static Type Left { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VibrationMotor
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Large { get; } = null!;
		public static Type Small { get; } = null!;
		public static Type LeftTrigger { get; } = null!;
		public static Type RightTrigger { get; } = null!;
		public static Type LeftHand { get; } = null!;
		public static Type RightHand { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VideoDeviceCaptureQuality
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Low { get; } = null!;
		public static Type Medium { get; } = null!;
		public static Type High { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VideoError
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Ok { get; } = null!;
		public static Type Eof { get; } = null!;
		public static Type EAgain { get; } = null!;
		public static Type BadParameter { get; } = null!;
		public static Type AllocFailed { get; } = null!;
		public static Type CodecInitFailed { get; } = null!;
		public static Type CodecCloseFailed { get; } = null!;
		public static Type DecodeFailed { get; } = null!;
		public static Type ParsingFailed { get; } = null!;
		public static Type Unsupported { get; } = null!;
		public static Type Generic { get; } = null!;
		public static Type DownloadFailed { get; } = null!;
		public static Type StreamNotFound { get; } = null!;
		public static Type EncodeFailed { get; } = null!;
		public static Type CreateFailed { get; } = null!;
		public static Type NoPermission { get; } = null!;
		public static Type NoService { get; } = null!;
		public static Type ReleaseFailed { get; } = null!;
		public static Type Unknown { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ViewMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type GeometryComplexity { get; } = null!;
		public static Type Transparent { get; } = null!;
		public static Type Decal { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VirtualCursorMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Default { get; } = null!;
		public static Type Disabled { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VirtualInputMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Recording { get; } = null!;
		public static Type Playing { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VoiceChatState
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Idle { get; } = null!;
		public static Type Joining { get; } = null!;
		public static Type JoiningRetry { get; } = null!;
		public static Type Joined { get; } = null!;
		public static Type Leaving { get; } = null!;
		public static Type Ended { get; } = null!;
		public static Type Failed { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VoiceControlPath
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Publish { get; } = null!;
		public static Type Subscribe { get; } = null!;
		public static Type Join { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class VolumetricAudio
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Disabled { get; } = null!;
		public static Type Automatic { get; } = null!;
		public static Type Enabled { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class WaterDirection
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type NegX { get; } = null!;
		public static Type X { get; } = null!;
		public static Type NegY { get; } = null!;
		public static Type Y { get; } = null!;
		public static Type NegZ { get; } = null!;
		public static Type Z { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class WaterForce
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type Small { get; } = null!;
		public static Type Medium { get; } = null!;
		public static Type Strong { get; } = null!;
		public static Type Max { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class WeldConstraintPreserve
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type All { get; } = null!;
		public static Type None { get; } = null!;
		public static Type Touching { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class WrapLayerAutoSkin
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Disabled { get; } = null!;
		public static Type EnabledPreserve { get; } = null!;
		public static Type EnabledOverride { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class WrapLayerDebugMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type BoundCage { get; } = null!;
		public static Type LayerCage { get; } = null!;
		public static Type BoundCageAndLinks { get; } = null!;
		public static Type Reference { get; } = null!;
		public static Type Rbf { get; } = null!;
		public static Type OuterCage { get; } = null!;
		public static Type ReferenceMeshAfterMorph { get; } = null!;
		public static Type HSROuterDetail { get; } = null!;
		public static Type HSROuter { get; } = null!;
		public static Type HSRInner { get; } = null!;
		public static Type HSRInnerReverse { get; } = null!;
		public static Type LayerCageFittedToBase { get; } = null!;
		public static Type LayerCageFittedToPrev { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class WrapTargetDebugMode
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type None { get; } = null!;
		public static Type TargetCageOriginal { get; } = null!;
		public static Type TargetCageCompressed { get; } = null!;
		public static Type TargetCageInterface { get; } = null!;
		public static Type TargetLayerCageOriginal { get; } = null!;
		public static Type TargetLayerCageCompressed { get; } = null!;
		public static Type TargetLayerInterface { get; } = null!;
		public static Type Rbf { get; } = null!;
		public static Type OuterCageDetail { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
	
	public static class ZIndexBehavior
	{
		public interface Type : EnumItem
		{
		}
		
		public static Type Global { get; } = null!;
		public static Type Sibling { get; } = null!;
		
		/// <summary>Returns an array of all <see cref="EnumItem"/> options available for this enum.</summary>
		public static EnumItem[] GetEnumItems()
		{
			return null!;
		}
	}
}
