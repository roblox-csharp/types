// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!

namespace Roblox
{
	public static class Services
	{
		public static AccountService AccountService { get; } = null!;
		public static AchievementService AchievementService { get; } = null!;
		public static AnalyticsService AnalyticsService { get; } = null!;
		public static AnimationClipProvider AnimationClipProvider { get; } = null!;
		public static AnimationFromVideoCreatorService AnimationFromVideoCreatorService { get; } = null!;
		public static AnimationFromVideoCreatorStudioService AnimationFromVideoCreatorStudioService { get; } = null!;
		public static AnnotationsService AnnotationsService { get; } = null!;
		public static AppLifecycleObserverService AppLifecycleObserverService { get; } = null!;
		public static AppUpdateService AppUpdateService { get; } = null!;
		public static AssetCounterService AssetCounterService { get; } = null!;
		public static AssetDeliveryProxy AssetDeliveryProxy { get; } = null!;
		public static AssetImportService AssetImportService { get; } = null!;
		public static AssetManagerService AssetManagerService { get; } = null!;
		public static AssetService AssetService { get; } = null!;
		public static AudioFocusService AudioFocusService { get; } = null!;
		public static AvatarChatService AvatarChatService { get; } = null!;
		public static AvatarCreationService AvatarCreationService { get; } = null!;
		public static AvatarEditorService AvatarEditorService { get; } = null!;
		public static AvatarImportService AvatarImportService { get; } = null!;
		public static BadgeService BadgeService { get; } = null!;
		public static StarterGui StarterGui { get; } = null!;
		public static BulkImportService BulkImportService { get; } = null!;
		public static HSRDataContentProvider HSRDataContentProvider { get; } = null!;
		public static MeshContentProvider MeshContentProvider { get; } = null!;
		public static SolidModelContentProvider SolidModelContentProvider { get; } = null!;
		public static CalloutService CalloutService { get; } = null!;
		public static CaptureService CaptureService { get; } = null!;
		public static Chat Chat { get; } = null!;
		public static ChatbotUIService ChatbotUIService { get; } = null!;
		public static CollaboratorsService CollaboratorsService { get; } = null!;
		public static CollectionService CollectionService { get; } = null!;
		public static CommandService CommandService { get; } = null!;
		public static CommerceService CommerceService { get; } = null!;
		public static ConfigureServerService ConfigureServerService { get; } = null!;
		public static ConnectivityService ConnectivityService { get; } = null!;
		public static ContentProvider ContentProvider { get; } = null!;
		public static ContextActionService ContextActionService { get; } = null!;
		public static ControllerService ControllerService { get; } = null!;
		public static ConversationalAIAcceptanceService ConversationalAIAcceptanceService { get; } = null!;
		public static CoreScriptDebuggingManagerHelper CoreScriptDebuggingManagerHelper { get; } = null!;
		public static CreationDBService CreationDBService { get; } = null!;
		public static CrossDMScriptChangeListener CrossDMScriptChangeListener { get; } = null!;
		public static DataModelPatchService DataModelPatchService { get; } = null!;
		public static DataStoreService DataStoreService { get; } = null!;
		public static Debris Debris { get; } = null!;
		public static DebuggablePluginWatcher DebuggablePluginWatcher { get; } = null!;
		public static DebuggerConnectionManager DebuggerConnectionManager { get; } = null!;
		public static DebuggerUIService DebuggerUIService { get; } = null!;
		public static DeviceIdService DeviceIdService { get; } = null!;
		public static DraggerService DraggerService { get; } = null!;
		public static EngineAPICloudProcessingService EngineAPICloudProcessingService { get; } = null!;
		public static EventIngestService EventIngestService { get; } = null!;
		public static ExampleService ExampleService { get; } = null!;
		public static ExperienceAuthService ExperienceAuthService { get; } = null!;
		public static ExperienceNotificationService ExperienceNotificationService { get; } = null!;
		public static ExperienceService ExperienceService { get; } = null!;
		public static ExperienceStateCaptureService ExperienceStateCaptureService { get; } = null!;
		public static FaceAnimatorService FaceAnimatorService { get; } = null!;
		public static FacialAnimationRecordingService FacialAnimationRecordingService { get; } = null!;
		public static FacialAnimationStreamingServiceV2 FacialAnimationStreamingServiceV2 { get; } = null!;
		public static CSGDictionaryService CSGDictionaryService { get; } = null!;
		public static NonReplicatedCSGDictionaryService NonReplicatedCSGDictionaryService { get; } = null!;
		public static GamePassService GamePassService { get; } = null!;
		public static GamepadService GamepadService { get; } = null!;
		public static GenericChallengeService GenericChallengeService { get; } = null!;
		public static GeometryService GeometryService { get; } = null!;
		public static GroupService GroupService { get; } = null!;
		public static GuiService GuiService { get; } = null!;
		public static HapticService HapticService { get; } = null!;
		public static HeatmapService HeatmapService { get; } = null!;
		public static HeightmapImporterService HeightmapImporterService { get; } = null!;
		public static HttpService HttpService { get; } = null!;
		public static ILegacyStudioBridge ILegacyStudioBridge { get; } = null!;
		public static LegacyStudioBridge LegacyStudioBridge { get; } = null!;
		public static IXPService IXPService { get; } = null!;
		public static IncrementalPatchBuilder IncrementalPatchBuilder { get; } = null!;
		public static InsertService InsertService { get; } = null!;
		public static InternalSyncService InternalSyncService { get; } = null!;
		public static JointsService JointsService { get; } = null!;
		public static KeyframeSequenceProvider KeyframeSequenceProvider { get; } = null!;
		public static LSPFileSyncService LSPFileSyncService { get; } = null!;
		public static LanguageService LanguageService { get; } = null!;
		public static Lighting Lighting { get; } = null!;
		public static LinkingService LinkingService { get; } = null!;
		public static LiveScriptingService LiveScriptingService { get; } = null!;
		public static AppStorageService AppStorageService { get; } = null!;
		public static UserStorageService UserStorageService { get; } = null!;
		public static LocalizationService LocalizationService { get; } = null!;
		public static LodDataService LodDataService { get; } = null!;
		public static LogReporterService LogReporterService { get; } = null!;
		public static LogService LogService { get; } = null!;
		public static LuauScriptAnalyzerService LuauScriptAnalyzerService { get; } = null!;
		public static MarketplaceService MarketplaceService { get; } = null!;
		public static MaterialGenerationService MaterialGenerationService { get; } = null!;
		public static MaterialService MaterialService { get; } = null!;
		public static MemoryStoreService MemoryStoreService { get; } = null!;
		public static MessageBusService MessageBusService { get; } = null!;
		public static MessagingService MessagingService { get; } = null!;
		public static MetaBreakpointManager MetaBreakpointManager { get; } = null!;
		public static NetworkClient NetworkClient { get; } = null!;
		public static NetworkServer NetworkServer { get; } = null!;
		public static OmniRecommendationsService OmniRecommendationsService { get; } = null!;
		public static OpenCloudService OpenCloudService { get; } = null!;
		public static Workspace Workspace { get; } = null!;
		public static PackageUIService PackageUIService { get; } = null!;
		public static PatchBundlerFileWatch PatchBundlerFileWatch { get; } = null!;
		public static PathfindingService PathfindingService { get; } = null!;
		public static PhysicsService PhysicsService { get; } = null!;
		public static PlaceStatsService PlaceStatsService { get; } = null!;
		public static PlacesService PlacesService { get; } = null!;
		public static PlatformCloudStorageService PlatformCloudStorageService { get; } = null!;
		public static PlatformFriendsService PlatformFriendsService { get; } = null!;
		public static PlayerHydrationService PlayerHydrationService { get; } = null!;
		public static PlayerViewService PlayerViewService { get; } = null!;
		public static Players Players { get; } = null!;
		public static PluginManagementService PluginManagementService { get; } = null!;
		public static PluginPolicyService PluginPolicyService { get; } = null!;
		public static PolicyService PolicyService { get; } = null!;
		public static ProcessInstancePhysicsService ProcessInstancePhysicsService { get; } = null!;
		public static ProjectFolderService ProjectFolderService { get; } = null!;
		public static ProximityPromptService ProximityPromptService { get; } = null!;
		public static PublishService PublishService { get; } = null!;
		public static ReflectionService ReflectionService { get; } = null!;
		public static RemoteCursorService RemoteCursorService { get; } = null!;
		public static RemoteDebuggerServer RemoteDebuggerServer { get; } = null!;
		public static ReplicatedFirst ReplicatedFirst { get; } = null!;
		public static ReplicatedStorage ReplicatedStorage { get; } = null!;
		public static RibbonNotificationService RibbonNotificationService { get; } = null!;
		public static RobloxServerStorage RobloxServerStorage { get; } = null!;
		public static RomarkService RomarkService { get; } = null!;
		public static RtMessagingService RtMessagingService { get; } = null!;
		public static RunService RunService { get; } = null!;
		public static SafetyService SafetyService { get; } = null!;
		public static ScriptChangeService ScriptChangeService { get; } = null!;
		public static ScriptCloneWatcher ScriptCloneWatcher { get; } = null!;
		public static ScriptCloneWatcherHelper ScriptCloneWatcherHelper { get; } = null!;
		public static ScriptCommitService ScriptCommitService { get; } = null!;
		public static ScriptContext ScriptContext { get; } = null!;
		public static ScriptEditorService ScriptEditorService { get; } = null!;
		public static ScriptProfilerService ScriptProfilerService { get; } = null!;
		public static ScriptRegistrationService ScriptRegistrationService { get; } = null!;
		public static SelectionHighlightManager SelectionHighlightManager { get; } = null!;
		public static ServerScriptService ServerScriptService { get; } = null!;
		public static ServerStorage ServerStorage { get; } = null!;
		public static ServiceVisibilityService ServiceVisibilityService { get; } = null!;
		public static SessionService SessionService { get; } = null!;
		public static SharedTableRegistry SharedTableRegistry { get; } = null!;
		public static ShorelineUpgraderService ShorelineUpgraderService { get; } = null!;
		public static SmoothVoxelsUpgraderService SmoothVoxelsUpgraderService { get; } = null!;
		public static SnippetService SnippetService { get; } = null!;
		public static SocialService SocialService { get; } = null!;
		public static SoundService SoundService { get; } = null!;
		public static StarterPack StarterPack { get; } = null!;
		public static StarterPlayer StarterPlayer { get; } = null!;
		public static StartupMessageService StartupMessageService { get; } = null!;
		public static Stats Stats { get; } = null!;
		public static StreamingService StreamingService { get; } = null!;
		public static StudioAssetService StudioAssetService { get; } = null!;
		public static StudioDeviceEmulatorService StudioDeviceEmulatorService { get; } = null!;
		public static StudioPublishService StudioPublishService { get; } = null!;
		public static StudioScriptDebugEventListener StudioScriptDebugEventListener { get; } = null!;
		public static StudioSdkService StudioSdkService { get; } = null!;
		public static StudioWidgetsService StudioWidgetsService { get; } = null!;
		public static StylingService StylingService { get; } = null!;
		public static TeamCreateData TeamCreateData { get; } = null!;
		public static TeamCreatePublishService TeamCreatePublishService { get; } = null!;
		public static TeamCreateService TeamCreateService { get; } = null!;
		public static Teams Teams { get; } = null!;
		public static TeleportService TeleportService { get; } = null!;
		public static TemporaryCageMeshProvider TemporaryCageMeshProvider { get; } = null!;
		public static TemporaryScriptService TemporaryScriptService { get; } = null!;
		public static TextBoxService TextBoxService { get; } = null!;
		public static TextChatService TextChatService { get; } = null!;
		public static TextService TextService { get; } = null!;
		public static TextureGenerationService TextureGenerationService { get; } = null!;
		public static ToastNotificationService ToastNotificationService { get; } = null!;
		public static TracerService TracerService { get; } = null!;
		public static TutorialService TutorialService { get; } = null!;
		public static TweenService TweenService { get; } = null!;
		public static UGCAvatarService UGCAvatarService { get; } = null!;
		public static UIDragDetectorService UIDragDetectorService { get; } = null!;
		public static UnvalidatedAssetService UnvalidatedAssetService { get; } = null!;
		public static UserInputService UserInputService { get; } = null!;
		public static UserService UserService { get; } = null!;
		public static VRService VRService { get; } = null!;
		public static VRStatusService VRStatusService { get; } = null!;
		public static VideoCaptureService VideoCaptureService { get; } = null!;
		public static VideoService VideoService { get; } = null!;
		public static VisibilityCheckDispatcher VisibilityCheckDispatcher { get; } = null!;
		public static VisualizationModeService VisualizationModeService { get; } = null!;
		public static VoiceChatInternal VoiceChatInternal { get; } = null!;
		public static VoiceChatService VoiceChatService { get; } = null!;
	}
	
	// GENERATED ROBLOX INSTANCE CLASSES
	
	public partial interface Instance
	{
		public new Instance Clone();
		public bool Archivable { get; set; }
		public string ClassName { get; }
		public string Name { get; set; }
		public Instance? Parent { get; set; }
		public void AddTag(string tag);
		public void ClearAllChildren();
		public void Destroy();
		public Actor GetActor();
		public ScriptSignal GetAttributeChangedSignal(string attribute);
		public Instance[] GetChildren();
		public string GetFullName();
		public ScriptSignal GetPropertyChangedSignal(string property);
		public bool HasTag(string tag);
		public bool IsPropertyModified(string name);
		public void RemoveTag(string tag);
		public void ResetPropertyToDefault(string name);
		public void SetAttribute(string attribute, object value);
	}
	
	public interface AccessoryDescription : ICreatableInstance
	{
		public new AccessoryDescription Clone();
		public Enum.AccessoryType.Type AccessoryType { get; set; }
		public long AssetId { get; set; }
		public Instance? Instance { get; set; }
		public bool IsLayered { get; set; }
		public int Order { get; set; }
		public Vector3 Position { get; set; }
		public float Puffiness { get; set; }
		public Vector3 Rotation { get; set; }
		public Vector3 Scale { get; set; }
		public Instance GetAppliedInstance();
	}
	
	public interface AccountService : IServiceInstance
	{
		public new AccountService Clone();
	}
	
	public interface Accoutrement : ICreatableInstance
	{
		public new Accoutrement Clone();
		public CFrame AttachmentPoint { get; set; }
	}
	
	public interface Accessory : Accoutrement, ICreatableInstance
	{
		public new Accessory Clone();
		public Enum.AccessoryType.Type AccessoryType { get; set; }
	}
	
	public interface Hat : Accoutrement, ICreatableInstance
	{
		public new Hat Clone();
	}
	
	public interface AchievementService : IServiceInstance
	{
		public new AchievementService Clone();
	}
	
	public interface AdPortal : ICreatableInstance
	{
		public new AdPortal Clone();
		public Enum.AdUnitStatus.Type Status { get; }
	}
	
	public interface AnalyticsService : IServiceInstance
	{
		public new AnalyticsService Clone();
		public void FireCustomEvent(Player player, string eventCategory, object customData);
		public void FireEvent(string category, object value);
		public void FireInGameEconomyEvent(Player player, string itemName, Enum.AnalyticsEconomyAction.Type economyAction, string itemCategory, int amount, string currency, object location, object customData);
		public void FireLogEvent(Player player, Enum.AnalyticsLogLevel.Type logLevel, string message, object debugInfo, object customData);
		public void FirePlayerProgressionEvent(Player player, string category, Enum.AnalyticsProgressionStatus.Type progressionStatus, object location, object statistics, object customData);
		public void LogEconomyEvent(Player player, Enum.AnalyticsEconomyFlowType.Type flowType, string currencyType, float amount, float endingBalance, string transactionType, string itemSku, object? customFields = null);
		public void LogFunnelStepEvent(Player player, string funnelName, string funnelSessionId, int? step = null, string? stepName = null, object? customFields = null);
		public void LogOnboardingFunnelStepEvent(Player player, int step, string stepName, object? customFields = null);
		public void LogProgressionCompleteEvent(Player player, string progressionPathName, int level, string levelName, object? customFields = null);
		public void LogProgressionEvent(Player player, string progressionPathName, Enum.AnalyticsProgressionType.Type status, int level, string levelName, object? customFields = null);
		public void LogProgressionFailEvent(Player player, string progressionPathName, int level, string levelName, object? customFields = null);
		public void LogProgressionStartEvent(Player player, string progressionPathName, int level, string levelName, object? customFields = null);
	}
	
	public interface Animation : ICreatableInstance
	{
		public new Animation Clone();
		public string AnimationId { get; set; }
	}
	
	public interface AnimationClip : Instance
	{
		public new AnimationClip Clone();
		public bool Loop { get; set; }
		public Enum.AnimationPriority.Type Priority { get; set; }
	}
	
	public interface CurveAnimation : AnimationClip, ICreatableInstance
	{
		public new CurveAnimation Clone();
	}
	
	public partial interface KeyframeSequence : AnimationClip, ICreatableInstance
	{
		public new KeyframeSequence Clone();
		public void AddKeyframe(Keyframe keyframe);
		public Instance[] GetKeyframes();
		public void RemoveKeyframe(Keyframe keyframe);
	}
	
	public partial interface AnimationClipProvider : IServiceInstance
	{
		public new AnimationClipProvider Clone();
		public string RegisterActiveAnimationClip(AnimationClip animationClip);
		public string RegisterAnimationClip(AnimationClip animationClip);
		public AnimationClip GetAnimationClipAsync(string assetId);
		public Instance GetAnimations(long userId);
		public ClipEvaluator GetClipEvaluatorAsync(string assetId);
	}
	
	public interface AnimationController : ICreatableInstance
	{
		public new AnimationController Clone();
		public object[] GetPlayingAnimationTracks();
		public AnimationTrack LoadAnimation(Animation animation);
		public ScriptSignal<AnimationTrack> AnimationPlayed { get; }
	}
	
	public interface AnimationFromVideoCreatorService : IServiceInstance
	{
		public new AnimationFromVideoCreatorService Clone();
	}
	
	public interface AnimationFromVideoCreatorStudioService : IServiceInstance
	{
		public new AnimationFromVideoCreatorStudioService Clone();
	}
	
	public interface AnimationRigData : ICreatableInstance
	{
		public new AnimationRigData Clone();
	}
	
	public interface AnimationStreamTrack : Instance
	{
		public new AnimationStreamTrack Clone();
	}
	
	public interface AnimationTrack : Instance
	{
		public new AnimationTrack Clone();
		public Animation? Animation { get; }
		public bool IsPlaying { get; }
		public float Length { get; }
		public bool Looped { get; set; }
		public Enum.AnimationPriority.Type Priority { get; set; }
		public float Speed { get; }
		public float TimePosition { get; set; }
		public float WeightCurrent { get; }
		public float WeightTarget { get; }
		public void AdjustSpeed(float? speed = null);
		public void AdjustWeight(float? weight = null, float? fadeTime = null);
		public ScriptSignal GetMarkerReachedSignal(string name);
		public float GetTimeOfKeyframe(string keyframeName);
		public void Play(float? fadeTime = null, float? weight = null, float? speed = null);
		public void Stop(float? fadeTime = null);
		public ScriptSignal DidLoop { get; }
		public ScriptSignal Ended { get; }
		public ScriptSignal<string> KeyframeReached { get; }
		public ScriptSignal Stopped { get; }
	}
	
	public partial interface Animator : ICreatableInstance
	{
		public new Animator Clone();
		public bool EvaluationThrottled { get; }
		public bool PreferLodEnabled { get; set; }
		public CFrame RootMotion { get; }
		public float RootMotionWeight { get; }
		public void ApplyJointVelocities(object motors);
		public object[] GetPlayingAnimationTracks();
		public AnimationTrack LoadAnimation(Animation animation);
		public void RegisterEvaluationParallelCallback(Action callback);
		public ScriptSignal<AnimationTrack> AnimationPlayed { get; }
	}
	
	public interface Annotation : ICreatableInstance
	{
		public new Annotation Clone();
	}
	
	public interface WorkspaceAnnotation : Annotation, ICreatableInstance
	{
		public new WorkspaceAnnotation Clone();
	}
	
	public interface AnnotationsService : IServiceInstance
	{
		public new AnnotationsService Clone();
	}
	
	public interface AppLifecycleObserverService : IServiceInstance
	{
		public new AppLifecycleObserverService Clone();
	}
	
	public interface AppUpdateService : IServiceInstance
	{
		public new AppUpdateService Clone();
	}
	
	public interface AssetCounterService : IServiceInstance
	{
		public new AssetCounterService Clone();
	}
	
	public interface AssetDeliveryProxy : IServiceInstance
	{
		public new AssetDeliveryProxy Clone();
		public string Interface { get; set; }
		public int Port { get; set; }
		public bool StartServer { get; set; }
	}
	
	public interface AssetImportService : IServiceInstance
	{
		public new AssetImportService Clone();
	}
	
	public interface AssetImportSession : Instance
	{
		public new AssetImportSession Clone();
		public ScriptSignal<object> UploadComplete { get; }
		public ScriptSignal<float> UploadProgress { get; }
	}
	
	public interface AssetManagerService : IServiceInstance
	{
		public new AssetManagerService Clone();
	}
	
	public interface AssetPatchSettings : Instance
	{
		public new AssetPatchSettings Clone();
		public string ContentId { get; set; }
		public string OutputPath { get; set; }
		public string PatchId { get; set; }
	}
	
	public partial interface AssetService : IServiceInstance
	{
		public new AssetService Clone();
		public EditableImage CreateEditableImageAsync(string textureId);
		public EditableMesh CreateEditableMeshAsync(string meshId);
		public EditableMesh CreateEditableMeshFromPartAsync(MeshPart meshPart);
		public long CreatePlaceAsync(string placeName, long templatePlaceID, string description);
		public long CreatePlaceInPlayerInventoryAsync(Player player, string placeName, long templatePlaceID, string description);
		public object[] GetAssetIdsForPackage(long packageAssetId);
		public object[] GetAudioMetadataAsync(object[] idList);
		public object GetBundleDetailsAsync(long bundleId);
		public long GetCreatorAssetID(long creationID);
		public Instance GetGamePlacesAsync();
		public object PromptCreateAssetAsync(Player player, Instance instance, Enum.AssetType.Type assetType);
		public object PromptImportAnimationClipFromVideoAsync(Player player, Action progressCallback);
		public void SavePlaceAsync();
		public AudioPages SearchAudio(AudioSearchParams searchParameters);
	}
	
	public interface Atmosphere : ICreatableInstance
	{
		public new Atmosphere Clone();
		public Color3 Color { get; set; }
		public Color3 Decay { get; set; }
		public float Density { get; set; }
		public float Glare { get; set; }
		public float Haze { get; set; }
		public float Offset { get; set; }
	}
	
	public interface Attachment : ICreatableInstance
	{
		public new Attachment Clone();
		public Vector3 Axis { get; set; }
		public CFrame CFrame { get; set; }
		public Vector3 SecondaryAxis { get; set; }
		public bool Visible { get; set; }
		public Vector3 WorldAxis { get; set; }
		public CFrame WorldCFrame { get; set; }
		public Vector3 WorldSecondaryAxis { get; set; }
		public Vector3 GetAxis();
		public Instance[] GetConstraints();
		public Vector3 GetSecondaryAxis();
		public void SetAxis(Vector3 axis);
		public void SetSecondaryAxis(Vector3 axis);
	}
	
	public interface Bone : Attachment, ICreatableInstance
	{
		public new Bone Clone();
		public CFrame Transform { get; set; }
		public CFrame TransformedWorldCFrame { get; }
	}
	
	public interface AudioAnalyzer : ICreatableInstance
	{
		public new AudioAnalyzer Clone();
		public float PeakLevel { get; }
		public float RmsLevel { get; }
		public object[] GetConnectedWires(string pin);
		public object[] GetSpectrum();
	}
	
	public interface AudioChorus : ICreatableInstance
	{
		public new AudioChorus Clone();
		public bool Bypass { get; set; }
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioCompressor : ICreatableInstance
	{
		public new AudioCompressor Clone();
		public float Attack { get; set; }
		public bool Bypass { get; set; }
		public float MakeupGain { get; set; }
		public float Ratio { get; set; }
		public float Release { get; set; }
		public float Threshold { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioDeviceInput : ICreatableInstance
	{
		public new AudioDeviceInput Clone();
		public Enum.AccessModifierType.Type AccessType { get; set; }
		public bool Active { get; }
		public bool Muted { get; set; }
		public Player? Player { get; set; }
		public float Volume { get; set; }
		public object[] GetConnectedWires(string pin);
		public object[] GetUserIdAccessList();
		public void SetUserIdAccessList(object[] userIds);
	}
	
	public interface AudioDeviceOutput : ICreatableInstance
	{
		public new AudioDeviceOutput Clone();
		public Player? Player { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioDistortion : ICreatableInstance
	{
		public new AudioDistortion Clone();
		public bool Bypass { get; set; }
		public float Level { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioEcho : ICreatableInstance
	{
		public new AudioEcho Clone();
		public bool Bypass { get; set; }
		public float DelayTime { get; set; }
		public float DryLevel { get; set; }
		public float Feedback { get; set; }
		public float WetLevel { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioEmitter : ICreatableInstance
	{
		public new AudioEmitter Clone();
		public string AudioInteractionGroup { get; set; }
		public object[] GetConnectedWires(string pin);
		public object GetDistanceAttenuation();
		public object[] GetInteractingListeners();
		public void SetDistanceAttenuation(object curve);
	}
	
	public interface AudioEqualizer : ICreatableInstance
	{
		public new AudioEqualizer Clone();
		public bool Bypass { get; set; }
		public float HighGain { get; set; }
		public float LowGain { get; set; }
		public float MidGain { get; set; }
		public NumberRange MidRange { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioFader : ICreatableInstance
	{
		public new AudioFader Clone();
		public bool Bypass { get; set; }
		public float Volume { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioFilter : ICreatableInstance
	{
		public new AudioFilter Clone();
		public bool Bypass { get; set; }
		public Enum.AudioFilterType.Type FilterType { get; set; }
		public float Frequency { get; set; }
		public float Gain { get; set; }
		public float Q { get; set; }
		public object[] GetConnectedWires(string pin);
		public float GetGainAt(float frequency);
	}
	
	public interface AudioFlanger : ICreatableInstance
	{
		public new AudioFlanger Clone();
		public bool Bypass { get; set; }
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioFocusService : IServiceInstance
	{
		public new AudioFocusService Clone();
	}
	
	public interface AudioListener : ICreatableInstance
	{
		public new AudioListener Clone();
		public string AudioInteractionGroup { get; set; }
		public object[] GetConnectedWires(string pin);
		public object[] GetInteractingEmitters();
	}
	
	public interface AudioPitchShifter : ICreatableInstance
	{
		public new AudioPitchShifter Clone();
		public bool Bypass { get; set; }
		public float Pitch { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioPlayer : ICreatableInstance
	{
		public new AudioPlayer Clone();
		public string AssetId { get; set; }
		public bool AutoLoad { get; set; }
		public bool IsPlaying { get; }
		public bool IsReady { get; }
		public NumberRange LoopRegion { get; set; }
		public bool Looping { get; set; }
		public NumberRange PlaybackRegion { get; set; }
		public float PlaybackSpeed { get; set; }
		public float TimeLength { get; }
		public float TimePosition { get; set; }
		public float Volume { get; set; }
		public object[] GetConnectedWires(string pin);
		public void Play();
		public void Stop();
		public ScriptSignal Ended { get; }
		public ScriptSignal Looped { get; }
	}
	
	public interface AudioReverb : ICreatableInstance
	{
		public new AudioReverb Clone();
		public bool Bypass { get; set; }
		public float DecayRatio { get; set; }
		public float DecayTime { get; set; }
		public float Density { get; set; }
		public float Diffusion { get; set; }
		public float DryLevel { get; set; }
		public float EarlyDelayTime { get; set; }
		public float HighCutFrequency { get; set; }
		public float LateDelayTime { get; set; }
		public float LowShelfFrequency { get; set; }
		public float LowShelfGain { get; set; }
		public float ReferenceFrequency { get; set; }
		public float WetLevel { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioSearchParams : ICreatableInstance
	{
		public new AudioSearchParams Clone();
		public string Album { get; set; }
		public string Artist { get; set; }
		public Enum.AudioSubType.Type AudioSubType { get; set; }
		public Enum.AudioSubType.Type AudioSubtype { get; set; }
		public int MaxDuration { get; set; }
		public int MinDuration { get; set; }
		public string SearchKeyword { get; set; }
		public string Tag { get; set; }
		public string Title { get; set; }
	}
	
	public interface AvatarChatService : IServiceInstance
	{
		public new AvatarChatService Clone();
	}
	
	public interface AvatarCreationService : IServiceInstance
	{
		public new AvatarCreationService Clone();
		public void SendAnalyticsEvent(string eventName, object parameters);
		public AvatarGenerationSession CreateAvatarGenerationSessionAsync(Player player);
		public object GetAvatarGenerationConfig();
		public Instance LoadAvatarModelAsync(string id);
		public EditableImage LoadAvatarPreviewImageAsync(string avatarPreview);
		public object PromptCreateAvatarAsync(Player player, HumanoidDescription humanoidDescription);
		public object ValidateUGCAccessoryAsync(Player player, Accessory accessory, Enum.AccessoryType.Type accessoryType);
		public object ValidateUGCBodyPartAsync(Player player, Instance instance, Enum.BodyPart.Type bodyPart);
		public object ValidateUGCFullBodyAsync(Player player, HumanoidDescription humanoidDescription);
	}
	
	public interface AvatarEditorService : IServiceInstance
	{
		public new AvatarEditorService Clone();
		public Enum.AccessoryType.Type GetAccessoryType(Enum.AvatarAssetType.Type avatarAssetType);
		public void PromptAllowInventoryReadAccess();
		public void PromptCreateOutfit(HumanoidDescription outfit, Enum.HumanoidRigType.Type rigType);
		public void PromptDeleteOutfit(long outfitId);
		public void PromptRenameOutfit(long outfitId);
		public void PromptSaveAvatar(HumanoidDescription humanoidDescription, Enum.HumanoidRigType.Type rigType);
		public void PromptSetFavorite(long itemId, Enum.AvatarItemType.Type itemType, bool shouldFavorite);
		public void PromptUpdateOutfit(long outfitId, HumanoidDescription updatedOutfit, Enum.HumanoidRigType.Type rigType);
		public HumanoidDescription CheckApplyDefaultClothing(HumanoidDescription humanoidDescription);
		public HumanoidDescription ConformToAvatarRules(HumanoidDescription humanoidDescription);
		public object GetAvatarRules();
		public object[] GetBatchItemDetails(object[] itemIds, Enum.AvatarItemType.Type itemType);
		public bool GetFavorite(long itemId, Enum.AvatarItemType.Type itemType);
		public InventoryPages GetInventory(object[] assetTypes);
		public object GetItemDetails(long itemId, Enum.AvatarItemType.Type itemType);
		public object GetOutfitDetails(long outfitId);
		public OutfitPages GetOutfits(Enum.OutfitSource.Type? outfitSource = null, Enum.OutfitType.Type? outfitType = null);
		public object[] GetRecommendedAssets(Enum.AvatarAssetType.Type assetType, long? contextAssetId = null);
		public object[] GetRecommendedBundles(long bundleId);
		public CatalogPages SearchCatalog(CatalogSearchParams searchParameters);
		public ScriptSignal<Enum.AvatarPromptResult.Type> PromptAllowInventoryReadAccessCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult.Type, object> PromptCreateOutfitCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult.Type> PromptDeleteOutfitCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult.Type> PromptRenameOutfitCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult.Type, HumanoidDescription> PromptSaveAvatarCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult.Type> PromptSetFavoriteCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult.Type> PromptUpdateOutfitCompleted { get; }
	}
	
	public interface AvatarGenerationJob : Instance
	{
		public new AvatarGenerationJob Clone();
		public Enum.AvatarGenerationError.Type Error { get; set; }
		public string ErrorMessage { get; set; }
		public float Progress { get; set; }
		public Enum.AvatarGenerationJobStatus.Type Status { get; set; }
		public object GetOutput();
		public void Cancel();
		public void Wait();
	}
	
	public interface Avatar2DGenerationJob : AvatarGenerationJob
	{
		public new Avatar2DGenerationJob Clone();
		public string Result { get; set; }
	}
	
	public interface Avatar3DGenerationJob : AvatarGenerationJob
	{
		public new Avatar3DGenerationJob Clone();
		public string Result { get; set; }
	}
	
	public interface AvatarGenerationSession : Instance
	{
		public new AvatarGenerationSession Clone();
		public Avatar3DGenerationJob GenerateAvatarModel(Avatar2DGenerationJob previewJob, object options);
		public Avatar2DGenerationJob GenerateAvatarPreview(string textPrompt, object options);
	}
	
	public interface AvatarImportService : IServiceInstance
	{
		public new AvatarImportService Clone();
	}
	
	public interface Backpack : ICreatableInstance
	{
		public new Backpack Clone();
	}
	
	public interface BadgeService : IServiceInstance
	{
		public new BadgeService Clone();
		public bool AwardBadge(long userId, long badgeId);
		public object[] CheckUserBadgesAsync(long userId, object[] badgeIds);
		public object GetBadgeInfoAsync(long badgeId);
		public bool IsDisabled(long badgeId);
		public bool IsLegal(long badgeId);
		public bool UserHasBadge(long userId, long badgeId);
		public bool UserHasBadgeAsync(long userId, long badgeId);
	}
	
	public interface BaseImportData : Instance
	{
		public new BaseImportData Clone();
		public string Id { get; }
		public string ImportName { get; set; }
		public bool ShouldImport { get; set; }
		public ScriptSignal<object> StatusRemoved { get; }
		public ScriptSignal<object> StatusReported { get; }
	}
	
	public interface AnimationImportData : BaseImportData
	{
		public new AnimationImportData Clone();
	}
	
	public interface FacsImportData : BaseImportData
	{
		public new FacsImportData Clone();
	}
	
	public interface GroupImportData : BaseImportData
	{
		public new GroupImportData Clone();
		public bool Anchored { get; set; }
		public bool ImportAsModelAsset { get; set; }
		public bool InsertInWorkspace { get; set; }
	}
	
	public interface JointImportData : BaseImportData
	{
		public new JointImportData Clone();
	}
	
	public interface MaterialImportData : BaseImportData
	{
		public new MaterialImportData Clone();
		public string DiffuseFilePath { get; set; }
		public bool IsPbr { get; }
		public string MetalnessFilePath { get; set; }
		public string NormalFilePath { get; set; }
		public string RoughnessFilePath { get; set; }
	}
	
	public interface MeshImportData : BaseImportData
	{
		public new MeshImportData Clone();
		public bool Anchored { get; set; }
		public bool CageManifold { get; }
		public bool CageMeshIntersectedPreview { get; set; }
		public bool CageMeshNotIntersected { get; }
		public bool CageNoOverlappingVertices { get; }
		public bool CageNonManifoldPreview { get; set; }
		public bool CageOverlappingVerticesPreview { get; set; }
		public bool CageUVMatched { get; }
		public bool CageUVMisMatchedPreview { get; set; }
		public Vector3 Dimensions { get; }
		public bool DoubleSided { get; set; }
		public bool IgnoreVertexColors { get; set; }
		public bool IrrelevantCageModifiedPreview { get; set; }
		public bool MeshHoleDetectedPreview { get; set; }
		public bool MeshNoHoleDetected { get; }
		public bool NoIrrelevantCageModified { get; }
		public bool NoOuterCageFarExtendedFromMesh { get; }
		public bool OuterCageFarExtendedFromMeshPreview { get; set; }
		public float PolygonCount { get; }
		public bool UseImportedPivot { get; set; }
	}
	
	public interface RootImportData : BaseImportData
	{
		public new RootImportData Clone();
		public bool AddModelToInventory { get; set; }
		public bool Anchored { get; set; }
		public float AnimationIdForRestPose { get; set; }
		public string ExistingPackageId { get; set; }
		public Vector3 FileDimensions { get; }
		public bool ImportAsModelAsset { get; set; }
		public bool ImportAsPackage { get; set; }
		public bool InsertInWorkspace { get; set; }
		public bool InsertWithScenePosition { get; set; }
		public bool InvertNegativeFaces { get; set; }
		public bool KeepZeroInfluenceBones { get; set; }
		public bool MergeMeshes { get; set; }
		public float PolygonCount { get; }
		public long PreferredUploadId { get; set; }
		public Enum.RestPose.Type RestPose { get; set; }
		public Enum.RigScale.Type RigScale { get; set; }
		public Enum.RigType.Type RigType { get; set; }
		public bool RigVisualization { get; set; }
		public Enum.MeshScaleUnit.Type ScaleUnit { get; set; }
		public bool UseSceneOriginAsCFrame { get; set; }
		public bool UseSceneOriginAsPivot { get; set; }
		public bool UsesCages { get; set; }
		public bool ValidateUgcBody { get; set; }
		public Enum.NormalId.Type WorldForward { get; set; }
		public Enum.NormalId.Type WorldUp { get; set; }
	}
	
	public interface BasePlayerGui : Instance
	{
		public new BasePlayerGui Clone();
		public Instance[] GetGuiObjectsAtPosition(int x, int y);
	}
	
	public partial interface PlayerGui : BasePlayerGui
	{
		public new PlayerGui Clone();
		public Enum.ScreenOrientation.Type CurrentScreenOrientation { get; }
		public Enum.ScreenOrientation.Type ScreenOrientation { get; set; }
		public GuiObject? SelectionImageObject { get; set; }
		public float GetTopbarTransparency();
		public void SetTopbarTransparency(float transparency);
		public ScriptSignal<float> TopbarTransparencyChangedSignal { get; }
	}
	
	public partial interface StarterGui : BasePlayerGui, IServiceInstance
	{
		public new StarterGui Clone();
		public bool ResetPlayerGuiOnSpawn { get; set; }
		public Enum.ScreenOrientation.Type ScreenOrientation { get; set; }
		public bool GetCoreGuiEnabled(Enum.CoreGuiType.Type coreGuiType);
		public void SetCore(string parameterName, object value);
		public void SetCoreGuiEnabled(Enum.CoreGuiType.Type coreGuiType, bool enabled);
		public object GetCore(string parameterName);
	}
	
	public interface BaseRemoteEvent : Instance
	{
		public new BaseRemoteEvent Clone();
	}
	
	public interface BaseWrap : Instance
	{
		public new BaseWrap Clone();
		public string CageMeshId { get; set; }
		public CFrame CageOrigin { get; set; }
		public CFrame CageOriginWorld { get; }
		public CFrame ImportOrigin { get; set; }
		public CFrame ImportOriginWorld { get; }
	}
	
	public interface WrapDeformer : BaseWrap, ICreatableInstance
	{
		public new WrapDeformer Clone();
		public float Amount { get; set; }
		public bool Enabled { get; set; }
		public string RenderMeshID { get; set; }
	}
	
	public interface WrapLayer : BaseWrap, ICreatableInstance
	{
		public new WrapLayer Clone();
		public Enum.WrapLayerAutoSkin.Type AutoSkin { get; set; }
		public CFrame BindOffset { get; set; }
		public bool Enabled { get; set; }
		public int Order { get; set; }
		public float Puffiness { get; set; }
		public string ReferenceMeshId { get; set; }
		public CFrame ReferenceOrigin { get; set; }
		public CFrame ReferenceOriginWorld { get; }
		public float ShrinkFactor { get; set; }
	}
	
	public interface WrapTarget : BaseWrap, ICreatableInstance
	{
		public new WrapTarget Clone();
		public float Stiffness { get; set; }
	}
	
	public interface Beam : ICreatableInstance
	{
		public new Beam Clone();
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public float Brightness { get; set; }
		public ColorSequence Color { get; set; }
		public float CurveSize0 { get; set; }
		public float CurveSize1 { get; set; }
		public bool Enabled { get; set; }
		public bool FaceCamera { get; set; }
		public float LightEmission { get; set; }
		public float LightInfluence { get; set; }
		public int Segments { get; set; }
		public string Texture { get; set; }
		public float TextureLength { get; set; }
		public Enum.TextureMode.Type TextureMode { get; set; }
		public float TextureSpeed { get; set; }
		public NumberSequence Transparency { get; set; }
		public float Width0 { get; set; }
		public float Width1 { get; set; }
		public float ZOffset { get; set; }
		public void SetTextureOffset(float? offset = null);
	}
	
	public interface BindableEvent : ICreatableInstance
	{
		public new BindableEvent Clone();
		public void Fire(object arguments);
		public ScriptSignal<object> Event { get; }
	}
	
	public interface BindableFunction : ICreatableInstance
	{
		public new BindableFunction Clone();
		public object Invoke(object arguments);
	}
	
	public interface BodyMover : Instance
	{
		public new BodyMover Clone();
	}
	
	public interface BodyAngularVelocity : BodyMover, ICreatableInstance
	{
		public new BodyAngularVelocity Clone();
		public Vector3 AngularVelocity { get; set; }
		public Vector3 MaxTorque { get; set; }
		public float P { get; set; }
		public Vector3 angularvelocity { get; set; }
	}
	
	public interface BodyForce : BodyMover, ICreatableInstance
	{
		public new BodyForce Clone();
		public Vector3 Force { get; set; }
	}
	
	public interface BodyGyro : BodyMover, ICreatableInstance
	{
		public new BodyGyro Clone();
		public CFrame CFrame { get; set; }
		public float D { get; set; }
		public Vector3 MaxTorque { get; set; }
		public float P { get; set; }
	}
	
	public interface BodyPosition : BodyMover, ICreatableInstance
	{
		public new BodyPosition Clone();
		public float D { get; set; }
		public Vector3 MaxForce { get; set; }
		public float P { get; set; }
		public Vector3 Position { get; set; }
		public Vector3 GetLastForce();
		public Vector3 lastForce();
		public ScriptSignal ReachedTarget { get; }
	}
	
	public interface BodyThrust : BodyMover, ICreatableInstance
	{
		public new BodyThrust Clone();
		public Vector3 Force { get; set; }
		public Vector3 Location { get; set; }
	}
	
	public interface BodyVelocity : BodyMover, ICreatableInstance
	{
		public new BodyVelocity Clone();
		public Vector3 MaxForce { get; set; }
		public float P { get; set; }
		public Vector3 Velocity { get; set; }
		public Vector3 GetLastForce();
		public Vector3 lastForce();
	}
	
	public interface RocketPropulsion : BodyMover, ICreatableInstance
	{
		public new RocketPropulsion Clone();
		public float CartoonFactor { get; set; }
		public float MaxSpeed { get; set; }
		public float MaxThrust { get; set; }
		public Vector3 MaxTorque { get; set; }
		public BasePart? Target { get; set; }
		public Vector3 TargetOffset { get; set; }
		public float TargetRadius { get; set; }
		public float ThrustD { get; set; }
		public float ThrustP { get; set; }
		public float TurnD { get; set; }
		public float TurnP { get; set; }
		public void Abort();
		public void Fire();
		public ScriptSignal ReachedTarget { get; }
	}
	
	public interface BodyPartDescription : ICreatableInstance
	{
		public new BodyPartDescription Clone();
		public long AssetId { get; set; }
		public Enum.BodyPart.Type BodyPart { get; set; }
		public Color3 Color { get; set; }
		public Instance? Instance { get; set; }
	}
	
	public interface Breakpoint : ICreatableInstance
	{
		public new Breakpoint Clone();
	}
	
	public interface BubbleChatMessageProperties : ICreatableInstance
	{
		public new BubbleChatMessageProperties Clone();
		public Color3 BackgroundColor3 { get; set; }
		public float BackgroundTransparency { get; set; }
		public Font FontFace { get; set; }
		public bool TailVisible { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
	}
	
	public interface BulkImportService : IServiceInstance
	{
		public new BulkImportService Clone();
	}
	
	public interface CalloutService : IServiceInstance
	{
		public new CalloutService Clone();
	}
	
	public interface Camera : ICreatableInstance
	{
		public new Camera Clone();
		public CFrame CFrame { get; set; }
		public Instance? CameraSubject { get; set; }
		public Enum.CameraType.Type CameraType { get; set; }
		public float DiagonalFieldOfView { get; set; }
		public float FieldOfView { get; set; }
		public Enum.FieldOfViewMode.Type FieldOfViewMode { get; set; }
		public CFrame Focus { get; set; }
		public bool HeadLocked { get; set; }
		public float HeadScale { get; set; }
		public float MaxAxisFieldOfView { get; set; }
		public float NearPlaneZ { get; }
		public bool VRTiltAndRollEnabled { get; set; }
		public Vector2 ViewportSize { get; }
		public float GetLargestCutoffDistance(Instance[] ignoreList);
		public float GetPanSpeed();
		public Instance[] GetPartsObscuringTarget(object[] castPoints, Instance[] ignoreList);
		public CFrame GetRenderCFrame();
		public float GetRoll();
		public float GetTiltSpeed();
		public void Interpolate(CFrame endPos, CFrame endFocus, float duration);
		public void PanUnits(int units);
		public Ray ScreenPointToRay(float x, float y, float? depth = null);
		public void SetCameraPanMode(Enum.CameraPanMode.Type? mode = null);
		public void SetRoll(float rollAngle);
		public bool TiltUnits(int units);
		public Ray ViewportPointToRay(float x, float y, float? depth = null);
		public object WorldToScreenPoint(Vector3 worldPoint);
		public object WorldToViewportPoint(Vector3 worldPoint);
		public void ZoomToExtents(CFrame boundingBoxCFrame, Vector3 boundingBoxSize);
		public ScriptSignal InterpolationFinished { get; }
	}
	
	public interface CaptureService : IServiceInstance
	{
		public new CaptureService Clone();
		public void CaptureScreenshot(Action onCaptureReady);
		public void PromptSaveCapturesToGallery(object[] contentIds, Action resultCallback);
		public void PromptShareCapture(string contentId, string launchData, Action onAcceptedCallback, Action onDeniedCallback);
		public ScriptSignal CaptureBegan { get; }
		public ScriptSignal CaptureEnded { get; }
		public ScriptSignal<object> CaptureSaved { get; }
		public ScriptSignal<string> UserCaptureSaved { get; }
	}
	
	public interface CharacterAppearance : Instance
	{
		public new CharacterAppearance Clone();
	}
	
	public interface BodyColors : CharacterAppearance, ICreatableInstance
	{
		public new BodyColors Clone();
		public BrickColor HeadColor { get; set; }
		public Color3 HeadColor3 { get; set; }
		public BrickColor LeftArmColor { get; set; }
		public Color3 LeftArmColor3 { get; set; }
		public BrickColor LeftLegColor { get; set; }
		public Color3 LeftLegColor3 { get; set; }
		public BrickColor RightArmColor { get; set; }
		public Color3 RightArmColor3 { get; set; }
		public BrickColor RightLegColor { get; set; }
		public Color3 RightLegColor3 { get; set; }
		public BrickColor TorsoColor { get; set; }
		public Color3 TorsoColor3 { get; set; }
	}
	
	public interface CharacterMesh : CharacterAppearance, ICreatableInstance
	{
		public new CharacterMesh Clone();
		public long BaseTextureId { get; set; }
		public Enum.BodyPart.Type BodyPart { get; set; }
		public long MeshId { get; set; }
		public long OverlayTextureId { get; set; }
	}
	
	public interface Clothing : CharacterAppearance
	{
		public new Clothing Clone();
		public Color3 Color3 { get; set; }
	}
	
	public interface Pants : Clothing, ICreatableInstance
	{
		public new Pants Clone();
		public string PantsTemplate { get; set; }
	}
	
	public interface Shirt : Clothing, ICreatableInstance
	{
		public new Shirt Clone();
		public string ShirtTemplate { get; set; }
	}
	
	public interface ShirtGraphic : CharacterAppearance, ICreatableInstance
	{
		public new ShirtGraphic Clone();
		public Color3 Color3 { get; set; }
		public string Graphic { get; set; }
	}
	
	public interface Chat : IServiceInstance
	{
		public new Chat Clone();
		public bool BubbleChatEnabled { get; set; }
		public bool LoadDefaultChat { get; }
		public void Chat(Instance partOrCharacter, string message, Enum.ChatColor.Type? color = null);
		public object InvokeChatCallback(Enum.ChatCallbackType.Type callbackType, object callbackArguments);
		public void RegisterChatCallback(Enum.ChatCallbackType.Type callbackType, Action callbackFunction);
		public void SetBubbleChatSettings(object settings);
		public bool CanUserChatAsync(long userId);
		public bool CanUsersChatAsync(long userIdFrom, long userIdTo);
		public string FilterStringAsync(string stringToFilter, Player playerFrom, Player playerTo);
		public string FilterStringForBroadcast(string stringToFilter, Player playerFrom);
		public string FilterStringForPlayerAsync(string stringToFilter, Player playerToFilterFor);
		public ScriptSignal<Instance, string, Enum.ChatColor.Type> Chatted { get; }
	}
	
	public interface ChatbotUIService : IServiceInstance
	{
		public new ChatbotUIService Clone();
	}
	
	public interface ClickDetector : ICreatableInstance
	{
		public new ClickDetector Clone();
		public string CursorIcon { get; set; }
		public float MaxActivationDistance { get; set; }
		public ScriptSignal<Player> MouseClick { get; }
		public ScriptSignal<Player> MouseHoverEnter { get; }
		public ScriptSignal<Player> MouseHoverLeave { get; }
		public ScriptSignal<Player> RightMouseClick { get; }
	}
	
	public interface DragDetector : ClickDetector, ICreatableInstance
	{
		public new DragDetector Clone();
		public string ActivatedCursorIcon { get; set; }
		public bool ApplyAtCenterOfMass { get; set; }
		public Vector3 Axis { get; set; }
		public CFrame DragFrame { get; set; }
		public Enum.DragDetectorDragStyle.Type DragStyle { get; set; }
		public bool Enabled { get; set; }
		public Enum.KeyCode.Type GamepadModeSwitchKeyCode { get; set; }
		public Enum.KeyCode.Type KeyboardModeSwitchKeyCode { get; set; }
		public float MaxDragAngle { get; set; }
		public Vector3 MaxDragTranslation { get; set; }
		public float MaxForce { get; set; }
		public float MaxTorque { get; set; }
		public float MinDragAngle { get; set; }
		public Vector3 MinDragTranslation { get; set; }
		public Vector3 Orientation { get; set; }
		public Enum.DragDetectorPermissionPolicy.Type PermissionPolicy { get; set; }
		public Instance? ReferenceInstance { get; set; }
		public Enum.DragDetectorResponseStyle.Type ResponseStyle { get; set; }
		public float Responsiveness { get; set; }
		public bool RunLocally { get; set; }
		public Vector3 SecondaryAxis { get; set; }
		public float TrackballRadialPullFactor { get; set; }
		public float TrackballRollFactor { get; set; }
		public Enum.KeyCode.Type VRSwitchKeyCode { get; set; }
		public Vector3 WorldAxis { get; set; }
		public Vector3 WorldSecondaryAxis { get; set; }
		public ScriptConnection AddConstraintFunction(int priority, Action function);
		public CFrame GetReferenceFrame();
		public void RestartDrag();
		public void SetDragStyleFunction(Action function);
		public void SetPermissionPolicyFunction(Action function);
		public ScriptSignal<Player, Ray, CFrame, CFrame?, bool> DragContinue { get; }
		public ScriptSignal<Player> DragEnd { get; }
		public ScriptSignal<Player, Ray, CFrame, CFrame, BasePart, CFrame?, bool> DragStart { get; }
	}
	
	public interface Clouds : ICreatableInstance
	{
		public new Clouds Clone();
		public Color3 Color { get; set; }
		public float Cover { get; set; }
		public float Density { get; set; }
		public bool Enabled { get; set; }
	}
	
	public interface Collaborator : Instance
	{
		public new Collaborator Clone();
	}
	
	public interface CollaboratorsService : IServiceInstance
	{
		public new CollaboratorsService Clone();
	}
	
	public interface CollectionService : IServiceInstance
	{
		public new CollectionService Clone();
		public void AddTag(Instance instance, string tag);
		public object[] GetAllTags();
		public ScriptSignal GetInstanceAddedSignal(string tag);
		public ScriptSignal GetInstanceRemovedSignal(string tag);
		public Instance[] GetTagged(string tag);
		public object[] GetTags(Instance instance);
		public bool HasTag(Instance instance, string tag);
		public void RemoveTag(Instance instance, string tag);
		public ScriptSignal<Instance> ItemAdded { get; }
		public ScriptSignal<Instance> ItemRemoved { get; }
		public ScriptSignal<string> TagAdded { get; }
		public ScriptSignal<string> TagRemoved { get; }
	}
	
	public interface CommandInstance : Instance
	{
		public new CommandInstance Clone();
		public bool AllowGUIAccessPoints { get; }
		public string DisplayName { get; set; }
		public string Name { get; }
	}
	
	public interface CommandService : IServiceInstance
	{
		public new CommandService Clone();
	}
	
	public interface CommerceService : IServiceInstance
	{
		public new CommerceService Clone();
		public void PromptRealWorldCommerceBrowser(Player player, string url);
		public bool UserEligibleForRealWorldCommerceAsync();
	}
	
	public interface Configuration : ICreatableInstance
	{
		public new Configuration Clone();
	}
	
	public interface ConfigureServerService : IServiceInstance
	{
		public new ConfigureServerService Clone();
	}
	
	public interface ConnectivityService : IServiceInstance
	{
		public new ConnectivityService Clone();
	}
	
	public interface Constraint : Instance
	{
		public new Constraint Clone();
		public bool Active { get; }
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public BrickColor Color { get; set; }
		public bool Enabled { get; set; }
		public bool Visible { get; set; }
		public Vector3 GetDebugAppliedForce(int bodyId);
		public Vector3 GetDebugAppliedTorque(int bodyId);
	}
	
	public interface AlignOrientation : Constraint, ICreatableInstance
	{
		public new AlignOrientation Clone();
		public Enum.AlignType.Type AlignType { get; set; }
		public CFrame CFrame { get; set; }
		public Vector3 LookAtPosition { get; set; }
		public float MaxAngularVelocity { get; set; }
		public float MaxTorque { get; set; }
		public Enum.OrientationAlignmentMode.Type Mode { get; set; }
		public Vector3 PrimaryAxis { get; set; }
		public bool PrimaryAxisOnly { get; set; }
		public bool ReactionTorqueEnabled { get; set; }
		public float Responsiveness { get; set; }
		public bool RigidityEnabled { get; set; }
		public Vector3 SecondaryAxis { get; set; }
	}
	
	public interface AlignPosition : Constraint, ICreatableInstance
	{
		public new AlignPosition Clone();
		public bool ApplyAtCenterOfMass { get; set; }
		public Enum.ForceLimitMode.Type ForceLimitMode { get; set; }
		public Enum.ActuatorRelativeTo.Type ForceRelativeTo { get; set; }
		public Vector3 MaxAxesForce { get; set; }
		public float MaxForce { get; set; }
		public float MaxVelocity { get; set; }
		public Enum.PositionAlignmentMode.Type Mode { get; set; }
		public Vector3 Position { get; set; }
		public bool ReactionForceEnabled { get; set; }
		public float Responsiveness { get; set; }
		public bool RigidityEnabled { get; set; }
	}
	
	public interface AngularVelocity : Constraint, ICreatableInstance
	{
		public new AngularVelocity Clone();
		public Vector3 AngularVelocity { get; set; }
		public float MaxTorque { get; set; }
		public bool ReactionTorqueEnabled { get; set; }
		public Enum.ActuatorRelativeTo.Type RelativeTo { get; set; }
	}
	
	public interface AnimationConstraint : Constraint, ICreatableInstance
	{
		public new AnimationConstraint Clone();
		public bool IsKinematic { get; set; }
		public float MaxForce { get; set; }
		public float MaxTorque { get; set; }
		public CFrame Transform { get; set; }
	}
	
	public interface BallSocketConstraint : Constraint, ICreatableInstance
	{
		public new BallSocketConstraint Clone();
		public bool LimitsEnabled { get; set; }
		public float MaxFrictionTorque { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
		public bool TwistLimitsEnabled { get; set; }
		public float TwistLowerAngle { get; set; }
		public float TwistUpperAngle { get; set; }
		public float UpperAngle { get; set; }
	}
	
	public interface HingeConstraint : Constraint, ICreatableInstance
	{
		public new HingeConstraint Clone();
		public Enum.ActuatorType.Type ActuatorType { get; set; }
		public float AngularResponsiveness { get; set; }
		public float AngularSpeed { get; set; }
		public float AngularVelocity { get; set; }
		public float CurrentAngle { get; }
		public bool LimitsEnabled { get; set; }
		public float LowerAngle { get; set; }
		public float MotorMaxAcceleration { get; set; }
		public float MotorMaxTorque { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
		public float ServoMaxTorque { get; set; }
		public bool SoftlockServoUponReachingTarget { get; set; }
		public float TargetAngle { get; set; }
		public float UpperAngle { get; set; }
	}
	
	public interface LineForce : Constraint, ICreatableInstance
	{
		public new LineForce Clone();
		public bool ApplyAtCenterOfMass { get; set; }
		public bool InverseSquareLaw { get; set; }
		public float Magnitude { get; set; }
		public float MaxForce { get; set; }
		public bool ReactionForceEnabled { get; set; }
	}
	
	public interface LinearVelocity : Constraint, ICreatableInstance
	{
		public new LinearVelocity Clone();
		public Enum.ForceLimitMode.Type ForceLimitMode { get; set; }
		public bool ForceLimitsEnabled { get; set; }
		public Vector3 LineDirection { get; set; }
		public float LineVelocity { get; set; }
		public Vector3 MaxAxesForce { get; set; }
		public float MaxForce { get; set; }
		public Vector2 MaxPlanarAxesForce { get; set; }
		public Vector2 PlaneVelocity { get; set; }
		public Vector3 PrimaryTangentAxis { get; set; }
		public Enum.ActuatorRelativeTo.Type RelativeTo { get; set; }
		public Vector3 SecondaryTangentAxis { get; set; }
		public Vector3 VectorVelocity { get; set; }
		public Enum.VelocityConstraintMode.Type VelocityConstraintMode { get; set; }
	}
	
	public interface PlaneConstraint : Constraint, ICreatableInstance
	{
		public new PlaneConstraint Clone();
	}
	
	public interface Plane : PlaneConstraint, ICreatableInstance
	{
		public new Plane Clone();
	}
	
	public interface RigidConstraint : Constraint, ICreatableInstance
	{
		public new RigidConstraint Clone();
	}
	
	public interface RodConstraint : Constraint, ICreatableInstance
	{
		public new RodConstraint Clone();
		public float CurrentDistance { get; }
		public float Length { get; set; }
		public float LimitAngle0 { get; set; }
		public float LimitAngle1 { get; set; }
		public bool LimitsEnabled { get; set; }
		public float Thickness { get; set; }
	}
	
	public interface RopeConstraint : Constraint, ICreatableInstance
	{
		public new RopeConstraint Clone();
		public float CurrentDistance { get; }
		public float Length { get; set; }
		public float Restitution { get; set; }
		public float Thickness { get; set; }
		public bool WinchEnabled { get; set; }
		public float WinchForce { get; set; }
		public float WinchResponsiveness { get; set; }
		public float WinchSpeed { get; set; }
		public float WinchTarget { get; set; }
	}
	
	public interface SlidingBallConstraint : Constraint
	{
		public new SlidingBallConstraint Clone();
		public Enum.ActuatorType.Type ActuatorType { get; set; }
		public float CurrentPosition { get; }
		public bool LimitsEnabled { get; set; }
		public float LinearResponsiveness { get; set; }
		public float LowerLimit { get; set; }
		public float MotorMaxAcceleration { get; set; }
		public float MotorMaxForce { get; set; }
		public float Restitution { get; set; }
		public float ServoMaxForce { get; set; }
		public float Size { get; set; }
		public bool SoftlockServoUponReachingTarget { get; set; }
		public float Speed { get; set; }
		public float TargetPosition { get; set; }
		public float UpperLimit { get; set; }
		public float Velocity { get; set; }
	}
	
	public interface CylindricalConstraint : SlidingBallConstraint, ICreatableInstance
	{
		public new CylindricalConstraint Clone();
		public Enum.ActuatorType.Type AngularActuatorType { get; set; }
		public bool AngularLimitsEnabled { get; set; }
		public float AngularResponsiveness { get; set; }
		public float AngularRestitution { get; set; }
		public float AngularSpeed { get; set; }
		public float AngularVelocity { get; set; }
		public float CurrentAngle { get; }
		public float InclinationAngle { get; set; }
		public float LowerAngle { get; set; }
		public float MotorMaxAngularAcceleration { get; set; }
		public float MotorMaxTorque { get; set; }
		public bool RotationAxisVisible { get; set; }
		public float ServoMaxTorque { get; set; }
		public bool SoftlockAngularServoUponReachingTarget { get; set; }
		public float TargetAngle { get; set; }
		public float UpperAngle { get; set; }
		public Vector3 WorldRotationAxis { get; }
	}
	
	public interface PrismaticConstraint : SlidingBallConstraint, ICreatableInstance
	{
		public new PrismaticConstraint Clone();
	}
	
	public interface SpringConstraint : Constraint, ICreatableInstance
	{
		public new SpringConstraint Clone();
		public float Coils { get; set; }
		public float CurrentLength { get; }
		public float Damping { get; set; }
		public float FreeLength { get; set; }
		public bool LimitsEnabled { get; set; }
		public float MaxForce { get; set; }
		public float MaxLength { get; set; }
		public float MinLength { get; set; }
		public float Radius { get; set; }
		public float Stiffness { get; set; }
		public float Thickness { get; set; }
	}
	
	public interface Torque : Constraint, ICreatableInstance
	{
		public new Torque Clone();
		public Enum.ActuatorRelativeTo.Type RelativeTo { get; set; }
		public Vector3 Torque { get; set; }
	}
	
	public interface TorsionSpringConstraint : Constraint, ICreatableInstance
	{
		public new TorsionSpringConstraint Clone();
		public float Coils { get; set; }
		public float CurrentAngle { get; }
		public float Damping { get; set; }
		public bool LimitsEnabled { get; set; }
		public float MaxAngle { get; set; }
		public float MaxTorque { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
		public float Stiffness { get; set; }
	}
	
	public interface UniversalConstraint : Constraint, ICreatableInstance
	{
		public new UniversalConstraint Clone();
		public bool LimitsEnabled { get; set; }
		public float MaxAngle { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
	}
	
	public interface VectorForce : Constraint, ICreatableInstance
	{
		public new VectorForce Clone();
		public bool ApplyAtCenterOfMass { get; set; }
		public Vector3 Force { get; set; }
		public Enum.ActuatorRelativeTo.Type RelativeTo { get; set; }
	}
	
	public interface ContentProvider : IServiceInstance
	{
		public new ContentProvider Clone();
		public string BaseUrl { get; }
		public int RequestQueueSize { get; }
		public Enum.AssetFetchStatus.Type GetAssetFetchStatus(string contentId);
		public ScriptSignal GetAssetFetchStatusChangedSignal(string contentId);
		public object[] ListEncryptedAssets();
		public void Preload(string contentId);
		public void RegisterDefaultEncryptionKey(string encryptionKey);
		public void RegisterDefaultSessionKey(string sessionKey);
		public void RegisterEncryptedAsset(string assetId, string encryptionKey);
		public void RegisterSessionEncryptedAsset(string contentId, string sessionKey);
		public void UnregisterDefaultEncryptionKey();
		public void UnregisterEncryptedAsset(string assetId);
		public void PreloadAsync(object[] contentIdList, Action? callbackFunction = null);
		public ScriptSignal<string> AssetFetchFailed { get; }
	}
	
	public interface ContextActionService : IServiceInstance
	{
		public new ContextActionService Clone();
		public void BindAction(string actionName, Action functionToBind, bool createTouchButton, object inputTypes);
		public void BindActionAtPriority(string actionName, Action functionToBind, bool createTouchButton, int priorityLevel, object inputTypes);
		public void BindActionToInputTypes(string actionName, Action functionToBind, bool createTouchButton, object inputTypes);
		public void BindActivate(Enum.UserInputType.Type userInputTypeForActivation, object keyCodesForActivation);
		public object GetAllBoundActionInfo();
		public object GetBoundActionInfo(string actionName);
		public string GetCurrentLocalToolIcon();
		public void SetDescription(string actionName, string description);
		public void SetImage(string actionName, string image);
		public void SetPosition(string actionName, UDim2 position);
		public void SetTitle(string actionName, string title);
		public void UnbindAction(string actionName);
		public void UnbindActivate(Enum.UserInputType.Type userInputTypeForActivation, Enum.KeyCode.Type? keyCodeForActivation = null);
		public void UnbindAllActions();
		public Instance GetButton(string actionName);
		public ScriptSignal<Instance> LocalToolEquipped { get; }
		public ScriptSignal<Instance> LocalToolUnequipped { get; }
	}
	
	public interface Controller : Instance
	{
		public new Controller Clone();
		public void BindButton(Enum.Button.Type button, string caption);
		public bool GetButton(Enum.Button.Type button);
		public void UnbindButton(Enum.Button.Type button);
		public ScriptSignal<Enum.Button.Type> ButtonChanged { get; }
	}
	
	public interface HumanoidController : Controller, ICreatableInstance
	{
		public new HumanoidController Clone();
	}
	
	public interface SkateboardController : Controller, ICreatableInstance
	{
		public new SkateboardController Clone();
		public float Steer { get; }
		public float Throttle { get; }
		public ScriptSignal<string> AxisChanged { get; }
	}
	
	public interface VehicleController : Controller, ICreatableInstance
	{
		public new VehicleController Clone();
	}
	
	public interface ControllerBase : Instance
	{
		public new ControllerBase Clone();
		public bool Active { get; }
		public bool BalanceRigidityEnabled { get; set; }
		public float MoveSpeedFactor { get; set; }
	}
	
	public interface AirController : ControllerBase, ICreatableInstance
	{
		public new AirController Clone();
		public float BalanceMaxTorque { get; set; }
		public float BalanceSpeed { get; set; }
		public bool MaintainAngularMomentum { get; set; }
		public bool MaintainLinearMomentum { get; set; }
		public float MoveMaxForce { get; set; }
		public float TurnMaxTorque { get; set; }
		public float TurnSpeedFactor { get; set; }
	}
	
	public interface ClimbController : ControllerBase, ICreatableInstance
	{
		public new ClimbController Clone();
		public float AccelerationTime { get; set; }
		public float BalanceMaxTorque { get; set; }
		public float BalanceSpeed { get; set; }
		public float MoveMaxForce { get; set; }
	}
	
	public interface GroundController : ControllerBase, ICreatableInstance
	{
		public new GroundController Clone();
		public float AccelerationLean { get; set; }
		public float AccelerationTime { get; set; }
		public float BalanceMaxTorque { get; set; }
		public float BalanceSpeed { get; set; }
		public float DecelerationTime { get; set; }
		public float Friction { get; set; }
		public float FrictionWeight { get; set; }
		public float GroundOffset { get; set; }
		public float StandForce { get; set; }
		public float StandSpeed { get; set; }
		public float TurnSpeedFactor { get; set; }
	}
	
	public interface SwimController : ControllerBase, ICreatableInstance
	{
		public new SwimController Clone();
		public float AccelerationTime { get; set; }
		public float PitchMaxTorque { get; set; }
		public float PitchSpeedFactor { get; set; }
		public float RollMaxTorque { get; set; }
		public float RollSpeedFactor { get; set; }
	}
	
	public interface ControllerManager : ICreatableInstance
	{
		public new ControllerManager Clone();
		public ControllerBase? ActiveController { get; set; }
		public float BaseMoveSpeed { get; set; }
		public float BaseTurnSpeed { get; set; }
		public ControllerSensor? ClimbSensor { get; set; }
		public Vector3 FacingDirection { get; set; }
		public ControllerSensor? GroundSensor { get; set; }
		public Vector3 MovingDirection { get; set; }
		public BasePart? RootPart { get; set; }
		public Vector3 UpDirection { get; set; }
	}
	
	public interface ControllerService : IServiceInstance
	{
		public new ControllerService Clone();
	}
	
	public interface ConversationalAIAcceptanceService : IServiceInstance
	{
		public new ConversationalAIAcceptanceService Clone();
	}
	
	public interface CoreScriptDebuggingManagerHelper : IServiceInstance
	{
		public new CoreScriptDebuggingManagerHelper Clone();
	}
	
	public interface CreationDBService : IServiceInstance
	{
		public new CreationDBService Clone();
	}
	
	public interface CrossDMScriptChangeListener : IServiceInstance
	{
		public new CrossDMScriptChangeListener Clone();
	}
	
	public interface DataModelMesh : Instance
	{
		public new DataModelMesh Clone();
		public Vector3 Offset { get; set; }
		public Vector3 Scale { get; set; }
		public Vector3 VertexColor { get; set; }
	}
	
	public interface BevelMesh : DataModelMesh
	{
		public new BevelMesh Clone();
	}
	
	public interface BlockMesh : BevelMesh, ICreatableInstance
	{
		public new BlockMesh Clone();
	}
	
	public interface CylinderMesh : BevelMesh, ICreatableInstance
	{
		public new CylinderMesh Clone();
	}
	
	public interface EditableMesh : DataModelMesh, ICreatableInstance
	{
		public new EditableMesh Clone();
		public bool SkinningEnabled { get; set; }
		public long AddTriangle(long vertexId0, long vertexId1, long vertexId2);
		public long AddVertex(Vector3 p);
		public object FindClosestPointOnSurface(Vector3 point);
		public long FindClosestVertex(Vector3 toThisPoint);
		public object[] FindVerticesWithinSphere(Vector3 center, float radius);
		public object[] GetAdjacentTriangles(long triangleId);
		public object[] GetAdjacentVertices(long vertexId);
		public Vector3 GetPosition(long vertexId);
		public object GetTriangleVertices(long triangleId);
		public object[] GetTriangles();
		public Vector2 GetUV(long vertexId);
		public Color3 GetVertexColor(long vertexId);
		public float GetVertexColorAlpha(long vertexId);
		public Vector3 GetVertexNormal(long vertexId);
		public object[] GetVertices();
		public object RaycastLocal(Vector3 origin, Vector3 direction);
		public void RemoveTriangle(long triangleId);
		public void RemoveVertex(long vertexId);
		public void SetPosition(long vertexId, Vector3 p);
		public void SetUV(long vertexId, Vector2 uv);
		public void SetVertexColor(long vertexId, Color3 color);
		public void SetVertexColorAlpha(long vertexId, float alpha);
		public void SetVertexNormal(long vertexId, Vector3 vnormal);
		public MeshPart CreateMeshPartAsync(object? options = null);
	}
	
	public interface RobloxEditableMesh : EditableMesh, ICreatableInstance
	{
		public new RobloxEditableMesh Clone();
	}
	
	public interface FileMesh : DataModelMesh, ICreatableInstance
	{
		public new FileMesh Clone();
		public string MeshId { get; set; }
		public string TextureId { get; set; }
	}
	
	public interface SpecialMesh : FileMesh, ICreatableInstance
	{
		public new SpecialMesh Clone();
		public Enum.MeshType.Type MeshType { get; set; }
	}
	
	public interface DataModelPatchService : IServiceInstance
	{
		public new DataModelPatchService Clone();
	}
	
	public interface DataStoreGetOptions : ICreatableInstance
	{
		public new DataStoreGetOptions Clone();
		public bool UseCache { get; set; }
	}
	
	public interface DataStoreIncrementOptions : ICreatableInstance
	{
		public new DataStoreIncrementOptions Clone();
		public object GetMetadata();
		public void SetMetadata(object attributes);
	}
	
	public interface DataStoreInfo : Instance
	{
		public new DataStoreInfo Clone();
		public long CreatedTime { get; }
		public string DataStoreName { get; }
		public long UpdatedTime { get; }
	}
	
	public interface DataStoreKey : Instance
	{
		public new DataStoreKey Clone();
		public string KeyName { get; }
	}
	
	public interface DataStoreKeyInfo : Instance
	{
		public new DataStoreKeyInfo Clone();
		public long CreatedTime { get; }
		public long UpdatedTime { get; }
		public string Version { get; }
		public object GetMetadata();
		public object[] GetUserIds();
	}
	
	public interface DataStoreObjectVersionInfo : Instance
	{
		public new DataStoreObjectVersionInfo Clone();
		public long CreatedTime { get; }
		public bool IsDeleted { get; }
		public string Version { get; }
	}
	
	public interface DataStoreOptions : ICreatableInstance
	{
		public new DataStoreOptions Clone();
		public bool AllScopes { get; set; }
		public void SetExperimentalFeatures(object experimentalFeatures);
	}
	
	public partial interface DataStoreService : IServiceInstance
	{
		public new DataStoreService Clone();
		public GlobalDataStore GetGlobalDataStore();
		public OrderedDataStore GetOrderedDataStore(string name, string? scope = null);
		public int GetRequestBudgetForRequestType(Enum.DataStoreRequestType.Type requestType);
		public DataStoreListingPages ListDataStoresAsync(string prefix, int? pageSize = null, string? cursor = null);
	}
	
	public interface DataStoreSetOptions : ICreatableInstance
	{
		public new DataStoreSetOptions Clone();
		public object GetMetadata();
		public void SetMetadata(object attributes);
	}
	
	public interface Debris : IServiceInstance
	{
		public new Debris Clone();
		public int MaxItems { get; set; }
		public void AddItem(Instance item, float? lifetime = null);
	}
	
	public interface DebuggablePluginWatcher : IServiceInstance
	{
		public new DebuggablePluginWatcher Clone();
	}
	
	public interface DebuggerConnection : Instance
	{
		public new DebuggerConnection Clone();
	}
	
	public interface LocalDebuggerConnection : DebuggerConnection
	{
		public new LocalDebuggerConnection Clone();
	}
	
	public interface DebuggerConnectionManager : IServiceInstance
	{
		public new DebuggerConnectionManager Clone();
	}
	
	public interface DebuggerLuaResponse : Instance
	{
		public new DebuggerLuaResponse Clone();
	}
	
	public interface DebuggerUIService : IServiceInstance
	{
		public new DebuggerUIService Clone();
	}
	
	public interface DebuggerVariable : Instance
	{
		public new DebuggerVariable Clone();
	}
	
	public interface DeviceIdService : IServiceInstance
	{
		public new DeviceIdService Clone();
	}
	
	public interface Dialog : ICreatableInstance
	{
		public new Dialog Clone();
		public Enum.DialogBehaviorType.Type BehaviorType { get; set; }
		public float ConversationDistance { get; set; }
		public bool GoodbyeChoiceActive { get; set; }
		public string GoodbyeDialog { get; set; }
		public bool InUse { get; set; }
		public string InitialPrompt { get; set; }
		public Enum.DialogPurpose.Type Purpose { get; set; }
		public Enum.DialogTone.Type Tone { get; set; }
		public float TriggerDistance { get; set; }
		public Vector3 TriggerOffset { get; set; }
		public Instance[] GetCurrentPlayers();
		public ScriptSignal<Instance, Instance> DialogChoiceSelected { get; }
	}
	
	public interface DialogChoice : ICreatableInstance
	{
		public new DialogChoice Clone();
		public bool GoodbyeChoiceActive { get; set; }
		public string GoodbyeDialog { get; set; }
		public string ResponseDialog { get; set; }
		public string UserDialog { get; set; }
	}
	
	public interface Dragger : ICreatableInstance
	{
		public new Dragger Clone();
		public void AxisRotate(Enum.Axis.Type? axis = null);
		public void MouseDown(Instance mousePart, Vector3 pointOnMousePart, Instance[] parts);
		public void MouseMove(Ray mouseRay);
		public void MouseUp();
	}
	
	public interface DraggerService : IServiceInstance
	{
		public new DraggerService Clone();
		public bool AlignDraggedObjects { get; }
		public bool AngleSnapEnabled { get; }
		public float AngleSnapIncrement { get; }
		public bool AnimateHover { get; }
		public bool CollisionsEnabled { get; }
		public Enum.DraggerCoordinateSpace.Type DraggerCoordinateSpace { get; }
		public Enum.DraggerMovementMode.Type DraggerMovementMode { get; }
		public Color3 GeometrySnapColor { get; }
		public float HoverAnimateFrequency { get; }
		public float HoverThickness { get; }
		public bool JointsEnabled { get; }
		public bool LinearSnapEnabled { get; }
		public float LinearSnapIncrement { get; }
		public bool ShowHover { get; }
		public bool ShowPivotIndicator { get; set; }
	}
	
	public interface EditableImage : ICreatableInstance
	{
		public new EditableImage Clone();
		public Vector2 Size { get; set; }
		public EditableImage Copy(Vector2 min, Vector2 max);
		public void Crop(Vector2 min, Vector2 max);
		public void DrawCircle(Vector2 center, int radius, Color3 color, float transparency, Enum.ImageCombineType.Type combineType);
		public void DrawImage(Vector2 position, EditableImage image, Enum.ImageCombineType.Type combineType);
		public void DrawLine(Vector2 p1, Vector2 p2, Color3 color, float transparency, Enum.ImageCombineType.Type combineType);
		public void DrawProjectionImage(EditableMesh mesh, object projection, object brushConfig);
		public void DrawRectangle(Vector2 position, Vector2 size, Color3 color, float transparency, Enum.ImageCombineType.Type combineType);
		public object[] ReadPixels(Vector2 position, Vector2 size);
		public void Resize(Vector2 size);
		public void Rotate(float degrees, bool changeSize);
		public void WritePixels(Vector2 position, Vector2 size, object[] pixels);
	}
	
	public interface RobloxEditableImage : EditableImage, ICreatableInstance
	{
		public new RobloxEditableImage Clone();
	}
	
	public interface EngineAPICloudProcessingService : IServiceInstance
	{
		public new EngineAPICloudProcessingService Clone();
	}
	
	public interface EulerRotationCurve : ICreatableInstance
	{
		public new EulerRotationCurve Clone();
		public Enum.RotationOrder.Type RotationOrder { get; set; }
		public object[] GetAnglesAtTime(float time);
		public CFrame GetRotationAtTime(float time);
		public FloatCurve X();
		public FloatCurve Y();
		public FloatCurve Z();
	}
	
	public interface EventIngestService : IServiceInstance
	{
		public new EventIngestService Clone();
	}
	
	public interface ExampleService : IServiceInstance
	{
		public new ExampleService Clone();
	}
	
	public interface ExperienceAuthService : IServiceInstance
	{
		public new ExperienceAuthService Clone();
	}
	
	public interface ExperienceInviteOptions : ICreatableInstance
	{
		public new ExperienceInviteOptions Clone();
		public string InviteMessageId { get; set; }
		public long InviteUser { get; set; }
		public string LaunchData { get; set; }
		public string PromptMessage { get; set; }
	}
	
	public interface ExperienceNotificationService : IServiceInstance
	{
		public new ExperienceNotificationService Clone();
		public void PromptOptIn();
		public bool CanPromptOptInAsync();
		public ScriptSignal OptInPromptClosed { get; }
	}
	
	public interface ExperienceService : IServiceInstance
	{
		public new ExperienceService Clone();
	}
	
	public interface ExperienceStateCaptureService : IServiceInstance
	{
		public new ExperienceStateCaptureService Clone();
	}
	
	public interface Explosion : ICreatableInstance
	{
		public new Explosion Clone();
		public float BlastPressure { get; set; }
		public float BlastRadius { get; set; }
		public float DestroyJointRadiusPercent { get; set; }
		public Enum.ExplosionType.Type ExplosionType { get; set; }
		public Vector3 Position { get; set; }
		public float TimeScale { get; set; }
		public bool Visible { get; set; }
		public ScriptSignal<BasePart, float> Hit { get; }
	}
	
	public interface FaceAnimatorService : IServiceInstance
	{
		public new FaceAnimatorService Clone();
	}
	
	public interface FaceControls : ICreatableInstance
	{
		public new FaceControls Clone();
	}
	
	public interface FaceInstance : Instance
	{
		public new FaceInstance Clone();
		public Enum.NormalId.Type Face { get; set; }
	}
	
	public interface Decal : FaceInstance, ICreatableInstance
	{
		public new Decal Clone();
		public Color3 Color3 { get; set; }
		public float Shiny { get; set; }
		public float Specular { get; set; }
		public string Texture { get; set; }
		public float Transparency { get; set; }
		public int ZIndex { get; set; }
	}
	
	public interface Texture : Decal, ICreatableInstance
	{
		public new Texture Clone();
		public float OffsetStudsU { get; set; }
		public float OffsetStudsV { get; set; }
		public float StudsPerTileU { get; set; }
		public float StudsPerTileV { get; set; }
	}
	
	public interface FacialAnimationRecordingService : IServiceInstance
	{
		public new FacialAnimationRecordingService Clone();
	}
	
	public interface FacialAnimationStreamingServiceStats : Instance
	{
		public new FacialAnimationStreamingServiceStats Clone();
	}
	
	public interface FacialAnimationStreamingServiceV2 : IServiceInstance
	{
		public new FacialAnimationStreamingServiceV2 Clone();
	}
	
	public interface FacialAnimationStreamingSubsessionStats : Instance
	{
		public new FacialAnimationStreamingSubsessionStats Clone();
	}
	
	public interface Feature : Instance
	{
		public new Feature Clone();
		public Enum.NormalId.Type FaceId { get; set; }
		public Enum.InOut.Type InOut { get; set; }
		public Enum.LeftRight.Type LeftRight { get; set; }
		public Enum.TopBottom.Type TopBottom { get; set; }
	}
	
	public interface Hole : Feature, ICreatableInstance
	{
		public new Hole Clone();
	}
	
	public interface MotorFeature : Feature, ICreatableInstance
	{
		public new MotorFeature Clone();
	}
	
	public interface Fire : ICreatableInstance
	{
		public new Fire Clone();
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public float Heat { get; set; }
		public Color3 SecondaryColor { get; set; }
		public float Size { get; set; }
		public float TimeScale { get; set; }
	}
	
	public interface FloatCurve : ICreatableInstance
	{
		public new FloatCurve Clone();
		public int Length { get; }
		public FloatCurveKey GetKeyAtIndex(int index);
		public object[] GetKeyIndicesAtTime(float time);
		public object[] GetKeys();
		public float? GetValueAtTime(float time);
		public object[] InsertKey(FloatCurveKey key);
		public int RemoveKeyAtIndex(int startingIndex, int? count = null);
		public int SetKeys(object[] keys);
	}
	
	public interface Folder : ICreatableInstance
	{
		public new Folder Clone();
	}
	
	public interface ForceField : ICreatableInstance
	{
		public new ForceField Clone();
		public bool Visible { get; set; }
	}
	
	public interface GamePassService : IServiceInstance
	{
		public new GamePassService Clone();
		public bool PlayerHasPass(Player player, long gamePassId);
	}
	
	public interface GamepadService : IServiceInstance
	{
		public new GamepadService Clone();
		public bool GamepadCursorEnabled { get; }
		public void DisableGamepadCursor();
		public void EnableGamepadCursor(GuiObject guiObject);
	}
	
	public interface GenericChallengeService : IServiceInstance
	{
		public new GenericChallengeService Clone();
	}
	
	public interface GeometryService : IServiceInstance
	{
		public new GeometryService Clone();
		public object[] CalculateConstraintsToPreserve(Instance source, object[] destination, object? options = null);
		public object[] IntersectAsync(BasePart part, object[] parts, object? options = null);
		public object[] SubtractAsync(BasePart part, object[] parts, object? options = null);
		public object[] UnionAsync(BasePart part, object[] parts, object? options = null);
	}
	
	public interface GetTextBoundsParams : ICreatableInstance
	{
		public new GetTextBoundsParams Clone();
		public Font Font { get; set; }
		public bool RichText { get; set; }
		public float Size { get; set; }
		public string Text { get; set; }
		public float Width { get; set; }
	}
	
	public partial interface GlobalDataStore : Instance
	{
		public new GlobalDataStore Clone();
		public ScriptConnection OnUpdate(string key, Action callback);
	}
	
	public interface DataStore : GlobalDataStore
	{
		public new DataStore Clone();
		public object GetVersionAsync(string key, string version);
		public DataStoreKeyPages ListKeysAsync(string prefix, int? pageSize = null, string? cursor = null, bool? excludeDeleted = null);
		public DataStoreVersionPages ListVersionsAsync(string key, Enum.SortDirection.Type? sortDirection = null, long? minDate = null, long? maxDate = null, int? pageSize = null);
		public void RemoveVersionAsync(string key, string version);
	}
	
	public partial interface OrderedDataStore : GlobalDataStore
	{
		public new OrderedDataStore Clone();
	}
	
	public interface GroupService : IServiceInstance
	{
		public new GroupService Clone();
		public StandardPages GetAlliesAsync(long groupId);
		public StandardPages GetEnemiesAsync(long groupId);
		public object GetGroupInfoAsync(long groupId);
		public object[] GetGroupsAsync(long userId);
	}
	
	public interface GuiBase : Instance
	{
		public new GuiBase Clone();
	}
	
	public interface GuiBase2d : GuiBase
	{
		public new GuiBase2d Clone();
		public Vector2 AbsolutePosition { get; }
		public float AbsoluteRotation { get; }
		public Vector2 AbsoluteSize { get; }
		public bool AutoLocalize { get; set; }
		public LocalizationTable? RootLocalizationTable { get; set; }
		public Enum.SelectionBehavior.Type SelectionBehaviorDown { get; set; }
		public Enum.SelectionBehavior.Type SelectionBehaviorLeft { get; set; }
		public Enum.SelectionBehavior.Type SelectionBehaviorRight { get; set; }
		public Enum.SelectionBehavior.Type SelectionBehaviorUp { get; set; }
		public bool SelectionGroup { get; set; }
		public ScriptSignal<bool, GuiObject, GuiObject> SelectionChanged { get; }
	}
	
	public interface GuiObject : GuiBase2d
	{
		public new GuiObject Clone();
		public bool Active { get; set; }
		public Vector2 AnchorPoint { get; set; }
		public Enum.AutomaticSize.Type AutomaticSize { get; set; }
		public Color3 BackgroundColor3 { get; set; }
		public float BackgroundTransparency { get; set; }
		public Color3 BorderColor3 { get; set; }
		public Enum.BorderMode.Type BorderMode { get; set; }
		public int BorderSizePixel { get; set; }
		public bool ClipsDescendants { get; set; }
		public bool Draggable { get; set; }
		public Enum.GuiState.Type GuiState { get; }
		public bool Interactable { get; set; }
		public int LayoutOrder { get; set; }
		public GuiObject? NextSelectionDown { get; set; }
		public GuiObject? NextSelectionLeft { get; set; }
		public GuiObject? NextSelectionRight { get; set; }
		public GuiObject? NextSelectionUp { get; set; }
		public UDim2 Position { get; set; }
		public float Rotation { get; set; }
		public bool Selectable { get; set; }
		public GuiObject? SelectionImageObject { get; set; }
		public int SelectionOrder { get; set; }
		public UDim2 Size { get; set; }
		public Enum.SizeConstraint.Type SizeConstraint { get; set; }
		public bool Visible { get; set; }
		public int ZIndex { get; set; }
		public bool TweenPosition(UDim2 endPosition, Enum.EasingDirection.Type? easingDirection = null, Enum.EasingStyle.Type? easingStyle = null, float? time = null, bool? _override = null, Action? callback = null);
		public bool TweenSize(UDim2 endSize, Enum.EasingDirection.Type? easingDirection = null, Enum.EasingStyle.Type? easingStyle = null, float? time = null, bool? _override = null, Action? callback = null);
		public bool TweenSizeAndPosition(UDim2 endSize, UDim2 endPosition, Enum.EasingDirection.Type? easingDirection = null, Enum.EasingStyle.Type? easingStyle = null, float? time = null, bool? _override = null, Action? callback = null);
		public ScriptSignal<UDim2> DragBegin { get; }
		public ScriptSignal<int, int> DragStopped { get; }
		public ScriptSignal<InputObject> InputBegan { get; }
		public ScriptSignal<InputObject> InputChanged { get; }
		public ScriptSignal<InputObject> InputEnded { get; }
		public ScriptSignal<int, int> MouseEnter { get; }
		public ScriptSignal<int, int> MouseLeave { get; }
		public ScriptSignal<int, int> MouseMoved { get; }
		public ScriptSignal<int, int> MouseWheelBackward { get; }
		public ScriptSignal<int, int> MouseWheelForward { get; }
		public ScriptSignal SelectionGained { get; }
		public ScriptSignal SelectionLost { get; }
		public ScriptSignal<object[], Enum.UserInputState.Type> TouchLongPress { get; }
		public ScriptSignal<object[], Vector2, Vector2, Enum.UserInputState.Type> TouchPan { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState.Type> TouchPinch { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState.Type> TouchRotate { get; }
		public ScriptSignal<Enum.SwipeDirection.Type, int> TouchSwipe { get; }
		public ScriptSignal<object[]> TouchTap { get; }
	}
	
	public interface CanvasGroup : GuiObject, ICreatableInstance
	{
		public new CanvasGroup Clone();
		public Color3 GroupColor3 { get; set; }
		public float GroupTransparency { get; set; }
	}
	
	public interface Frame : GuiObject, ICreatableInstance
	{
		public new Frame Clone();
		public Enum.FrameStyle.Type Style { get; set; }
	}
	
	public interface GuiButton : GuiObject
	{
		public new GuiButton Clone();
		public bool AutoButtonColor { get; set; }
		public bool Modal { get; set; }
		public bool Selected { get; set; }
		public Enum.ButtonStyle.Type Style { get; set; }
		public ScriptSignal<InputObject, int> Activated { get; }
		public ScriptSignal MouseButton1Click { get; }
		public ScriptSignal<int, int> MouseButton1Down { get; }
		public ScriptSignal<int, int> MouseButton1Up { get; }
		public ScriptSignal MouseButton2Click { get; }
		public ScriptSignal<int, int> MouseButton2Down { get; }
		public ScriptSignal<int, int> MouseButton2Up { get; }
	}
	
	public interface ImageButton : GuiButton, ICreatableInstance
	{
		public new ImageButton Clone();
		public string HoverImage { get; set; }
		public string Image { get; set; }
		public Color3 ImageColor3 { get; set; }
		public Vector2 ImageRectOffset { get; set; }
		public Vector2 ImageRectSize { get; set; }
		public float ImageTransparency { get; set; }
		public bool IsLoaded { get; }
		public string PressedImage { get; set; }
		public Enum.ResamplerMode.Type ResampleMode { get; set; }
		public Enum.ScaleType.Type ScaleType { get; set; }
		public Rect SliceCenter { get; set; }
		public float SliceScale { get; set; }
		public UDim2 TileSize { get; set; }
	}
	
	public interface TextButton : GuiButton, ICreatableInstance
	{
		public new TextButton Clone();
		public string ContentText { get; }
		public Font FontFace { get; set; }
		public Enum.FontSize.Type FontSize { get; set; }
		public float LineHeight { get; set; }
		public int MaxVisibleGraphemes { get; set; }
		public string OpenTypeFeatures { get; set; }
		public string OpenTypeFeaturesError { get; }
		public bool RichText { get; set; }
		public string Text { get; set; }
		public Vector2 TextBounds { get; }
		public Color3 TextColor3 { get; set; }
		public Enum.TextDirection.Type TextDirection { get; set; }
		public bool TextFits { get; }
		public bool TextScaled { get; set; }
		public float TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
		public float TextTransparency { get; set; }
		public Enum.TextTruncate.Type TextTruncate { get; set; }
		public bool TextWrap { get; set; }
		public bool TextWrapped { get; set; }
		public Enum.TextXAlignment.Type TextXAlignment { get; set; }
		public Enum.TextYAlignment.Type TextYAlignment { get; set; }
	}
	
	public interface GuiLabel : GuiObject
	{
		public new GuiLabel Clone();
	}
	
	public interface ImageLabel : GuiLabel, ICreatableInstance
	{
		public new ImageLabel Clone();
		public string Image { get; set; }
		public Color3 ImageColor3 { get; set; }
		public Vector2 ImageRectOffset { get; set; }
		public Vector2 ImageRectSize { get; set; }
		public float ImageTransparency { get; set; }
		public bool IsLoaded { get; }
		public Enum.ResamplerMode.Type ResampleMode { get; set; }
		public Enum.ScaleType.Type ScaleType { get; set; }
		public Rect SliceCenter { get; set; }
		public float SliceScale { get; set; }
		public UDim2 TileSize { get; set; }
	}
	
	public interface TextLabel : GuiLabel, ICreatableInstance
	{
		public new TextLabel Clone();
		public string ContentText { get; }
		public Font FontFace { get; set; }
		public Enum.FontSize.Type FontSize { get; set; }
		public float LineHeight { get; set; }
		public int MaxVisibleGraphemes { get; set; }
		public string OpenTypeFeatures { get; set; }
		public string OpenTypeFeaturesError { get; }
		public bool RichText { get; set; }
		public string Text { get; set; }
		public Vector2 TextBounds { get; }
		public Color3 TextColor3 { get; set; }
		public Enum.TextDirection.Type TextDirection { get; set; }
		public bool TextFits { get; }
		public bool TextScaled { get; set; }
		public float TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
		public float TextTransparency { get; set; }
		public Enum.TextTruncate.Type TextTruncate { get; set; }
		public bool TextWrap { get; set; }
		public bool TextWrapped { get; set; }
		public Enum.TextXAlignment.Type TextXAlignment { get; set; }
		public Enum.TextYAlignment.Type TextYAlignment { get; set; }
	}
	
	public interface ScrollingFrame : GuiObject, ICreatableInstance
	{
		public new ScrollingFrame Clone();
		public Vector2 AbsoluteCanvasSize { get; }
		public Vector2 AbsoluteWindowSize { get; }
		public Enum.AutomaticSize.Type AutomaticCanvasSize { get; set; }
		public string BottomImage { get; set; }
		public Vector2 CanvasPosition { get; set; }
		public UDim2 CanvasSize { get; set; }
		public Enum.ElasticBehavior.Type ElasticBehavior { get; set; }
		public Enum.ScrollBarInset.Type HorizontalScrollBarInset { get; set; }
		public string MidImage { get; set; }
		public Color3 ScrollBarImageColor3 { get; set; }
		public float ScrollBarImageTransparency { get; set; }
		public int ScrollBarThickness { get; set; }
		public Enum.ScrollingDirection.Type ScrollingDirection { get; set; }
		public bool ScrollingEnabled { get; set; }
		public string TopImage { get; set; }
		public Enum.ScrollBarInset.Type VerticalScrollBarInset { get; set; }
		public Enum.VerticalScrollBarPosition.Type VerticalScrollBarPosition { get; set; }
	}
	
	public interface TextBox : GuiObject, ICreatableInstance
	{
		public new TextBox Clone();
		public bool ClearTextOnFocus { get; set; }
		public string ContentText { get; }
		public int CursorPosition { get; set; }
		public Font FontFace { get; set; }
		public Enum.FontSize.Type FontSize { get; set; }
		public float LineHeight { get; set; }
		public int MaxVisibleGraphemes { get; set; }
		public bool MultiLine { get; set; }
		public string OpenTypeFeatures { get; set; }
		public string OpenTypeFeaturesError { get; }
		public Color3 PlaceholderColor3 { get; set; }
		public string PlaceholderText { get; set; }
		public bool RichText { get; set; }
		public int SelectionStart { get; set; }
		public bool ShowNativeInput { get; set; }
		public string Text { get; set; }
		public Vector2 TextBounds { get; }
		public Color3 TextColor3 { get; set; }
		public Enum.TextDirection.Type TextDirection { get; set; }
		public bool TextEditable { get; set; }
		public bool TextFits { get; }
		public bool TextScaled { get; set; }
		public float TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
		public float TextTransparency { get; set; }
		public Enum.TextTruncate.Type TextTruncate { get; set; }
		public bool TextWrap { get; set; }
		public bool TextWrapped { get; set; }
		public Enum.TextXAlignment.Type TextXAlignment { get; set; }
		public Enum.TextYAlignment.Type TextYAlignment { get; set; }
		public void CaptureFocus();
		public bool IsFocused();
		public void ReleaseFocus(bool? submitted = null);
		public ScriptSignal<bool, InputObject> FocusLost { get; }
		public ScriptSignal Focused { get; }
		public ScriptSignal ReturnPressedFromOnScreenKeyboard { get; }
	}
	
	public interface VideoFrame : GuiObject, ICreatableInstance
	{
		public new VideoFrame Clone();
		public bool IsLoaded { get; }
		public bool Looped { get; set; }
		public bool Playing { get; set; }
		public Vector2 Resolution { get; }
		public float TimeLength { get; }
		public float TimePosition { get; set; }
		public string Video { get; set; }
		public float Volume { get; set; }
		public void Pause();
		public void Play();
		public ScriptSignal<string> DidLoop { get; }
		public ScriptSignal<string> Ended { get; }
		public ScriptSignal<string> Loaded { get; }
		public ScriptSignal<string> Paused { get; }
		public ScriptSignal<string> Played { get; }
	}
	
	public interface ViewportFrame : GuiObject, ICreatableInstance
	{
		public new ViewportFrame Clone();
		public Color3 Ambient { get; set; }
		public Camera? CurrentCamera { get; set; }
		public Color3 ImageColor3 { get; set; }
		public float ImageTransparency { get; set; }
		public Color3 LightColor { get; set; }
		public Vector3 LightDirection { get; set; }
	}
	
	public interface LayerCollector : GuiBase2d
	{
		public new LayerCollector Clone();
		public bool Enabled { get; set; }
		public bool ResetOnSpawn { get; set; }
		public Enum.ZIndexBehavior.Type ZIndexBehavior { get; set; }
		public object GetLayoutNodeTree();
	}
	
	public interface BillboardGui : LayerCollector, ICreatableInstance
	{
		public new BillboardGui Clone();
		public bool Active { get; set; }
		public Instance? Adornee { get; set; }
		public bool AlwaysOnTop { get; set; }
		public float Brightness { get; set; }
		public bool ClipsDescendants { get; set; }
		public float CurrentDistance { get; }
		public float DistanceLowerLimit { get; set; }
		public float DistanceStep { get; set; }
		public float DistanceUpperLimit { get; set; }
		public Vector3 ExtentsOffset { get; set; }
		public Vector3 ExtentsOffsetWorldSpace { get; set; }
		public float LightInfluence { get; set; }
		public float MaxDistance { get; set; }
		public Instance? PlayerToHideFrom { get; set; }
		public UDim2 Size { get; set; }
		public Vector2 SizeOffset { get; set; }
		public Vector3 StudsOffset { get; set; }
		public Vector3 StudsOffsetWorldSpace { get; set; }
	}
	
	public interface ScreenGui : LayerCollector, ICreatableInstance
	{
		public new ScreenGui Clone();
		public bool ClipToDeviceSafeArea { get; set; }
		public int DisplayOrder { get; set; }
		public bool IgnoreGuiInset { get; set; }
		public Enum.SafeAreaCompatibility.Type SafeAreaCompatibility { get; set; }
		public Enum.ScreenInsets.Type ScreenInsets { get; set; }
	}
	
	public interface SurfaceGuiBase : LayerCollector
	{
		public new SurfaceGuiBase Clone();
		public bool Active { get; set; }
		public Instance? Adornee { get; set; }
		public Enum.NormalId.Type Face { get; set; }
	}
	
	public interface AdGui : SurfaceGuiBase, ICreatableInstance
	{
		public new AdGui Clone();
		public Enum.AdShape.Type AdShape { get; set; }
		public bool EnableVideoAds { get; set; }
		public string FallbackImage { get; set; }
		public Enum.AdUnitStatus.Type Status { get; }
	}
	
	public interface SurfaceGui : SurfaceGuiBase, ICreatableInstance
	{
		public new SurfaceGui Clone();
		public bool AlwaysOnTop { get; set; }
		public float Brightness { get; set; }
		public Vector2 CanvasSize { get; set; }
		public bool ClipsDescendants { get; set; }
		public float LightInfluence { get; set; }
		public float MaxDistance { get; set; }
		public float PixelsPerStud { get; set; }
		public Enum.SurfaceGuiSizingMode.Type SizingMode { get; set; }
		public float ToolPunchThroughDistance { get; set; }
		public float ZOffset { get; set; }
	}
	
	public interface GuiBase3d : GuiBase
	{
		public new GuiBase3d Clone();
		public Color3 Color3 { get; set; }
		public float Transparency { get; set; }
		public bool Visible { get; set; }
	}
	
	public interface FloorWire : GuiBase3d, ICreatableInstance
	{
		public new FloorWire Clone();
		public float CycleOffset { get; set; }
		public BasePart? From { get; set; }
		public float StudsBetweenTextures { get; set; }
		public string Texture { get; set; }
		public Vector2 TextureSize { get; set; }
		public BasePart? To { get; set; }
		public float Velocity { get; set; }
		public float WireRadius { get; set; }
	}
	
	public interface InstanceAdornment : GuiBase3d
	{
		public new InstanceAdornment Clone();
		public Instance? Adornee { get; set; }
	}
	
	public interface SelectionBox : InstanceAdornment, ICreatableInstance
	{
		public new SelectionBox Clone();
		public float LineThickness { get; set; }
		public Color3 SurfaceColor3 { get; set; }
		public float SurfaceTransparency { get; set; }
	}
	
	public interface PVAdornment : GuiBase3d
	{
		public new PVAdornment Clone();
		public PVInstance? Adornee { get; set; }
	}
	
	public interface HandleAdornment : PVAdornment
	{
		public new HandleAdornment Clone();
		public Enum.AdornCullingMode.Type AdornCullingMode { get; set; }
		public bool AlwaysOnTop { get; set; }
		public CFrame CFrame { get; set; }
		public Vector3 SizeRelativeOffset { get; set; }
		public int ZIndex { get; set; }
		public ScriptSignal MouseButton1Down { get; }
		public ScriptSignal MouseButton1Up { get; }
		public ScriptSignal MouseEnter { get; }
		public ScriptSignal MouseLeave { get; }
	}
	
	public interface BoxHandleAdornment : HandleAdornment, ICreatableInstance
	{
		public new BoxHandleAdornment Clone();
		public Vector3 Size { get; set; }
	}
	
	public interface ConeHandleAdornment : HandleAdornment, ICreatableInstance
	{
		public new ConeHandleAdornment Clone();
		public float Height { get; set; }
		public float Radius { get; set; }
	}
	
	public interface CylinderHandleAdornment : HandleAdornment, ICreatableInstance
	{
		public new CylinderHandleAdornment Clone();
		public float Angle { get; set; }
		public float Height { get; set; }
		public float InnerRadius { get; set; }
		public float Radius { get; set; }
	}
	
	public interface ImageHandleAdornment : HandleAdornment, ICreatableInstance
	{
		public new ImageHandleAdornment Clone();
		public string Image { get; set; }
		public Vector2 Size { get; set; }
	}
	
	public interface LineHandleAdornment : HandleAdornment, ICreatableInstance
	{
		public new LineHandleAdornment Clone();
		public float Length { get; set; }
		public float Thickness { get; set; }
	}
	
	public interface SphereHandleAdornment : HandleAdornment, ICreatableInstance
	{
		public new SphereHandleAdornment Clone();
		public float Radius { get; set; }
	}
	
	public interface WireframeHandleAdornment : HandleAdornment, ICreatableInstance
	{
		public new WireframeHandleAdornment Clone();
		public Vector3 Scale { get; set; }
		public void AddLine(Vector3 from, Vector3 to);
		public void AddLines(object[] points);
		public void AddPath(object[] points, bool loop);
		public void AddText(Vector3 point, string text, int? size = null);
		public void Clear();
	}
	
	public interface ParabolaAdornment : PVAdornment
	{
		public new ParabolaAdornment Clone();
	}
	
	public interface SelectionSphere : PVAdornment, ICreatableInstance
	{
		public new SelectionSphere Clone();
		public Color3 SurfaceColor3 { get; set; }
		public float SurfaceTransparency { get; set; }
	}
	
	public interface PartAdornment : GuiBase3d
	{
		public new PartAdornment Clone();
		public BasePart? Adornee { get; set; }
	}
	
	public interface HandlesBase : PartAdornment
	{
		public new HandlesBase Clone();
	}
	
	public interface ArcHandles : HandlesBase, ICreatableInstance
	{
		public new ArcHandles Clone();
		public Axes Axes { get; set; }
		public ScriptSignal<Enum.Axis.Type> MouseButton1Down { get; }
		public ScriptSignal<Enum.Axis.Type> MouseButton1Up { get; }
		public ScriptSignal<Enum.Axis.Type, float, float> MouseDrag { get; }
		public ScriptSignal<Enum.Axis.Type> MouseEnter { get; }
		public ScriptSignal<Enum.Axis.Type> MouseLeave { get; }
	}
	
	public interface Handles : HandlesBase, ICreatableInstance
	{
		public new Handles Clone();
		public Faces Faces { get; set; }
		public Enum.HandlesStyle.Type Style { get; set; }
		public ScriptSignal<Enum.NormalId.Type> MouseButton1Down { get; }
		public ScriptSignal<Enum.NormalId.Type> MouseButton1Up { get; }
		public ScriptSignal<Enum.NormalId.Type, float> MouseDrag { get; }
		public ScriptSignal<Enum.NormalId.Type> MouseEnter { get; }
		public ScriptSignal<Enum.NormalId.Type> MouseLeave { get; }
	}
	
	public interface SurfaceSelection : PartAdornment, ICreatableInstance
	{
		public new SurfaceSelection Clone();
		public Enum.NormalId.Type TargetSurface { get; set; }
	}
	
	public interface SelectionLasso : GuiBase3d
	{
		public new SelectionLasso Clone();
		public Humanoid? Humanoid { get; set; }
	}
	
	public interface SelectionPartLasso : SelectionLasso, ICreatableInstance
	{
		public new SelectionPartLasso Clone();
		public BasePart? Part { get; set; }
	}
	
	public interface SelectionPointLasso : SelectionLasso, ICreatableInstance
	{
		public new SelectionPointLasso Clone();
		public Vector3 Point { get; set; }
	}
	
	public interface Path2D : GuiBase, ICreatableInstance
	{
		public new Path2D Clone();
		public bool Closed { get; set; }
		public Color3 Color3 { get; set; }
		public float Thickness { get; set; }
		public bool Visible { get; set; }
		public int ZIndex { get; set; }
		public Rect GetBoundingRect();
		public Path2DControlPoint GetControlPoint(int index);
		public object[] GetControlPoints();
		public float GetLength();
		public int GetMaxControlPoints();
		public UDim2 GetPositionOnCurve(float t);
		public UDim2 GetPositionOnCurveArcLength(float t);
		public Vector2 GetTangentOnCurve(float t);
		public Vector2 GetTangentOnCurveArcLength(float t);
		public void InsertControlPoint(int index, Path2DControlPoint point);
		public void RemoveControlPoint(int index);
		public void SetControlPoints(object[] controlPoints);
		public void UpdateControlPoint(int index, Path2DControlPoint point);
		public ScriptSignal ControlPointChanged { get; }
	}
	
	public interface GuiService : IServiceInstance
	{
		public new GuiService Clone();
		public bool AutoSelectGuiEnabled { get; set; }
		public bool GuiNavigationEnabled { get; set; }
		public bool IsModalDialog { get; }
		public bool IsWindows { get; }
		public bool MenuIsOpen { get; }
		public Enum.PreferredTextSize.Type PreferredTextSize { get; }
		public GuiObject? SelectedObject { get; set; }
		public Rect TopbarInset { get; }
		public bool TouchControlsEnabled { get; set; }
		public void AddSelectionParent(string selectionName, Instance selectionParent);
		public void AddSelectionTuple(string selectionName, object selections);
		public void CloseInspectMenu();
		public bool GetEmotesMenuOpen();
		public bool GetGameplayPausedNotificationEnabled();
		public object GetGuiInset();
		public bool GetInspectMenuEnabled();
		public void InspectPlayerFromHumanoidDescription(HumanoidDescription humanoidDescription, string name);
		public void InspectPlayerFromUserId(long userId);
		public bool IsTenFootInterface();
		public void RemoveSelectionGroup(string selectionName);
		public void Select(Instance selectionParent);
		public void SetEmotesMenuOpen(bool isOpen);
		public void SetGameplayPausedNotificationEnabled(bool enabled);
		public void SetInspectMenuEnabled(bool enabled);
		public ScriptSignal MenuClosed { get; }
		public ScriptSignal MenuOpened { get; }
	}
	
	public interface HapticService : IServiceInstance
	{
		public new HapticService Clone();
		public object GetMotor(Enum.UserInputType.Type inputType, Enum.VibrationMotor.Type vibrationMotor);
		public bool IsMotorSupported(Enum.UserInputType.Type inputType, Enum.VibrationMotor.Type vibrationMotor);
		public bool IsVibrationSupported(Enum.UserInputType.Type inputType);
		public void SetMotor(Enum.UserInputType.Type inputType, Enum.VibrationMotor.Type vibrationMotor, object vibrationValues);
	}
	
	public interface HeatmapService : IServiceInstance
	{
		public new HeatmapService Clone();
	}
	
	public interface HeightmapImporterService : IServiceInstance
	{
		public new HeightmapImporterService Clone();
	}
	
	public interface HiddenSurfaceRemovalAsset : ICreatableInstance
	{
		public new HiddenSurfaceRemovalAsset Clone();
	}
	
	public interface Highlight : ICreatableInstance
	{
		public new Highlight Clone();
		public Instance? Adornee { get; set; }
		public Enum.HighlightDepthMode.Type DepthMode { get; set; }
		public bool Enabled { get; set; }
		public Color3 FillColor { get; set; }
		public float FillTransparency { get; set; }
		public Color3 OutlineColor { get; set; }
		public float OutlineTransparency { get; set; }
	}
	
	public interface HttpService : IServiceInstance
	{
		public new HttpService Clone();
		public bool HttpEnabled { get; }
		public string GenerateGUID(bool? wrapInCurlyBraces = null);
		public Secret GetSecret(string key);
		public object JSONDecode(string input);
		public string JSONEncode(object input);
		public string UrlEncode(string input);
		public string GetAsync(object url, bool? nocache = null, object? headers = null);
		public string PostAsync(object url, string data, Enum.HttpContentType.Type? content_type = null, bool? compress = null, object? headers = null);
		public object RequestAsync(object requestOptions);
	}
	
	public interface Humanoid : ICreatableInstance
	{
		public new Humanoid Clone();
		public bool AutoJumpEnabled { get; set; }
		public bool AutoRotate { get; set; }
		public bool AutomaticScalingEnabled { get; set; }
		public bool BreakJointsOnDeath { get; set; }
		public Vector3 CameraOffset { get; set; }
		public Enum.HumanoidCollisionType.Type CollisionType { get; set; }
		public Enum.HumanoidDisplayDistanceType.Type DisplayDistanceType { get; set; }
		public string DisplayName { get; set; }
		public bool EvaluateStateMachine { get; set; }
		public Enum.Material.Type FloorMaterial { get; }
		public float Health { get; set; }
		public float HealthDisplayDistance { get; set; }
		public Enum.HumanoidHealthDisplayType.Type HealthDisplayType { get; set; }
		public float HipHeight { get; set; }
		public bool Jump { get; set; }
		public float JumpHeight { get; set; }
		public float JumpPower { get; set; }
		public float MaxHealth { get; set; }
		public float MaxSlopeAngle { get; set; }
		public Vector3 MoveDirection { get; }
		public float NameDisplayDistance { get; set; }
		public Enum.NameOcclusion.Type NameOcclusion { get; set; }
		public bool PlatformStand { get; set; }
		public bool RequiresNeck { get; set; }
		public Enum.HumanoidRigType.Type RigType { get; set; }
		public BasePart? RootPart { get; }
		public BasePart? SeatPart { get; }
		public bool Sit { get; set; }
		public Vector3 TargetPoint { get; set; }
		public bool UseJumpPower { get; set; }
		public float WalkSpeed { get; set; }
		public BasePart? WalkToPart { get; set; }
		public Vector3 WalkToPoint { get; set; }
		public void AddAccessory(Accessory accessory);
		public bool AddCustomStatus(string status);
		public bool AddStatus(Enum.Status.Type? status = null);
		public void BuildRigFromAttachments();
		public void ChangeState(Enum.HumanoidStateType.Type? state = null);
		public void EquipTool(Tool tool);
		public object[] GetAccessories();
		public HumanoidDescription GetAppliedDescription();
		public Enum.BodyPartR15.Type GetBodyPartR15(BasePart part);
		public Enum.Limb.Type GetLimb(BasePart part);
		public Vector3 GetMoveVelocity();
		public object[] GetPlayingAnimationTracks();
		public Enum.HumanoidStateType.Type GetState();
		public bool GetStateEnabled(Enum.HumanoidStateType.Type state);
		public object[] GetStatuses();
		public bool HasCustomStatus(string status);
		public bool HasStatus(Enum.Status.Type? status = null);
		public AnimationTrack LoadAnimation(Animation animation);
		public void Move(Vector3 moveDirection, bool? relativeToCamera = null);
		public void MoveTo(Vector3 location, BasePart? part = null);
		public void RemoveAccessories();
		public bool RemoveCustomStatus(string status);
		public bool RemoveStatus(Enum.Status.Type? status = null);
		public bool ReplaceBodyPartR15(Enum.BodyPartR15.Type bodyPart, BasePart part);
		public void SetStateEnabled(Enum.HumanoidStateType.Type state, bool enabled);
		public void TakeDamage(float amount);
		public void UnequipTools();
		public void ApplyDescription(HumanoidDescription humanoidDescription, Enum.AssetTypeVerification.Type? assetTypeVerification = null);
		public void ApplyDescriptionReset(HumanoidDescription humanoidDescription, Enum.AssetTypeVerification.Type? assetTypeVerification = null);
		public bool PlayEmote(string emoteName);
		public ScriptSignal<AnimationTrack> AnimationPlayed { get; }
		public ScriptSignal<HumanoidDescription> ApplyDescriptionFinished { get; }
		public ScriptSignal<float> Climbing { get; }
		public ScriptSignal<string> CustomStatusAdded { get; }
		public ScriptSignal<string> CustomStatusRemoved { get; }
		public ScriptSignal Died { get; }
		public ScriptSignal<bool> FallingDown { get; }
		public ScriptSignal<bool> FreeFalling { get; }
		public ScriptSignal<bool> GettingUp { get; }
		public ScriptSignal<float> HealthChanged { get; }
		public ScriptSignal<bool> Jumping { get; }
		public ScriptSignal<bool> MoveToFinished { get; }
		public ScriptSignal<bool> PlatformStanding { get; }
		public ScriptSignal<bool> Ragdoll { get; }
		public ScriptSignal<float> Running { get; }
		public ScriptSignal<bool, BasePart> Seated { get; }
		public ScriptSignal<Enum.HumanoidStateType.Type, Enum.HumanoidStateType.Type> StateChanged { get; }
		public ScriptSignal<Enum.HumanoidStateType.Type, bool> StateEnabledChanged { get; }
		public ScriptSignal<Enum.Status.Type> StatusAdded { get; }
		public ScriptSignal<Enum.Status.Type> StatusRemoved { get; }
		public ScriptSignal<bool> Strafing { get; }
		public ScriptSignal<float> Swimming { get; }
		public ScriptSignal<BasePart, BasePart> Touched { get; }
	}
	
	public interface HumanoidDescription : ICreatableInstance
	{
		public new HumanoidDescription Clone();
		public string BackAccessory { get; set; }
		public float BodyTypeScale { get; set; }
		public long ClimbAnimation { get; set; }
		public float DepthScale { get; set; }
		public long Face { get; set; }
		public string FaceAccessory { get; set; }
		public long FallAnimation { get; set; }
		public string FrontAccessory { get; set; }
		public long GraphicTShirt { get; set; }
		public string HairAccessory { get; set; }
		public string HatAccessory { get; set; }
		public long Head { get; set; }
		public Color3 HeadColor { get; set; }
		public float HeadScale { get; set; }
		public float HeightScale { get; set; }
		public long IdleAnimation { get; set; }
		public long JumpAnimation { get; set; }
		public long LeftArm { get; set; }
		public Color3 LeftArmColor { get; set; }
		public long LeftLeg { get; set; }
		public Color3 LeftLegColor { get; set; }
		public long MoodAnimation { get; set; }
		public string NeckAccessory { get; set; }
		public long Pants { get; set; }
		public float ProportionScale { get; set; }
		public long RightArm { get; set; }
		public Color3 RightArmColor { get; set; }
		public long RightLeg { get; set; }
		public Color3 RightLegColor { get; set; }
		public long RunAnimation { get; set; }
		public long Shirt { get; set; }
		public string ShouldersAccessory { get; set; }
		public long SwimAnimation { get; set; }
		public long Torso { get; set; }
		public Color3 TorsoColor { get; set; }
		public string WaistAccessory { get; set; }
		public long WalkAnimation { get; set; }
		public float WidthScale { get; set; }
		public void AddEmote(string name, long assetId);
		public object[] GetAccessories(bool includeRigidAccessories);
		public object GetEmotes();
		public object[] GetEquippedEmotes();
		public void RemoveEmote(string name);
		public void SetAccessories(object[] accessories, bool includeRigidAccessories);
		public void SetEmotes(object emotes);
		public void SetEquippedEmotes(object[] equippedEmotes);
		public ScriptSignal<object> EmotesChanged { get; }
		public ScriptSignal<object[]> EquippedEmotesChanged { get; }
	}
	
	public interface IKControl : ICreatableInstance
	{
		public new IKControl Clone();
		public Instance? ChainRoot { get; set; }
		public bool Enabled { get; set; }
		public Instance? EndEffector { get; set; }
		public CFrame EndEffectorOffset { get; set; }
		public CFrame Offset { get; set; }
		public Instance? Pole { get; set; }
		public int Priority { get; set; }
		public float SmoothTime { get; set; }
		public Instance? Target { get; set; }
		public Enum.IKControlType.Type Type { get; set; }
		public float Weight { get; set; }
		public int GetChainCount();
		public float GetChainLength();
		public CFrame GetNodeLocalCFrame(int index);
		public CFrame GetNodeWorldCFrame(int index);
		public CFrame GetRawFinalTarget();
		public CFrame GetSmoothedFinalTarget();
	}
	
	public interface ILegacyStudioBridge : IServiceInstance
	{
		public new ILegacyStudioBridge Clone();
	}
	
	public interface LegacyStudioBridge : ILegacyStudioBridge, IServiceInstance
	{
		public new LegacyStudioBridge Clone();
	}
	
	public interface IXPService : IServiceInstance
	{
		public new IXPService Clone();
	}
	
	public interface IncrementalPatchBuilder : IServiceInstance
	{
		public new IncrementalPatchBuilder Clone();
		public bool AddPathsToBundle { get; set; }
		public float BuildDebouncePeriod { get; set; }
		public bool HighCompression { get; set; }
		public bool SerializePatch { get; set; }
		public bool ZstdCompression { get; set; }
	}
	
	public interface InputObject : Instance
	{
		public new InputObject Clone();
		public Vector3 Delta { get; set; }
		public Enum.KeyCode.Type KeyCode { get; set; }
		public Vector3 Position { get; set; }
		public Enum.UserInputState.Type UserInputState { get; set; }
		public Enum.UserInputType.Type UserInputType { get; set; }
		public bool IsModifierKeyDown(Enum.ModifierKey.Type modifierKey);
	}
	
	public interface InsertService : IServiceInstance
	{
		public new InsertService Clone();
		public bool AllowInsertFreeModels { get; set; }
		public void ApproveAssetId(long assetId);
		public void ApproveAssetVersionId(long assetVersionId);
		public void Insert(Instance instance);
		public MeshPart CreateMeshPartAsync(string meshId, Enum.CollisionFidelity.Type collisionFidelity, Enum.RenderFidelity.Type renderFidelity);
		public object[] GetBaseCategories();
		public object[] GetBaseSets();
		public object[] GetCollection(long categoryId);
		public object[] GetFreeDecals(string searchText, int pageNum);
		public object[] GetFreeModels(string searchText, int pageNum);
		public long GetLatestAssetVersionAsync(long assetId);
		public object[] GetUserCategories(long userId);
		public object[] GetUserSets(long userId);
		public Instance LoadAsset(long assetId);
		public Instance LoadAssetVersion(long assetVersionId);
	}
	
	public interface InternalSyncItem : ICreatableInstance
	{
		public new InternalSyncItem Clone();
	}
	
	public interface InternalSyncService : IServiceInstance
	{
		public new InternalSyncService Clone();
	}
	
	public interface JointInstance : Instance
	{
		public new JointInstance Clone();
		public bool Active { get; }
		public CFrame C0 { get; set; }
		public CFrame C1 { get; set; }
		public bool Enabled { get; set; }
		public BasePart? Part0 { get; set; }
		public BasePart? Part1 { get; set; }
	}
	
	public interface DynamicRotate : JointInstance
	{
		public new DynamicRotate Clone();
		public float BaseAngle { get; set; }
	}
	
	public interface RotateP : DynamicRotate, ICreatableInstance
	{
		public new RotateP Clone();
	}
	
	public interface RotateV : DynamicRotate, ICreatableInstance
	{
		public new RotateV Clone();
	}
	
	public interface Glue : JointInstance, ICreatableInstance
	{
		public new Glue Clone();
		public Vector3 F0 { get; set; }
		public Vector3 F1 { get; set; }
		public Vector3 F2 { get; set; }
		public Vector3 F3 { get; set; }
	}
	
	public interface ManualSurfaceJointInstance : JointInstance
	{
		public new ManualSurfaceJointInstance Clone();
	}
	
	public interface ManualGlue : ManualSurfaceJointInstance, ICreatableInstance
	{
		public new ManualGlue Clone();
	}
	
	public interface ManualWeld : ManualSurfaceJointInstance, ICreatableInstance
	{
		public new ManualWeld Clone();
	}
	
	public interface Motor : JointInstance, ICreatableInstance
	{
		public new Motor Clone();
		public float CurrentAngle { get; set; }
		public float DesiredAngle { get; set; }
		public float MaxVelocity { get; set; }
		public void SetDesiredAngle(float value);
	}
	
	public interface Motor6D : Motor, ICreatableInstance
	{
		public new Motor6D Clone();
	}
	
	public interface Rotate : JointInstance, ICreatableInstance
	{
		public new Rotate Clone();
	}
	
	public interface Snap : JointInstance, ICreatableInstance
	{
		public new Snap Clone();
	}
	
	public interface VelocityMotor : JointInstance, ICreatableInstance
	{
		public new VelocityMotor Clone();
		public float CurrentAngle { get; set; }
		public float DesiredAngle { get; set; }
		public Hole? Hole { get; set; }
		public float MaxVelocity { get; set; }
	}
	
	public interface Weld : JointInstance, ICreatableInstance
	{
		public new Weld Clone();
	}
	
	public interface JointsService : IServiceInstance
	{
		public new JointsService Clone();
		public void ClearJoinAfterMoveJoints();
		public void CreateJoinAfterMoveJoints();
		public void SetJoinAfterMoveInstance(Instance joinInstance);
		public void SetJoinAfterMoveTarget(Instance joinTarget);
		public void ShowPermissibleJoints();
	}
	
	public interface Keyframe : ICreatableInstance
	{
		public new Keyframe Clone();
		public float Time { get; set; }
		public void AddMarker(Instance marker);
		public void AddPose(Pose pose);
		public Instance[] GetMarkers();
		public Instance[] GetPoses();
		public void RemoveMarker(Instance marker);
		public void RemovePose(Pose pose);
	}
	
	public interface KeyframeMarker : ICreatableInstance
	{
		public new KeyframeMarker Clone();
		public string Value { get; set; }
	}
	
	public partial interface KeyframeSequenceProvider : IServiceInstance
	{
		public new KeyframeSequenceProvider Clone();
		public string RegisterActiveKeyframeSequence(KeyframeSequence keyframeSequence);
		public string RegisterKeyframeSequence(KeyframeSequence keyframeSequence);
		public Instance GetAnimations(long userId);
		public Instance GetKeyframeSequenceAsync(string assetId);
	}
	
	public interface LSPFileSyncService : IServiceInstance
	{
		public new LSPFileSyncService Clone();
	}
	
	public interface LanguageService : IServiceInstance
	{
		public new LanguageService Clone();
	}
	
	public interface Light : Instance
	{
		public new Light Clone();
		public float Brightness { get; set; }
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public bool Shadows { get; set; }
	}
	
	public interface PointLight : Light, ICreatableInstance
	{
		public new PointLight Clone();
		public float Range { get; set; }
	}
	
	public interface SpotLight : Light, ICreatableInstance
	{
		public new SpotLight Clone();
		public float Angle { get; set; }
		public Enum.NormalId.Type Face { get; set; }
		public float Range { get; set; }
	}
	
	public interface SurfaceLight : Light, ICreatableInstance
	{
		public new SurfaceLight Clone();
		public float Angle { get; set; }
		public Enum.NormalId.Type Face { get; set; }
		public float Range { get; set; }
	}
	
	public interface Lighting : IServiceInstance
	{
		public new Lighting Clone();
		public Color3 Ambient { get; set; }
		public float Brightness { get; set; }
		public float ClockTime { get; set; }
		public Color3 ColorShift_Bottom { get; set; }
		public Color3 ColorShift_Top { get; set; }
		public float EnvironmentDiffuseScale { get; set; }
		public float EnvironmentSpecularScale { get; set; }
		public float ExposureCompensation { get; set; }
		public Color3 FogColor { get; set; }
		public float FogEnd { get; set; }
		public float FogStart { get; set; }
		public float GeographicLatitude { get; set; }
		public bool GlobalShadows { get; set; }
		public Color3 OutdoorAmbient { get; set; }
		public bool Outlines { get; set; }
		public Color3 ShadowColor { get; set; }
		public float ShadowSoftness { get; set; }
		public string TimeOfDay { get; set; }
		public float GetMinutesAfterMidnight();
		public Vector3 GetMoonDirection();
		public float GetMoonPhase();
		public Vector3 GetSunDirection();
		public void SetMinutesAfterMidnight(float minutes);
		public ScriptSignal<bool> LightingChanged { get; }
	}
	
	public interface LinkingService : IServiceInstance
	{
		public new LinkingService Clone();
	}
	
	public interface LiveScriptingService : IServiceInstance
	{
		public new LiveScriptingService Clone();
	}
	
	public interface LocalizationService : IServiceInstance
	{
		public new LocalizationService Clone();
		public string RobloxLocaleId { get; }
		public string SystemLocaleId { get; }
		public Instance[] GetCorescriptLocalizations();
		public object[] GetTableEntries(Instance? instance = null);
		public Instance GetTranslatorForPlayer(Player player);
		public string GetCountryRegionForPlayerAsync(Player player);
		public Instance GetTranslatorForLocaleAsync(string locale);
		public Instance GetTranslatorForPlayerAsync(Player player);
	}
	
	public interface LocalizationTable : ICreatableInstance
	{
		public new LocalizationTable Clone();
		public string SourceLocaleId { get; set; }
		public string GetContents();
		public object[] GetEntries();
		public string GetString(string targetLocaleId, string key);
		public Instance GetTranslator(string localeId);
		public void RemoveEntry(string key, string source, string context);
		public void RemoveEntryValue(string key, string source, string context, string localeId);
		public void RemoveKey(string key);
		public void RemoveTargetLocale(string localeId);
		public void SetContents(string contents);
		public void SetEntries(object entries);
		public void SetEntry(string key, string targetLocaleId, string text);
		public void SetEntryContext(string key, string source, string context, string newContext);
		public void SetEntryExample(string key, string source, string context, string example);
		public void SetEntryKey(string key, string source, string context, string newKey);
		public void SetEntrySource(string key, string source, string context, string newSource);
		public void SetEntryValue(string key, string source, string context, string localeId, string text);
	}
	
	public interface CloudLocalizationTable : LocalizationTable
	{
		public new CloudLocalizationTable Clone();
	}
	
	public interface LodDataEntity : Instance
	{
		public new LodDataEntity Clone();
	}
	
	public interface LodDataService : IServiceInstance
	{
		public new LodDataService Clone();
	}
	
	public interface LogReporterService : IServiceInstance
	{
		public new LogReporterService Clone();
	}
	
	public interface LogService : IServiceInstance
	{
		public new LogService Clone();
		public void ClearOutput();
		public object[] GetLogHistory();
		public ScriptSignal<string, Enum.MessageType.Type> MessageOut { get; }
	}
	
	public interface LuaSourceContainer : Instance
	{
		public new LuaSourceContainer Clone();
	}
	
	public interface BaseScript : LuaSourceContainer
	{
		public new BaseScript Clone();
		public bool Disabled { get; set; }
		public bool Enabled { get; set; }
		public string LinkedSource { get; set; }
		public Enum.RunContext.Type RunContext { get; set; }
	}
	
	public interface Script : BaseScript, ICreatableInstance
	{
		public new Script Clone();
	}
	
	public interface LocalScript : Script, ICreatableInstance
	{
		public new LocalScript Clone();
	}
	
	public interface ModuleScript : LuaSourceContainer, ICreatableInstance
	{
		public new ModuleScript Clone();
		public string LinkedSource { get; set; }
	}
	
	public interface LuauScriptAnalyzerService : IServiceInstance
	{
		public new LuauScriptAnalyzerService Clone();
	}
	
	public interface MarkerCurve : ICreatableInstance
	{
		public new MarkerCurve Clone();
		public int Length { get; }
		public object GetMarkerAtIndex(int index);
		public object[] GetMarkers();
		public object[] InsertMarkerAtTime(float time, string marker);
		public int RemoveMarkerAtIndex(int startingIndex, int? count = null);
	}
	
	public interface MarketplaceService : IServiceInstance
	{
		public new MarketplaceService Clone();
		public void PromptBulkPurchase(Player player, object[] lineItems, object options);
		public void PromptBundlePurchase(Player player, long bundleId);
		public void PromptCancelSubscription(Player user, string subscriptionId);
		public void PromptGamePassPurchase(Player player, long gamePassId);
		public void PromptPremiumPurchase(Player player);
		public void PromptProductPurchase(Player player, long productId, bool? equipIfPurchased = null, Enum.CurrencyType.Type? currencyType = null);
		public void PromptPurchase(Player player, long assetId, bool? equipIfPurchased = null, Enum.CurrencyType.Type? currencyType = null);
		public void PromptSubscriptionPurchase(Player user, string subscriptionId);
		public Instance GetDeveloperProductsAsync();
		public object GetProductInfo(long assetId, Enum.InfoType.Type? infoType = null);
		public object GetSubscriptionProductInfoAsync(string subscriptionId);
		public object GetUserSubscriptionDetailsAsync(Player user, string subscriptionId);
		public object[] GetUserSubscriptionPaymentHistoryAsync(Player user, string subscriptionId);
		public object GetUserSubscriptionStatusAsync(Player user, string subscriptionId);
		public bool PlayerOwnsAsset(Player player, long assetId);
		public bool PlayerOwnsBundle(Player player, long bundleId);
		public bool UserOwnsGamePassAsync(long userId, long gamePassId);
		public ScriptSignal<Instance, Enum.MarketplaceBulkPurchasePromptStatus.Type, object> PromptBulkPurchaseFinished { get; }
		public ScriptSignal<Instance, long, bool> PromptBundlePurchaseFinished { get; }
		public ScriptSignal<Instance, long, bool> PromptGamePassPurchaseFinished { get; }
		public ScriptSignal PromptPremiumPurchaseFinished { get; }
		public ScriptSignal<long, long, bool> PromptProductPurchaseFinished { get; }
		public ScriptSignal<Instance, long, bool> PromptPurchaseFinished { get; }
		public ScriptSignal<Player, string, bool> PromptSubscriptionPurchaseFinished { get; }
	}
	
	public interface MaterialGenerationService : IServiceInstance
	{
		public new MaterialGenerationService Clone();
	}
	
	public interface MaterialGenerationSession : Instance
	{
		public new MaterialGenerationSession Clone();
	}
	
	public interface MaterialService : IServiceInstance
	{
		public new MaterialService Clone();
		public string GetBaseMaterialOverride(Enum.Material.Type material);
		public MaterialVariant GetMaterialVariant(Enum.Material.Type material, string name);
		public void SetBaseMaterialOverride(Enum.Material.Type material, string name);
	}
	
	public interface MaterialVariant : ICreatableInstance
	{
		public new MaterialVariant Clone();
		public Enum.Material.Type BaseMaterial { get; set; }
		public PhysicalProperties CustomPhysicalProperties { get; set; }
		public Enum.MaterialPattern.Type MaterialPattern { get; set; }
		public float StudsPerTile { get; set; }
	}
	
	public interface MemoryStoreHashMap : Instance
	{
		public new MemoryStoreHashMap Clone();
		public object GetAsync(string key);
		public MemoryStoreHashMapPages ListItemsAsync(int count);
		public void RemoveAsync(string key);
		public bool SetAsync(string key, object value, long expiration);
		public object UpdateAsync(string key, Action transformFunction, long expiration);
	}
	
	public interface MemoryStoreQueue : Instance
	{
		public new MemoryStoreQueue Clone();
		public void AddAsync(object value, long expiration, float? priority = null);
		public object ReadAsync(int count, bool? allOrNothing = null, float? waitTimeout = null);
		public void AddAsync(object value, long expiration, double? priority = null);
		public object ReadAsync(int count, bool? allOrNothing = null, double? waitTimeout = null);
		public void RemoveAsync(string id);
	}
	
	public interface MemoryStoreService : IServiceInstance
	{
		public new MemoryStoreService Clone();
		public MemoryStoreHashMap GetHashMap(string name);
		public MemoryStoreQueue GetQueue(string name, int? invisibilityTimeout = null);
		public MemoryStoreSortedMap GetSortedMap(string name);
	}
	
	public interface MemoryStoreSortedMap : Instance
	{
		public new MemoryStoreSortedMap Clone();
		public object GetAsync(string key);
		public object[] GetRangeAsync(Enum.SortDirection.Type direction, int count, object exclusiveLowerBound, object exclusiveUpperBound);
		public void RemoveAsync(string key);
		public bool SetAsync(string key, object value, long expiration, object sortKey);
		public object UpdateAsync(string key, Action transformFunction, long expiration);
	}
	
	public interface MessageBusConnection : Instance
	{
		public new MessageBusConnection Clone();
	}
	
	public interface MessageBusService : IServiceInstance
	{
		public new MessageBusService Clone();
	}
	
	public interface MessagingService : IServiceInstance
	{
		public new MessagingService Clone();
		public void PublishAsync(string topic, object message);
		public ScriptConnection SubscribeAsync(string topic, Action callback);
	}
	
	public interface MetaBreakpoint : Instance
	{
		public new MetaBreakpoint Clone();
	}
	
	public interface MetaBreakpointContext : Instance
	{
		public new MetaBreakpointContext Clone();
	}
	
	public interface MetaBreakpointManager : IServiceInstance
	{
		public new MetaBreakpointManager Clone();
	}
	
	public interface Mouse : Instance
	{
		public new Mouse Clone();
		public CFrame Hit { get; }
		public string Icon { get; set; }
		public CFrame Origin { get; }
		public BasePart? Target { get; }
		public Instance? TargetFilter { get; set; }
		public Enum.NormalId.Type TargetSurface { get; }
		public Ray UnitRay { get; }
		public int ViewSizeX { get; }
		public int ViewSizeY { get; }
		public int X { get; }
		public int Y { get; }
		public ScriptSignal Button1Down { get; }
		public ScriptSignal Button1Up { get; }
		public ScriptSignal Button2Down { get; }
		public ScriptSignal Button2Up { get; }
		public ScriptSignal Idle { get; }
		public ScriptSignal<string> KeyDown { get; }
		public ScriptSignal<string> KeyUp { get; }
		public ScriptSignal Move { get; }
		public ScriptSignal WheelBackward { get; }
		public ScriptSignal WheelForward { get; }
	}
	
	public interface PlayerMouse : Mouse
	{
		public new PlayerMouse Clone();
	}
	
	public interface NetworkMarker : Instance
	{
		public new NetworkMarker Clone();
		public ScriptSignal Received { get; }
	}
	
	public interface NoCollisionConstraint : ICreatableInstance
	{
		public new NoCollisionConstraint Clone();
		public bool Enabled { get; set; }
		public BasePart? Part0 { get; set; }
		public BasePart? Part1 { get; set; }
	}
	
	public interface Noise : ICreatableInstance
	{
		public new Noise Clone();
	}
	
	public interface OmniRecommendationsService : IServiceInstance
	{
		public new OmniRecommendationsService Clone();
	}
	
	public interface OpenCloudApiV1 : Instance
	{
		public new OpenCloudApiV1 Clone();
		public OpenCloudModel CreateModel(string name);
		public OpenCloudModel CreateUserNotificationAsync(string user, OpenCloudModel userNotification);
	}
	
	public interface OpenCloudService : IServiceInstance
	{
		public new OpenCloudService Clone();
		public OpenCloudApiV1 GetApiV1();
		public object InvokeAsync(string version, string methodName, object arguments);
	}
	
	public interface OperationGraph : ICreatableInstance
	{
		public new OperationGraph Clone();
	}
	
	public interface PVInstance : Instance
	{
		public new PVInstance Clone();
		public CFrame GetPivot();
		public void PivotTo(CFrame targetCFrame);
	}
	
	public partial interface BasePart : PVInstance
	{
		public new BasePart Clone();
		public bool Anchored { get; set; }
		public Vector3 AssemblyAngularVelocity { get; set; }
		public Vector3 AssemblyCenterOfMass { get; }
		public Vector3 AssemblyLinearVelocity { get; set; }
		public float AssemblyMass { get; }
		public BasePart? AssemblyRootPart { get; }
		public Enum.SurfaceType.Type BackSurface { get; set; }
		public Enum.SurfaceType.Type BottomSurface { get; set; }
		public BrickColor BrickColor { get; set; }
		public CFrame CFrame { get; set; }
		public bool CanCollide { get; set; }
		public bool CanQuery { get; set; }
		public bool CanTouch { get; set; }
		public bool CastShadow { get; set; }
		public Vector3 CenterOfMass { get; }
		public string CollisionGroup { get; set; }
		public int CollisionGroupId { get; set; }
		public Color3 Color { get; set; }
		public PhysicalProperties CurrentPhysicalProperties { get; }
		public PhysicalProperties CustomPhysicalProperties { get; set; }
		public bool EnableFluidForces { get; set; }
		public CFrame ExtentsCFrame { get; }
		public Vector3 ExtentsSize { get; }
		public Enum.SurfaceType.Type FrontSurface { get; set; }
		public Enum.SurfaceType.Type LeftSurface { get; set; }
		public bool Locked { get; set; }
		public float Mass { get; }
		public bool Massless { get; set; }
		public Enum.Material.Type Material { get; set; }
		public string MaterialVariant { get; set; }
		public CFrame PivotOffset { get; set; }
		public float Reflectance { get; set; }
		public int ResizeIncrement { get; }
		public Faces ResizeableFaces { get; }
		public Enum.SurfaceType.Type RightSurface { get; set; }
		public int RootPriority { get; set; }
		public Vector3 Rotation { get; set; }
		public Vector3 Size { get; set; }
		public float SpecificGravity { get; }
		public Enum.SurfaceType.Type TopSurface { get; set; }
		public float Transparency { get; set; }
		public Vector3 AngularAccelerationToTorque(Vector3 angAcceleration, Vector3? angVelocity = null);
		public void ApplyAngularImpulse(Vector3 impulse);
		public void ApplyImpulse(Vector3 impulse);
		public void ApplyImpulseAtPosition(Vector3 impulse, Vector3 position);
		public void BreakJoints();
		public bool CanCollideWith(BasePart part);
		public object CanSetNetworkOwnership();
		public Vector3 GetClosestPointOnSurface(Vector3 position);
		public Instance[] GetConnectedParts(bool? recursive = null);
		public Instance[] GetJoints();
		public float GetMass();
		public Instance GetNetworkOwner();
		public bool GetNetworkOwnershipAuto();
		public Instance[] GetNoCollisionConstraints();
		public CFrame GetRenderCFrame();
		public Instance GetRootPart();
		public Instance[] GetTouchingParts();
		public Vector3 GetVelocityAtPosition(Vector3 position);
		public bool IsGrounded();
		public void MakeJoints();
		public bool Resize(Enum.NormalId.Type normalId, int deltaAmount);
		public void SetNetworkOwner(Player? playerInstance = null);
		public void SetNetworkOwnershipAuto();
		public Vector3 TorqueToAngularAcceleration(Vector3 torque, Vector3? angVelocity = null);
		public Instance IntersectAsync(Instance[] parts, Enum.CollisionFidelity.Type? collisionfidelity = null, Enum.RenderFidelity.Type? renderFidelity = null);
		public Instance SubtractAsync(Instance[] parts, Enum.CollisionFidelity.Type? collisionfidelity = null, Enum.RenderFidelity.Type? renderFidelity = null);
		public Instance UnionAsync(Instance[] parts, Enum.CollisionFidelity.Type? collisionfidelity = null, Enum.RenderFidelity.Type? renderFidelity = null);
		public ScriptSignal<BasePart> LocalSimulationTouched { get; }
		public ScriptSignal OutfitChanged { get; }
		public ScriptSignal<BasePart> StoppedTouching { get; }
		public ScriptSignal<BasePart> TouchEnded { get; }
		public ScriptSignal<BasePart> Touched { get; }
	}
	
	public interface CornerWedgePart : BasePart, ICreatableInstance
	{
		public new CornerWedgePart Clone();
	}
	
	public interface FormFactorPart : BasePart
	{
		public new FormFactorPart Clone();
		public Enum.FormFactor.Type FormFactor { get; set; }
	}
	
	public interface Part : FormFactorPart, ICreatableInstance
	{
		public new Part Clone();
		public Enum.PartType.Type Shape { get; set; }
	}
	
	public interface Platform : Part
	{
		public new Platform Clone();
	}
	
	public interface Seat : Part, ICreatableInstance
	{
		public new Seat Clone();
		public bool Disabled { get; set; }
		public Humanoid? Occupant { get; }
		public void Sit(Humanoid humanoid);
	}
	
	public interface SkateboardPlatform : Part, ICreatableInstance
	{
		public new SkateboardPlatform Clone();
		public SkateboardController? Controller { get; }
		public Humanoid? ControllingHumanoid { get; }
		public int Steer { get; set; }
		public bool StickyWheels { get; set; }
		public int Throttle { get; set; }
		public void ApplySpecificImpulse(Vector3 impulseWorld);
		public ScriptSignal<Instance, Instance> Equipped { get; }
		public ScriptSignal<Enum.MoveState.Type, Enum.MoveState.Type> MoveStateChanged { get; }
		public ScriptSignal<Instance> Unequipped { get; }
	}
	
	public interface SpawnLocation : Part, ICreatableInstance
	{
		public new SpawnLocation Clone();
		public bool AllowTeamChangeOnTouch { get; set; }
		public int Duration { get; set; }
		public bool Enabled { get; set; }
		public bool Neutral { get; set; }
		public BrickColor TeamColor { get; set; }
	}
	
	public interface WedgePart : FormFactorPart, ICreatableInstance
	{
		public new WedgePart Clone();
	}
	
	public partial interface Terrain : BasePart
	{
		public new Terrain Clone();
		public bool IsSmooth { get; }
		public Region3int16 MaxExtents { get; }
		public Color3 WaterColor { get; set; }
		public float WaterReflectance { get; set; }
		public float WaterTransparency { get; set; }
		public float WaterWaveSize { get; set; }
		public float WaterWaveSpeed { get; set; }
		public bool AutowedgeCell(int x, int y, int z);
		public void AutowedgeCells(Region3int16 region);
		public Vector3 CellCenterToWorld(int x, int y, int z);
		public Vector3 CellCornerToWorld(int x, int y, int z);
		public void Clear();
		public TerrainRegion CopyRegion(Region3int16 region);
		public int CountCells();
		public void FillBall(Vector3 center, float radius, Enum.Material.Type material);
		public void FillBlock(CFrame cframe, Vector3 size, Enum.Material.Type material);
		public void FillCylinder(CFrame cframe, float height, float radius, Enum.Material.Type material);
		public void FillRegion(Region3 region, float resolution, Enum.Material.Type material);
		public void FillWedge(CFrame cframe, Vector3 size, Enum.Material.Type material);
		public object GetCell(int x, int y, int z);
		public Color3 GetMaterialColor(Enum.Material.Type material);
		public object GetWaterCell(int x, int y, int z);
		public void PasteRegion(TerrainRegion region, Vector3int16 corner, bool pasteEmptyCells);
		public object ReadVoxelChannels(Region3 region, float resolution, object[] channelIds);
		public object ReadVoxels(Region3 region, float resolution);
		public void ReplaceMaterial(Region3 region, float resolution, Enum.Material.Type sourceMaterial, Enum.Material.Type targetMaterial);
		public void SetCell(int x, int y, int z, Enum.CellMaterial.Type material, Enum.CellBlock.Type block, Enum.CellOrientation.Type orientation);
		public void SetCells(Region3int16 region, Enum.CellMaterial.Type material, Enum.CellBlock.Type block, Enum.CellOrientation.Type orientation);
		public void SetMaterialColor(Enum.Material.Type material, Color3 value);
		public void SetWaterCell(int x, int y, int z, Enum.WaterForce.Type force, Enum.WaterDirection.Type direction);
		public Vector3 WorldToCell(Vector3 position);
		public Vector3 WorldToCellPreferEmpty(Vector3 position);
		public Vector3 WorldToCellPreferSolid(Vector3 position);
		public void WriteVoxelChannels(Region3 region, float resolution, object channels);
		public void WriteVoxels(Region3 region, float resolution, object[] materials, object[] occupancy);
	}
	
	public interface TriangleMeshPart : BasePart
	{
		public new TriangleMeshPart Clone();
		public Enum.CollisionFidelity.Type CollisionFidelity { get; set; }
		public Enum.FluidFidelity.Type FluidFidelity { get; set; }
		public Vector3 MeshSize { get; }
	}
	
	public interface MeshPart : TriangleMeshPart, ICreatableInstance
	{
		public new MeshPart Clone();
		public bool DoubleSided { get; set; }
		public string MeshId { get; }
		public Enum.RenderFidelity.Type RenderFidelity { get; set; }
		public string TextureID { get; set; }
		public void ApplyMesh(MeshPart meshPart);
	}
	
	public interface PartOperation : TriangleMeshPart, ICreatableInstance
	{
		public new PartOperation Clone();
		public Enum.RenderFidelity.Type RenderFidelity { get; set; }
		public float SmoothingAngle { get; set; }
		public int TriangleCount { get; }
		public bool UsePartColor { get; set; }
		public void SubstituteGeometry(Instance source);
	}
	
	public interface IntersectOperation : PartOperation, ICreatableInstance
	{
		public new IntersectOperation Clone();
	}
	
	public interface NegateOperation : PartOperation, ICreatableInstance
	{
		public new NegateOperation Clone();
	}
	
	public interface UnionOperation : PartOperation, ICreatableInstance
	{
		public new UnionOperation Clone();
	}
	
	public interface TrussPart : BasePart, ICreatableInstance
	{
		public new TrussPart Clone();
		public Enum.Style.Type Style { get; set; }
	}
	
	public interface VehicleSeat : BasePart, ICreatableInstance
	{
		public new VehicleSeat Clone();
		public int AreHingesDetected { get; }
		public bool Disabled { get; set; }
		public bool HeadsUpDisplay { get; set; }
		public float MaxSpeed { get; set; }
		public Humanoid? Occupant { get; }
		public int Steer { get; set; }
		public float SteerFloat { get; set; }
		public int Throttle { get; set; }
		public float ThrottleFloat { get; set; }
		public float Torque { get; set; }
		public float TurnSpeed { get; set; }
		public void Sit(Humanoid humanoid);
	}
	
	public interface Model : PVInstance, ICreatableInstance
	{
		public new Model Clone();
		public Enum.ModelStreamingMode.Type ModelStreamingMode { get; set; }
		public BasePart? PrimaryPart { get; set; }
		public CFrame WorldPivot { get; set; }
		public void AddPersistentPlayer(Player? playerInstance = null);
		public void BreakJoints();
		public CFrame GetBoundingBox();
		public Vector3 GetExtentsSize();
		public CFrame GetModelCFrame();
		public Vector3 GetModelSize();
		public Instance[] GetPersistentPlayers();
		public CFrame GetPrimaryPartCFrame();
		public float GetScale();
		public void MakeJoints();
		public void MoveTo(Vector3 position);
		public void RemovePersistentPlayer(Player? playerInstance = null);
		public void ResetOrientationToIdentity();
		public void ScaleTo(float newScaleFactor);
		public void SetIdentityOrientation();
		public void SetPrimaryPartCFrame(CFrame cframe);
		public void TranslateBy(Vector3 delta);
		public void move(Vector3 location);
	}
	
	public interface Actor : Model, ICreatableInstance
	{
		public new Actor Clone();
		public ScriptConnection BindToMessage(string topic, Action function);
		public ScriptConnection BindToMessageParallel(string topic, Action function);
		public void SendMessage(string topic, object message);
	}
	
	public interface BackpackItem : Model
	{
		public new BackpackItem Clone();
		public string TextureId { get; set; }
	}
	
	public interface Tool : BackpackItem, ICreatableInstance
	{
		public new Tool Clone();
		public bool CanBeDropped { get; set; }
		public bool Enabled { get; set; }
		public CFrame Grip { get; set; }
		public bool ManualActivationOnly { get; set; }
		public bool RequiresHandle { get; set; }
		public string ToolTip { get; set; }
		public void Activate();
		public void Deactivate();
		public ScriptSignal Activated { get; }
		public ScriptSignal Deactivated { get; }
		public ScriptSignal<Mouse> Equipped { get; }
		public ScriptSignal Unequipped { get; }
	}
	
	public partial interface WorldRoot : Model
	{
		public new WorldRoot Clone();
		public RaycastResult Blockcast(CFrame cframe, Vector3 size, Vector3 direction, RaycastParams? parameters = null);
		public object FindPartOnRay(Ray ray, Instance? ignoreDescendantsInstance = null, bool? terrainCellsAreCubes = null, bool? ignoreWater = null);
		public object FindPartOnRayWithIgnoreList(Ray ray, Instance[] ignoreDescendantsTable, bool? terrainCellsAreCubes = null, bool? ignoreWater = null);
		public object FindPartOnRayWithWhitelist(Ray ray, Instance[] whitelistDescendantsTable, bool? ignoreWater = null);
		public Instance[] FindPartsInRegion3(Region3 region, Instance? ignoreDescendantsInstance = null, int? maxParts = null);
		public Instance[] FindPartsInRegion3WithIgnoreList(Region3 region, Instance[] ignoreDescendantsTable, int? maxParts = null);
		public Instance[] FindPartsInRegion3WithWhiteList(Region3 region, Instance[] whitelistDescendantsTable, int? maxParts = null);
		public Instance[] GetPartBoundsInBox(CFrame cframe, Vector3 size, OverlapParams? overlapParams = null);
		public Instance[] GetPartBoundsInRadius(Vector3 position, float radius, OverlapParams? overlapParams = null);
		public Instance[] GetPartsInPart(BasePart part, OverlapParams? overlapParams = null);
		public bool IsRegion3Empty(Region3 region, Instance? ignoreDescendentsInstance = null);
		public bool IsRegion3EmptyWithIgnoreList(Region3 region, Instance[] ignoreDescendentsTable);
		public RaycastResult Raycast(Vector3 origin, Vector3 direction, RaycastParams? raycastParams = null);
		public RaycastResult Shapecast(BasePart part, Vector3 direction, RaycastParams? parameters = null);
		public RaycastResult Spherecast(Vector3 position, float radius, Vector3 direction, RaycastParams? parameters = null);
	}
	
	public partial interface Workspace : WorldRoot, IServiceInstance
	{
		public new Workspace Clone();
		public float AirDensity { get; set; }
		public bool AllowThirdPartySales { get; set; }
		public Enum.ClientAnimatorThrottlingMode.Type ClientAnimatorThrottling { get; set; }
		public Camera? CurrentCamera { get; set; }
		public float DistributedGameTime { get; set; }
		public float FallenPartsDestroyHeight { get; set; }
		public Vector3 GlobalWind { get; set; }
		public float Gravity { get; set; }
		public Vector3 InsertPoint { get; set; }
		public Enum.AnimatorRetargetingMode.Type Retargeting { get; set; }
		public bool StreamingEnabled { get; set; }
		public Terrain? Terrain { get; }
		public int GetNumAwakeParts();
		public int GetPhysicsThrottling();
		public float GetRealPhysicsFPS();
		public float GetServerTimeNow();
		public void JoinToOutsiders(Instance[] objects, Enum.JointCreationMode.Type jointType);
		public bool PGSIsEnabled();
		public void UnjoinFromOutsiders(Instance[] objects);
		public ScriptSignal<Player> PersistentLoaded { get; }
	}
	
	public interface WorldModel : WorldRoot, ICreatableInstance
	{
		public new WorldModel Clone();
	}
	
	public interface PackageLink : Instance
	{
		public new PackageLink Clone();
		public string DefaultName { get; }
		public string PackageId { get; }
		public string SerializedDefaultAttributes { get; }
		public long VersionNumber { get; }
	}
	
	public interface PackageUIService : IServiceInstance
	{
		public new PackageUIService Clone();
	}
	
	public interface Pages : Instance
	{
		public new Pages Clone();
		public bool IsFinished { get; }
		public object[] GetCurrentPage();
		public void AdvanceToNextPageAsync();
	}
	
	public interface AudioPages : Pages
	{
		public new AudioPages Clone();
	}
	
	public interface BanHistoryPages : Pages
	{
		public new BanHistoryPages Clone();
	}
	
	public interface CatalogPages : Pages
	{
		public new CatalogPages Clone();
	}
	
	public interface DataStoreKeyPages : Pages
	{
		public new DataStoreKeyPages Clone();
		public string Cursor { get; }
	}
	
	public interface DataStoreListingPages : Pages
	{
		public new DataStoreListingPages Clone();
		public string Cursor { get; }
	}
	
	public interface DataStorePages : Pages
	{
		public new DataStorePages Clone();
	}
	
	public interface DataStoreVersionPages : Pages
	{
		public new DataStoreVersionPages Clone();
	}
	
	public interface FriendPages : Pages
	{
		public new FriendPages Clone();
	}
	
	public interface InventoryPages : Pages
	{
		public new InventoryPages Clone();
	}
	
	public interface EmotesPages : InventoryPages
	{
		public new EmotesPages Clone();
	}
	
	public interface MemoryStoreHashMapPages : Pages
	{
		public new MemoryStoreHashMapPages Clone();
	}
	
	public interface OutfitPages : Pages
	{
		public new OutfitPages Clone();
	}
	
	public interface StandardPages : Pages
	{
		public new StandardPages Clone();
	}
	
	public interface ParticleEmitter : ICreatableInstance
	{
		public new ParticleEmitter Clone();
		public Vector3 Acceleration { get; set; }
		public float Brightness { get; set; }
		public ColorSequence Color { get; set; }
		public float Drag { get; set; }
		public Enum.NormalId.Type EmissionDirection { get; set; }
		public bool Enabled { get; set; }
		public NumberRange FlipbookFramerate { get; set; }
		public string FlipbookIncompatible { get; set; }
		public Enum.ParticleFlipbookLayout.Type FlipbookLayout { get; set; }
		public Enum.ParticleFlipbookMode.Type FlipbookMode { get; set; }
		public bool FlipbookStartRandom { get; set; }
		public NumberRange Lifetime { get; set; }
		public float LightEmission { get; set; }
		public float LightInfluence { get; set; }
		public bool LockedToPart { get; set; }
		public Enum.ParticleOrientation.Type Orientation { get; set; }
		public float Rate { get; set; }
		public NumberRange RotSpeed { get; set; }
		public NumberRange Rotation { get; set; }
		public Enum.ParticleEmitterShape.Type Shape { get; set; }
		public Enum.ParticleEmitterShapeInOut.Type ShapeInOut { get; set; }
		public float ShapePartial { get; set; }
		public Enum.ParticleEmitterShapeStyle.Type ShapeStyle { get; set; }
		public NumberSequence Size { get; set; }
		public NumberRange Speed { get; set; }
		public Vector2 SpreadAngle { get; set; }
		public NumberSequence Squash { get; set; }
		public string Texture { get; set; }
		public float TimeScale { get; set; }
		public NumberSequence Transparency { get; set; }
		public float VelocityInheritance { get; set; }
		public float VelocitySpread { get; set; }
		public bool WindAffectsDrag { get; set; }
		public float ZOffset { get; set; }
		public void Clear();
		public void Emit(int? particleCount = null);
	}
	
	public interface PatchBundlerFileWatch : IServiceInstance
	{
		public new PatchBundlerFileWatch Clone();
	}
	
	public interface PatchMapping : Instance
	{
		public new PatchMapping Clone();
		public bool FlattenTree { get; set; }
		public string PatchId { get; set; }
		public string TargetPath { get; set; }
	}
	
	public interface Path : Instance
	{
		public new Path Clone();
		public Enum.PathStatus.Type Status { get; }
		public object[] GetPointCoordinates();
		public object[] GetWaypoints();
		public int CheckOcclusionAsync(int start);
		public void ComputeAsync(Vector3 start, Vector3 finish);
		public ScriptSignal<int> Blocked { get; }
		public ScriptSignal<int> Unblocked { get; }
	}
	
	public interface PathfindingLink : ICreatableInstance
	{
		public new PathfindingLink Clone();
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public bool IsBidirectional { get; set; }
		public string Label { get; set; }
	}
	
	public interface PathfindingModifier : ICreatableInstance
	{
		public new PathfindingModifier Clone();
		public string Label { get; set; }
		public bool PassThrough { get; set; }
	}
	
	public interface PathfindingService : IServiceInstance
	{
		public new PathfindingService Clone();
		public float EmptyCutoff { get; set; }
		public Instance CreatePath(object? agentParameters = null);
		public Instance ComputeRawPathAsync(Vector3 start, Vector3 finish, float maxDistance);
		public Instance ComputeSmoothPathAsync(Vector3 start, Vector3 finish, float maxDistance);
		public Instance FindPathAsync(Vector3 start, Vector3 finish);
	}
	
	public interface PausedState : Instance
	{
		public new PausedState Clone();
	}
	
	public interface PausedStateBreakpoint : PausedState
	{
		public new PausedStateBreakpoint Clone();
	}
	
	public interface PausedStateException : PausedState
	{
		public new PausedStateException Clone();
	}
	
	public interface PhysicsService : IServiceInstance
	{
		public new PhysicsService Clone();
		public bool CollisionGroupContainsPart(string name, BasePart part);
		public void CollisionGroupSetCollidable(string name1, string name2, bool collidable);
		public bool CollisionGroupsAreCollidable(string name1, string name2);
		public int CreateCollisionGroup(string name);
		public int GetCollisionGroupId(string name);
		public string GetCollisionGroupName(int name);
		public object[] GetCollisionGroups();
		public int GetMaxCollisionGroups();
		public object[] GetRegisteredCollisionGroups();
		public bool IsCollisionGroupRegistered(string name);
		public void RegisterCollisionGroup(string name);
		public void RemoveCollisionGroup(string name);
		public void RenameCollisionGroup(string from, string to);
		public void SetPartCollisionGroup(BasePart part, string name);
		public void UnregisterCollisionGroup(string name);
	}
	
	public interface PlaceStatsService : IServiceInstance
	{
		public new PlaceStatsService Clone();
	}
	
	public interface PlacesService : IServiceInstance
	{
		public new PlacesService Clone();
	}
	
	public interface PlatformCloudStorageService : IServiceInstance
	{
		public new PlatformCloudStorageService Clone();
	}
	
	public interface PlatformFriendsService : IServiceInstance
	{
		public new PlatformFriendsService Clone();
	}
	
	public partial interface Player : Instance
	{
		public new Player Clone();
		public int AccountAge { get; }
		public bool AutoJumpEnabled { get; set; }
		public float CameraMaxZoomDistance { get; set; }
		public float CameraMinZoomDistance { get; set; }
		public Enum.CameraMode.Type CameraMode { get; set; }
		public bool CanLoadCharacterAppearance { get; set; }
		public Model? Character { get; set; }
		public string CharacterAppearance { get; set; }
		public long CharacterAppearanceId { get; set; }
		public Enum.DevCameraOcclusionMode.Type DevCameraOcclusionMode { get; set; }
		public Enum.DevComputerCameraMovementMode.Type DevComputerCameraMode { get; set; }
		public Enum.DevComputerMovementMode.Type DevComputerMovementMode { get; set; }
		public bool DevEnableMouseLock { get; set; }
		public Enum.DevTouchCameraMovementMode.Type DevTouchCameraMode { get; set; }
		public Enum.DevTouchMovementMode.Type DevTouchMovementMode { get; set; }
		public string DisplayName { get; set; }
		public long FollowUserId { get; }
		public bool GameplayPaused { get; }
		public bool HasVerifiedBadge { get; set; }
		public float HealthDisplayDistance { get; set; }
		public Enum.MembershipType.Type MembershipType { get; }
		public float NameDisplayDistance { get; set; }
		public bool Neutral { get; set; }
		public Instance? ReplicationFocus { get; set; }
		public SpawnLocation? RespawnLocation { get; set; }
		public Team? Team { get; set; }
		public BrickColor TeamColor { get; set; }
		public long UserId { get; set; }
		public void ClearCharacterAppearance();
		public float DistanceFromCharacter(Vector3 point);
		public object GetJoinData();
		public Mouse GetMouse();
		public float GetNetworkPing();
		public bool HasAppearanceLoaded();
		public bool IsVerified();
		public void Kick(string message);
		public bool LoadBoolean(string key);
		public void LoadCharacterAppearance(Instance assetInstance);
		public Instance LoadInstance(string key);
		public float LoadNumber(string key);
		public string LoadString(string key);
		public void Move(Vector3 walkDirection, bool? relativeToCamera = null);
		public void SaveBoolean(string key, bool value);
		public void SaveInstance(string key, Instance value);
		public void SaveNumber(string key, float value);
		public void SaveString(string key, string value);
		public object[] GetFriendsOnline(int? maxFriends = null);
		public int GetRankInGroup(long groupId);
		public string GetRoleInGroup(long groupId);
		public bool IsBestFriendsWith(long userId);
		public bool IsFriendsWith(long userId);
		public bool IsInGroup(long groupId);
		public void LoadCharacter();
		public void LoadCharacterWithHumanoidDescription(HumanoidDescription humanoidDescription);
		public void RequestStreamAroundAsync(Vector3 position, float? timeOut = null);
		public bool WaitForDataReady();
		public ScriptSignal<Model> CharacterAdded { get; }
		public ScriptSignal<Model> CharacterAppearanceLoaded { get; }
		public ScriptSignal<Model> CharacterRemoving { get; }
		public ScriptSignal<string, Player> Chatted { get; }
		public ScriptSignal<float> Idled { get; }
		public ScriptSignal<Enum.TeleportState.Type, long, string> OnTeleport { get; }
	}
	
	public interface PlayerHydrationService : IServiceInstance
	{
		public new PlayerHydrationService Clone();
	}
	
	public partial interface PlayerScripts : Instance
	{
		public new PlayerScripts Clone();
		public void ClearComputerCameraMovementModes();
		public void ClearComputerMovementModes();
		public void ClearTouchCameraMovementModes();
		public void ClearTouchMovementModes();
		public void RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.Type cameraMovementMode);
		public void RegisterComputerMovementMode(Enum.ComputerMovementMode.Type movementMode);
		public void RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode.Type cameraMovementMode);
		public void RegisterTouchMovementMode(Enum.TouchMovementMode.Type movementMode);
	}
	
	public interface PlayerViewService : IServiceInstance
	{
		public new PlayerViewService Clone();
		public CFrame GetDeviceCameraCFrame(Player? player = null);
	}
	
	public partial interface Players : IServiceInstance
	{
		public new Players Clone();
		public bool BubbleChat { get; }
		public bool CharacterAutoLoads { get; set; }
		public bool ClassicChat { get; }
		public int MaxPlayers { get; }
		public int NumPlayers { get; }
		public int PreferredPlayers { get; }
		public float RespawnTime { get; set; }
		public Player GetPlayerByUserId(long userId);
		public Player GetPlayerFromCharacter(Model character);
		public Instance[] GetPlayers();
		public Player playerFromCharacter(Model character);
		public Instance[] players();
		public void BanAsync(object config);
		public Model CreateHumanoidModelFromDescription(HumanoidDescription description, Enum.HumanoidRigType.Type rigType, Enum.AssetTypeVerification.Type? assetTypeVerification = null);
		public Model CreateHumanoidModelFromUserId(long userId);
		public BanHistoryPages GetBanHistoryAsync(long userId);
		public Model GetCharacterAppearanceAsync(long userId);
		public object GetCharacterAppearanceInfoAsync(long userId);
		public FriendPages GetFriendsAsync(long userId);
		public HumanoidDescription GetHumanoidDescriptionFromOutfitId(long outfitId);
		public HumanoidDescription GetHumanoidDescriptionFromUserId(long userId);
		public string GetNameFromUserIdAsync(long userId);
		public long GetUserIdFromNameAsync(string userName);
		public object GetUserThumbnailAsync(long userId, Enum.ThumbnailType.Type thumbnailType, Enum.ThumbnailSize.Type thumbnailSize);
		public void UnbanAsync(object config);
		public ScriptSignal<Player> PlayerAdded { get; }
		public ScriptSignal<Player> PlayerMembershipChanged { get; }
		public ScriptSignal<Player> PlayerRemoving { get; }
		public ScriptSignal<Player, string> UserSubscriptionStatusChanged { get; }
	}
	
	public interface PluginCapabilities : ICreatableInstance
	{
		public new PluginCapabilities Clone();
	}
	
	public interface PluginManagementService : IServiceInstance
	{
		public new PluginManagementService Clone();
	}
	
	public partial interface PluginManagerInterface : Instance
	{
		public new PluginManagerInterface Clone();
	}
	
	public interface PluginPolicyService : IServiceInstance
	{
		public new PluginPolicyService Clone();
	}
	
	public interface PolicyService : IServiceInstance
	{
		public new PolicyService Clone();
		public object GetPolicyInfoForPlayerAsync(Player player);
	}
	
	public interface PoseBase : Instance
	{
		public new PoseBase Clone();
		public Enum.PoseEasingDirection.Type EasingDirection { get; set; }
		public Enum.PoseEasingStyle.Type EasingStyle { get; set; }
		public float Weight { get; set; }
	}
	
	public interface NumberPose : PoseBase, ICreatableInstance
	{
		public new NumberPose Clone();
		public float Value { get; set; }
	}
	
	public interface Pose : PoseBase, ICreatableInstance
	{
		public new Pose Clone();
		public CFrame CFrame { get; set; }
		public float MaskWeight { get; set; }
		public void AddSubPose(Pose pose);
		public Instance[] GetSubPoses();
		public void RemoveSubPose(Pose pose);
	}
	
	public interface PostEffect : Instance
	{
		public new PostEffect Clone();
		public bool Enabled { get; set; }
	}
	
	public interface BloomEffect : PostEffect, ICreatableInstance
	{
		public new BloomEffect Clone();
		public float Intensity { get; set; }
		public float Size { get; set; }
		public float Threshold { get; set; }
	}
	
	public interface BlurEffect : PostEffect, ICreatableInstance
	{
		public new BlurEffect Clone();
		public float Size { get; set; }
	}
	
	public interface ColorCorrectionEffect : PostEffect, ICreatableInstance
	{
		public new ColorCorrectionEffect Clone();
		public float Brightness { get; set; }
		public float Contrast { get; set; }
		public float Saturation { get; set; }
		public Color3 TintColor { get; set; }
	}
	
	public interface ColorGradingEffect : PostEffect, ICreatableInstance
	{
		public new ColorGradingEffect Clone();
		public Enum.TonemapperPreset.Type TonemapperPreset { get; set; }
	}
	
	public interface DepthOfFieldEffect : PostEffect, ICreatableInstance
	{
		public new DepthOfFieldEffect Clone();
		public float FarIntensity { get; set; }
		public float FocusDistance { get; set; }
		public float InFocusRadius { get; set; }
		public float NearIntensity { get; set; }
	}
	
	public interface SunRaysEffect : PostEffect, ICreatableInstance
	{
		public new SunRaysEffect Clone();
		public float Intensity { get; set; }
		public float Spread { get; set; }
	}
	
	public interface ProcessInstancePhysicsService : IServiceInstance
	{
		public new ProcessInstancePhysicsService Clone();
	}
	
	public interface ProjectFolderService : IServiceInstance
	{
		public new ProjectFolderService Clone();
	}
	
	public interface ProximityPrompt : ICreatableInstance
	{
		public new ProximityPrompt Clone();
		public string ActionText { get; set; }
		public bool AutoLocalize { get; set; }
		public bool ClickablePrompt { get; set; }
		public bool Enabled { get; set; }
		public Enum.ProximityPromptExclusivity.Type Exclusivity { get; set; }
		public Enum.KeyCode.Type GamepadKeyCode { get; set; }
		public float HoldDuration { get; set; }
		public Enum.KeyCode.Type KeyboardKeyCode { get; set; }
		public float MaxActivationDistance { get; set; }
		public string ObjectText { get; set; }
		public bool RequiresLineOfSight { get; set; }
		public LocalizationTable? RootLocalizationTable { get; set; }
		public Enum.ProximityPromptStyle.Type Style { get; set; }
		public Vector2 UIOffset { get; set; }
		public void InputHoldBegin();
		public void InputHoldEnd();
		public ScriptSignal<Player> PromptButtonHoldBegan { get; }
		public ScriptSignal<Player> PromptButtonHoldEnded { get; }
		public ScriptSignal PromptHidden { get; }
		public ScriptSignal<Enum.ProximityPromptInputType.Type> PromptShown { get; }
		public ScriptSignal<Player> TriggerEnded { get; }
		public ScriptSignal<Player> Triggered { get; }
	}
	
	public interface ProximityPromptService : IServiceInstance
	{
		public new ProximityPromptService Clone();
		public bool Enabled { get; set; }
		public int MaxPromptsVisible { get; set; }
		public ScriptSignal<ProximityPrompt, Player> PromptButtonHoldBegan { get; }
		public ScriptSignal<ProximityPrompt, Player> PromptButtonHoldEnded { get; }
		public ScriptSignal<ProximityPrompt> PromptHidden { get; }
		public ScriptSignal<ProximityPrompt, Enum.ProximityPromptInputType.Type> PromptShown { get; }
		public ScriptSignal<ProximityPrompt, Player> PromptTriggerEnded { get; }
		public ScriptSignal<ProximityPrompt, Player> PromptTriggered { get; }
	}
	
	public interface PublishService : IServiceInstance
	{
		public new PublishService Clone();
	}
	
	public interface RTAnimationTracker : ICreatableInstance
	{
		public new RTAnimationTracker Clone();
		public ScriptSignal<Enum.TrackerError.Type, string> TrackerError { get; }
		public ScriptSignal<Enum.TrackerPromptEvent.Type> TrackerPrompt { get; }
	}
	
	public interface ReflectionService : IServiceInstance
	{
		public new ReflectionService Clone();
	}
	
	public interface RemoteCursorService : IServiceInstance
	{
		public new RemoteCursorService Clone();
	}
	
	public interface RemoteDebuggerServer : IServiceInstance
	{
		public new RemoteDebuggerServer Clone();
	}
	
	public partial interface ReplicatedFirst : IServiceInstance
	{
		public new ReplicatedFirst Clone();
		public void RemoveDefaultLoadingScreen();
	}
	
	public partial interface ReplicatedStorage : IServiceInstance
	{
		public new ReplicatedStorage Clone();
	}
	
	public interface RibbonNotificationService : IServiceInstance
	{
		public new RibbonNotificationService Clone();
	}
	
	public interface RobloxServerStorage : IServiceInstance
	{
		public new RobloxServerStorage Clone();
	}
	
	public interface RomarkService : IServiceInstance
	{
		public new RomarkService Clone();
		public void EndRemoteRomarkTest();
	}
	
	public interface RotationCurve : ICreatableInstance
	{
		public new RotationCurve Clone();
		public int Length { get; }
		public RotationCurveKey GetKeyAtIndex(int index);
		public object[] GetKeyIndicesAtTime(float time);
		public object[] GetKeys();
		public CFrame? GetValueAtTime(float time);
		public object[] InsertKey(RotationCurveKey key);
		public int RemoveKeyAtIndex(int startingIndex, int? count = null);
		public int SetKeys(object[] keys);
	}
	
	public interface RtMessagingService : IServiceInstance
	{
		public new RtMessagingService Clone();
	}
	
	public partial interface RunService : IServiceInstance
	{
		public new RunService Clone();
		public void BindToRenderStep(string name, int priority, Action function);
		public bool IsClient();
		public bool IsRunMode();
		public bool IsRunning();
		public bool IsServer();
		public bool IsStudio();
		public void UnbindFromRenderStep(string name);
		public ScriptSignal<float> Heartbeat { get; }
		public ScriptSignal<float> PostSimulation { get; }
		public ScriptSignal<float> PreAnimation { get; }
		public ScriptSignal<float> PreRender { get; }
		public ScriptSignal<float> PreSimulation { get; }
		public ScriptSignal<float> RenderStepped { get; }
		public ScriptSignal<float, float> Stepped { get; }
	}
	
	public interface SafetyService : IServiceInstance
	{
		public new SafetyService Clone();
	}
	
	public interface ScreenshotHud : Instance
	{
		public new ScreenshotHud Clone();
		public string CameraButtonIcon { get; set; }
		public UDim2 CameraButtonPosition { get; set; }
		public UDim2 CloseButtonPosition { get; set; }
		public bool CloseWhenScreenshotTaken { get; set; }
		public bool HideCoreGuiForCaptures { get; set; }
		public bool HidePlayerGuiForCaptures { get; set; }
		public bool Visible { get; set; }
	}
	
	public interface ScriptBuilder : Instance
	{
		public new ScriptBuilder Clone();
	}
	
	public interface SyncScriptBuilder : ScriptBuilder
	{
		public new SyncScriptBuilder Clone();
		public Enum.CompileTarget.Type CompileTarget { get; set; }
		public bool CoverageInfo { get; set; }
		public bool DebugInfo { get; set; }
		public bool PackAsSource { get; set; }
		public bool RawBytecode { get; set; }
	}
	
	public interface ScriptChangeService : IServiceInstance
	{
		public new ScriptChangeService Clone();
	}
	
	public interface ScriptCloneWatcher : IServiceInstance
	{
		public new ScriptCloneWatcher Clone();
	}
	
	public interface ScriptCloneWatcherHelper : IServiceInstance
	{
		public new ScriptCloneWatcherHelper Clone();
	}
	
	public interface ScriptCommitService : IServiceInstance
	{
		public new ScriptCommitService Clone();
	}
	
	public partial interface ScriptContext : IServiceInstance
	{
		public new ScriptContext Clone();
		public ScriptSignal<string, string, Instance> Error { get; }
	}
	
	public partial interface ScriptDocument : Instance
	{
		public new ScriptDocument Clone();
	}
	
	public partial interface ScriptEditorService : IServiceInstance
	{
		public new ScriptEditorService Clone();
	}
	
	public partial interface ScriptProfilerService : IServiceInstance
	{
		public new ScriptProfilerService Clone();
	}
	
	public interface ScriptRegistrationService : IServiceInstance
	{
		public new ScriptRegistrationService Clone();
	}
	
	public interface ScriptRuntime : Instance
	{
		public new ScriptRuntime Clone();
	}
	
	public interface SelectionHighlightManager : IServiceInstance
	{
		public new SelectionHighlightManager Clone();
	}
	
	public interface SensorBase : Instance
	{
		public new SensorBase Clone();
		public Enum.SensorUpdateType.Type UpdateType { get; set; }
		public void Sense();
		public ScriptSignal OnSensorOutputChanged { get; }
	}
	
	public interface AtmosphereSensor : SensorBase, ICreatableInstance
	{
		public new AtmosphereSensor Clone();
		public float AirDensity { get; }
		public Vector3 RelativeWindVelocity { get; }
	}
	
	public interface BuoyancySensor : SensorBase, ICreatableInstance
	{
		public new BuoyancySensor Clone();
		public bool FullySubmerged { get; set; }
		public bool TouchingSurface { get; set; }
	}
	
	public interface ControllerSensor : SensorBase
	{
		public new ControllerSensor Clone();
	}
	
	public interface ControllerPartSensor : ControllerSensor, ICreatableInstance
	{
		public new ControllerPartSensor Clone();
		public CFrame HitFrame { get; set; }
		public Vector3 HitNormal { get; set; }
		public float SearchDistance { get; set; }
		public BasePart? SensedPart { get; set; }
		public Enum.SensorMode.Type SensorMode { get; set; }
	}
	
	public partial interface ServerScriptService : IServiceInstance
	{
		public new ServerScriptService Clone();
	}
	
	public partial interface ServerStorage : IServiceInstance
	{
		public new ServerStorage Clone();
	}
	
	public partial interface ServiceProvider : Instance
	{
		public new ServiceProvider Clone();
		public ScriptSignal Close { get; }
	}
	
	public partial interface DataModel : ServiceProvider
	{
		public new DataModel Clone();
		public long CreatorId { get; }
		public Enum.CreatorType.Type CreatorType { get; }
		public long GameId { get; }
		public Enum.GearGenreSetting.Type GearGenreSetting { get; }
		public Enum.Genre.Type Genre { get; }
		public string JobId { get; }
		public long PlaceId { get; }
		public int PlaceVersion { get; }
		public string PrivateServerId { get; }
		public long PrivateServerOwnerId { get; }
		public void BindToClose(Action function);
		public string GetMessage();
		public bool GetRemoteBuildMode();
		public bool IsGearTypeAllowed(Enum.GearType.Type gearType);
		public bool IsLoaded();
		public bool SavePlace(Enum.SaveFilter.Type? saveFilter = null);
		public ScriptSignal AllowedGearTypeChanged { get; }
		public ScriptSignal<bool> GraphicsQualityChangeRequest { get; }
		public ScriptSignal<Instance, string> ItemChanged { get; }
		public ScriptSignal Loaded { get; }
	}
	
	public interface GenericSettings : ServiceProvider
	{
		public new GenericSettings Clone();
	}
	
	public interface UserSettings : GenericSettings
	{
		public new UserSettings Clone();
		public bool IsUserFeatureEnabled(string name);
		public void Reset();
	}
	
	public interface ServiceVisibilityService : IServiceInstance
	{
		public new ServiceVisibilityService Clone();
	}
	
	public interface SessionService : IServiceInstance
	{
		public new SessionService Clone();
	}
	
	public interface SharedTableRegistry : IServiceInstance
	{
		public new SharedTableRegistry Clone();
		public SharedTable GetSharedTable(string name);
		public void SetSharedTable(string name, SharedTable? st = null);
	}
	
	public interface ShorelineUpgraderService : IServiceInstance
	{
		public new ShorelineUpgraderService Clone();
	}
	
	public interface Sky : ICreatableInstance
	{
		public new Sky Clone();
		public bool CelestialBodiesShown { get; set; }
		public float MoonAngularSize { get; set; }
		public string MoonTextureId { get; set; }
		public string SkyboxBk { get; set; }
		public string SkyboxDn { get; set; }
		public string SkyboxFt { get; set; }
		public string SkyboxLf { get; set; }
		public string SkyboxRt { get; set; }
		public string SkyboxUp { get; set; }
		public int StarCount { get; set; }
		public float SunAngularSize { get; set; }
		public string SunTextureId { get; set; }
	}
	
	public interface Smoke : ICreatableInstance
	{
		public new Smoke Clone();
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public float Opacity { get; set; }
		public float RiseVelocity { get; set; }
		public float Size { get; set; }
		public float TimeScale { get; set; }
	}
	
	public interface SmoothVoxelsUpgraderService : IServiceInstance
	{
		public new SmoothVoxelsUpgraderService Clone();
	}
	
	public interface SnippetService : IServiceInstance
	{
		public new SnippetService Clone();
	}
	
	public interface SocialService : IServiceInstance
	{
		public new SocialService Clone();
		public void HideSelfView();
		public void PromptGameInvite(Player player, ExperienceInviteOptions? experienceInviteOptions = null);
		public void PromptPhoneBook(Player player, string tag);
		public void ShowSelfView(Enum.SelfViewPosition.Type? selfViewPosition = null);
		public bool CanSendCallInviteAsync(Player player);
		public bool CanSendGameInviteAsync(Player player, long? recipientId = null);
		public ScriptSignal<Instance, Enum.InviteState.Type> CallInviteStateChanged { get; }
		public ScriptSignal<Instance, object[]> GameInvitePromptClosed { get; }
		public ScriptSignal<Instance> PhoneBookPromptClosed { get; }
	}
	
	public interface Sound : ICreatableInstance
	{
		public new Sound Clone();
		public float EmitterSize { get; set; }
		public bool IsLoaded { get; }
		public NumberRange LoopRegion { get; set; }
		public bool Looped { get; set; }
		public float MaxDistance { get; set; }
		public float MinDistance { get; set; }
		public float Pitch { get; set; }
		public bool PlayOnRemove { get; set; }
		public float PlaybackLoudness { get; }
		public NumberRange PlaybackRegion { get; set; }
		public bool PlaybackRegionsEnabled { get; set; }
		public float PlaybackSpeed { get; set; }
		public bool Playing { get; set; }
		public float RollOffMaxDistance { get; set; }
		public float RollOffMinDistance { get; set; }
		public Enum.RollOffMode.Type RollOffMode { get; set; }
		public SoundGroup? SoundGroup { get; set; }
		public string SoundId { get; set; }
		public float TimeLength { get; }
		public float TimePosition { get; set; }
		public float Volume { get; set; }
		public void Pause();
		public void Play();
		public void Resume();
		public void Stop();
		public ScriptSignal<string, int> DidLoop { get; }
		public ScriptSignal<string> Ended { get; }
		public ScriptSignal<string> Loaded { get; }
		public ScriptSignal<string> Paused { get; }
		public ScriptSignal<string> Played { get; }
		public ScriptSignal<string> Resumed { get; }
		public ScriptSignal<string> Stopped { get; }
	}
	
	public interface SoundEffect : Instance
	{
		public new SoundEffect Clone();
		public bool Enabled { get; set; }
		public int Priority { get; set; }
	}
	
	public interface ChorusSoundEffect : SoundEffect, ICreatableInstance
	{
		public new ChorusSoundEffect Clone();
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
	}
	
	public interface CompressorSoundEffect : SoundEffect, ICreatableInstance
	{
		public new CompressorSoundEffect Clone();
		public float Attack { get; set; }
		public float GainMakeup { get; set; }
		public float Ratio { get; set; }
		public float Release { get; set; }
		public Instance? SideChain { get; set; }
		public float Threshold { get; set; }
	}
	
	public interface CustomSoundEffect : SoundEffect
	{
		public new CustomSoundEffect Clone();
	}
	
	public interface AssetSoundEffect : CustomSoundEffect
	{
		public new AssetSoundEffect Clone();
	}
	
	public interface ChannelSelectorSoundEffect : CustomSoundEffect
	{
		public new ChannelSelectorSoundEffect Clone();
		public int Channel { get; set; }
	}
	
	public interface DistortionSoundEffect : SoundEffect, ICreatableInstance
	{
		public new DistortionSoundEffect Clone();
		public float Level { get; set; }
	}
	
	public interface EchoSoundEffect : SoundEffect, ICreatableInstance
	{
		public new EchoSoundEffect Clone();
		public float Delay { get; set; }
		public float DryLevel { get; set; }
		public float Feedback { get; set; }
		public float WetLevel { get; set; }
	}
	
	public interface EqualizerSoundEffect : SoundEffect, ICreatableInstance
	{
		public new EqualizerSoundEffect Clone();
		public float HighGain { get; set; }
		public float LowGain { get; set; }
		public float MidGain { get; set; }
	}
	
	public interface FlangeSoundEffect : SoundEffect, ICreatableInstance
	{
		public new FlangeSoundEffect Clone();
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
	}
	
	public interface PitchShiftSoundEffect : SoundEffect, ICreatableInstance
	{
		public new PitchShiftSoundEffect Clone();
		public float Octave { get; set; }
	}
	
	public interface ReverbSoundEffect : SoundEffect, ICreatableInstance
	{
		public new ReverbSoundEffect Clone();
		public float DecayTime { get; set; }
		public float Density { get; set; }
		public float Diffusion { get; set; }
		public float DryLevel { get; set; }
		public float WetLevel { get; set; }
	}
	
	public interface TremoloSoundEffect : SoundEffect, ICreatableInstance
	{
		public new TremoloSoundEffect Clone();
		public float Depth { get; set; }
		public float Duty { get; set; }
		public float Frequency { get; set; }
	}
	
	public interface SoundGroup : ICreatableInstance
	{
		public new SoundGroup Clone();
		public float Volume { get; set; }
	}
	
	public partial interface SoundService : IServiceInstance
	{
		public new SoundService Clone();
		public Enum.ReverbType.Type AmbientReverb { get; set; }
		public float DistanceFactor { get; set; }
		public float DopplerScale { get; set; }
		public bool RespectFilteringEnabled { get; set; }
		public float RolloffScale { get; set; }
		public object GetListener();
		public void PlayLocalSound(Sound sound);
		public void SetListener(Enum.ListenerType.Type listenerType, object listener);
	}
	
	public interface Sparkles : ICreatableInstance
	{
		public new Sparkles Clone();
		public bool Enabled { get; set; }
		public Color3 SparkleColor { get; set; }
		public float TimeScale { get; set; }
	}
	
	public interface StackFrame : Instance
	{
		public new StackFrame Clone();
	}
	
	public interface StarterGear : ICreatableInstance
	{
		public new StarterGear Clone();
	}
	
	public interface StarterPack : IServiceInstance
	{
		public new StarterPack Clone();
	}
	
	public interface StarterPlayer : IServiceInstance
	{
		public new StarterPlayer Clone();
		public bool AutoJumpEnabled { get; set; }
		public Enum.AvatarJointUpgrade.Type AvatarJointUpgrade { get; set; }
		public float CameraMaxZoomDistance { get; set; }
		public float CameraMinZoomDistance { get; set; }
		public Enum.CameraMode.Type CameraMode { get; set; }
		public float CharacterJumpHeight { get; set; }
		public float CharacterJumpPower { get; set; }
		public float CharacterMaxSlopeAngle { get; set; }
		public bool CharacterUseJumpPower { get; set; }
		public float CharacterWalkSpeed { get; set; }
		public Enum.DevCameraOcclusionMode.Type DevCameraOcclusionMode { get; set; }
		public Enum.DevComputerCameraMovementMode.Type DevComputerCameraMovementMode { get; set; }
		public Enum.DevComputerMovementMode.Type DevComputerMovementMode { get; set; }
		public Enum.DevTouchCameraMovementMode.Type DevTouchCameraMovementMode { get; set; }
		public Enum.DevTouchMovementMode.Type DevTouchMovementMode { get; set; }
		public bool EnableMouseLockOption { get; set; }
		public float HealthDisplayDistance { get; set; }
		public bool LoadCharacterAppearance { get; set; }
		public Enum.CharacterControlMode.Type LuaCharacterController { get; set; }
		public float NameDisplayDistance { get; set; }
		public bool UserEmotesEnabled { get; set; }
	}
	
	public interface StarterPlayerScripts : Instance
	{
		public new StarterPlayerScripts Clone();
	}
	
	public interface StarterCharacterScripts : StarterPlayerScripts
	{
		public new StarterCharacterScripts Clone();
	}
	
	public interface StartupMessageService : IServiceInstance
	{
		public new StartupMessageService Clone();
	}
	
	public interface Stats : IServiceInstance
	{
		public new Stats Clone();
		public int ContactsCount { get; }
		public float DataReceiveKbps { get; }
		public float DataSendKbps { get; }
		public float HeartbeatTimeMs { get; }
		public int InstanceCount { get; }
		public int MovingPrimitivesCount { get; }
		public float PhysicsReceiveKbps { get; }
		public float PhysicsSendKbps { get; }
		public float PhysicsStepTimeMs { get; }
		public int PrimitivesCount { get; }
		public float GetMemoryUsageMbForTag(Enum.DeveloperMemoryTag.Type tag);
		public float GetTotalMemoryUsageMb();
	}
	
	public interface StreamingService : IServiceInstance
	{
		public new StreamingService Clone();
	}
	
	public interface StudioAssetService : IServiceInstance
	{
		public new StudioAssetService Clone();
	}
	
	public interface StudioAttachment : ICreatableInstance
	{
		public new StudioAttachment Clone();
		public bool AutoHideParent { get; set; }
		public bool IsArrowVisible { get; set; }
		public Vector2 Offset { get; set; }
		public Vector2 SourceAnchorPoint { get; set; }
		public Vector2 TargetAnchorPoint { get; set; }
	}
	
	public interface StudioCallout : ICreatableInstance
	{
		public new StudioCallout Clone();
	}
	
	public interface StudioDeviceEmulatorService : IServiceInstance
	{
		public new StudioDeviceEmulatorService Clone();
	}
	
	public interface StudioObjectBase : Instance
	{
		public new StudioObjectBase Clone();
	}
	
	public interface StudioWidget : StudioObjectBase
	{
		public new StudioWidget Clone();
	}
	
	public interface StudioPublishService : IServiceInstance
	{
		public new StudioPublishService Clone();
	}
	
	public interface StudioScriptDebugEventListener : IServiceInstance
	{
		public new StudioScriptDebugEventListener Clone();
	}
	
	public interface StudioSdkService : IServiceInstance
	{
		public new StudioSdkService Clone();
	}
	
	public interface StudioWidgetsService : IServiceInstance
	{
		public new StudioWidgetsService Clone();
	}
	
	public interface StyleBase : Instance
	{
		public new StyleBase Clone();
		public Instance[] GetStyleRules();
		public void InsertStyleRule(StyleRule rule, int? index = null);
		public void SetStyleRules(Instance[] rules);
		public ScriptSignal StyleRulesChanged { get; }
	}
	
	public interface StyleRule : StyleBase, ICreatableInstance
	{
		public new StyleRule Clone();
		public string Selector { get; set; }
		public string SelectorError { get; }
		public object GetProperties();
		public object GetProperty(string name);
		public void SetProperties(object table);
		public void SetProperty(string name, object value);
	}
	
	public interface StyleSheet : StyleBase, ICreatableInstance
	{
		public new StyleSheet Clone();
		public Instance[] GetDerives();
		public void SetDerives(Instance[] derives);
	}
	
	public interface StyleDerive : ICreatableInstance
	{
		public new StyleDerive Clone();
		public StyleSheet? StyleSheet { get; set; }
	}
	
	public interface StyleLink : ICreatableInstance
	{
		public new StyleLink Clone();
		public StyleSheet? StyleSheet { get; set; }
	}
	
	public interface StylingService : IServiceInstance
	{
		public new StylingService Clone();
	}
	
	public interface SurfaceAppearance : ICreatableInstance
	{
		public new SurfaceAppearance Clone();
		public Color3 Color { get; set; }
	}
	
	public interface Team : ICreatableInstance
	{
		public new Team Clone();
		public bool AutoAssignable { get; set; }
		public bool AutoColorCharacters { get; set; }
		public int Score { get; set; }
		public BrickColor TeamColor { get; set; }
		public Instance[] GetPlayers();
		public ScriptSignal<Player> PlayerAdded { get; }
		public ScriptSignal<Player> PlayerRemoved { get; }
	}
	
	public interface TeamCreateData : IServiceInstance
	{
		public new TeamCreateData Clone();
	}
	
	public interface TeamCreatePublishService : IServiceInstance
	{
		public new TeamCreatePublishService Clone();
	}
	
	public interface TeamCreateService : IServiceInstance
	{
		public new TeamCreateService Clone();
	}
	
	public interface Teams : IServiceInstance
	{
		public new Teams Clone();
		public Instance[] GetTeams();
		public void RebalanceTeams();
	}
	
	public interface TeleportAsyncResult : Instance
	{
		public new TeleportAsyncResult Clone();
		public string PrivateServerId { get; }
		public string ReservedServerAccessCode { get; }
	}
	
	public interface TeleportOptions : ICreatableInstance
	{
		public new TeleportOptions Clone();
		public string ReservedServerAccessCode { get; set; }
		public string ServerInstanceId { get; set; }
		public bool ShouldReserveServer { get; set; }
		public object GetTeleportData();
		public void SetTeleportData(object teleportData);
	}
	
	public interface TeleportService : IServiceInstance
	{
		public new TeleportService Clone();
		public bool CustomizedTeleportUI { get; set; }
		public Instance GetArrivingTeleportGui();
		public object GetLocalPlayerTeleportData();
		public object GetTeleportSetting(string setting);
		public void SetTeleportGui(Instance gui);
		public void SetTeleportSetting(string setting, object value);
		public void Teleport(long placeId, Player? player = null, object? teleportData = null, Instance? customLoadingScreen = null);
		public void TeleportToPlaceInstance(long placeId, string instanceId, Player? player = null, string? spawnName = null, object? teleportData = null, Instance? customLoadingScreen = null);
		public void TeleportToPrivateServer(long placeId, string reservedServerAccessCode, Instance[] players, string spawnName, object teleportData, Instance? customLoadingScreen = null);
		public void TeleportToSpawnByName(long placeId, string spawnName, Player? player = null, object? teleportData = null, Instance? customLoadingScreen = null);
		public object GetPlayerPlaceInstanceAsync(long userId);
		public object ReserveServer(long placeId);
		public Instance TeleportAsync(long placeId, Instance[] players, TeleportOptions? teleportOptions = null);
		public string TeleportPartyAsync(long placeId, Instance[] players, object teleportData, Instance? customLoadingScreen = null);
		public ScriptSignal<Instance, object> LocalPlayerArrivedFromTeleport { get; }
		public ScriptSignal<Instance, Enum.TeleportResult.Type, string, long, Instance> TeleportInitFailed { get; }
	}
	
	public interface TemporaryCageMeshProvider : IServiceInstance
	{
		public new TemporaryCageMeshProvider Clone();
	}
	
	public interface TemporaryScriptService : IServiceInstance
	{
		public new TemporaryScriptService Clone();
	}
	
	public interface TerrainDetail : ICreatableInstance
	{
		public new TerrainDetail Clone();
		public Enum.TerrainFace.Type Face { get; set; }
		public Enum.MaterialPattern.Type MaterialPattern { get; set; }
		public float StudsPerTile { get; set; }
	}
	
	public partial interface TerrainRegion : ICreatableInstance
	{
		public new TerrainRegion Clone();
		public bool IsSmooth { get; }
		public Vector3 SizeInCells { get; }
	}
	
	public interface TextBoxService : IServiceInstance
	{
		public new TextBoxService Clone();
	}
	
	public interface TextChannel : ICreatableInstance
	{
		public new TextChannel Clone();
		public TextChatMessage DisplaySystemMessage(string systemMessage, string metadata);
		public object AddUserAsync(long userId);
		public TextChatMessage SendAsync(string message, string metadata);
		public ScriptSignal<TextChatMessage> MessageReceived { get; }
	}
	
	public interface TextChatCommand : ICreatableInstance
	{
		public new TextChatCommand Clone();
		public bool AutocompleteVisible { get; set; }
		public bool Enabled { get; set; }
		public string PrimaryAlias { get; set; }
		public string SecondaryAlias { get; set; }
		public ScriptSignal<TextSource, string> Triggered { get; }
	}
	
	public interface TextChatConfigurations : Instance
	{
		public new TextChatConfigurations Clone();
	}
	
	public interface BubbleChatConfiguration : TextChatConfigurations
	{
		public new BubbleChatConfiguration Clone();
		public string AdorneeName { get; set; }
		public Color3 BackgroundColor3 { get; set; }
		public float BackgroundTransparency { get; set; }
		public float BubbleDuration { get; set; }
		public float BubblesSpacing { get; set; }
		public bool Enabled { get; set; }
		public Font FontFace { get; set; }
		public Vector3 LocalPlayerStudsOffset { get; set; }
		public float MaxBubbles { get; set; }
		public float MaxDistance { get; set; }
		public float MinimizeDistance { get; set; }
		public bool TailVisible { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
		public float VerticalStudsOffset { get; set; }
	}
	
	public interface ChannelTabsConfiguration : TextChatConfigurations
	{
		public new ChannelTabsConfiguration Clone();
		public Vector2 AbsolutePosition { get; }
		public Vector2 AbsoluteSize { get; }
		public Color3 BackgroundColor3 { get; set; }
		public float BackgroundTransparency { get; set; }
		public bool Enabled { get; set; }
		public Font FontFace { get; set; }
		public Color3 HoverBackgroundColor3 { get; set; }
		public Color3 SelectedTabTextColor3 { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
	}
	
	public interface ChatInputBarConfiguration : TextChatConfigurations
	{
		public new ChatInputBarConfiguration Clone();
		public Vector2 AbsolutePosition { get; }
		public Vector2 AbsoluteSize { get; }
		public bool AutocompleteEnabled { get; set; }
		public Color3 BackgroundColor3 { get; set; }
		public float BackgroundTransparency { get; set; }
		public bool Enabled { get; set; }
		public Font FontFace { get; set; }
		public bool IsFocused { get; }
		public Enum.KeyCode.Type KeyboardKeyCode { get; set; }
		public Color3 PlaceholderColor3 { get; set; }
		public TextChannel? TargetTextChannel { get; set; }
		public TextBox? TextBox { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
	}
	
	public interface ChatWindowConfiguration : TextChatConfigurations
	{
		public new ChatWindowConfiguration Clone();
		public Vector2 AbsolutePosition { get; }
		public Vector2 AbsoluteSize { get; }
		public Color3 BackgroundColor3 { get; set; }
		public float BackgroundTransparency { get; set; }
		public bool Enabled { get; set; }
		public Font FontFace { get; set; }
		public float HeightScale { get; set; }
		public Enum.HorizontalAlignment.Type HorizontalAlignment { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
		public Enum.VerticalAlignment.Type VerticalAlignment { get; set; }
		public float WidthScale { get; set; }
	}
	
	public interface TextChatMessage : Instance
	{
		public new TextChatMessage Clone();
		public BubbleChatMessageProperties? BubbleChatMessageProperties { get; set; }
		public string MessageId { get; set; }
		public string Metadata { get; set; }
		public string PrefixText { get; set; }
		public Enum.TextChatMessageStatus.Type Status { get; set; }
		public string Text { get; set; }
		public TextChannel? TextChannel { get; set; }
		public TextSource? TextSource { get; set; }
		public DateTime Timestamp { get; set; }
		public string Translation { get; set; }
	}
	
	public interface TextChatMessageProperties : ICreatableInstance
	{
		public new TextChatMessageProperties Clone();
		public string PrefixText { get; set; }
		public string Text { get; set; }
		public string Translation { get; set; }
	}
	
	public interface TextChatService : IServiceInstance
	{
		public new TextChatService Clone();
		public bool ChatTranslationEnabled { get; }
		public Enum.ChatVersion.Type ChatVersion { get; }
		public bool CreateDefaultCommands { get; set; }
		public bool CreateDefaultTextChannels { get; set; }
		public void DisplayBubble(Instance partOrCharacter, string message);
		public bool CanUserChatAsync(long userId);
		public bool CanUsersChatAsync(long userIdFrom, long userIdTo);
		public ScriptSignal<Instance, TextChatMessage> BubbleDisplayed { get; }
		public ScriptSignal<TextChatMessage> MessageReceived { get; }
		public ScriptSignal<TextChatMessage> SendingMessage { get; }
	}
	
	public interface TextFilterResult : Instance
	{
		public new TextFilterResult Clone();
		public string GetChatForUserAsync(long toUserId);
		public string GetNonChatStringForBroadcastAsync();
		public string GetNonChatStringForUserAsync(long toUserId);
	}
	
	public interface TextFilterTranslatedResult : Instance
	{
		public new TextFilterTranslatedResult Clone();
		public string SourceLanguage { get; }
		public TextFilterResult? SourceText { get; }
		public TextFilterResult GetTranslationForLocale(string locale);
		public object GetTranslations();
	}
	
	public interface TextService : IServiceInstance
	{
		public new TextService Clone();
		public Vector2 GetTextSize(string str, int fontSize, Enum.Font.Type font, Vector2 frameSize);
		public TextFilterTranslatedResult FilterAndTranslateStringAsync(string stringToFilter, long fromUserId, object[] targetLocales, Enum.TextFilterContext.Type? textContext = null);
		public TextFilterResult FilterStringAsync(string stringToFilter, long fromUserId, Enum.TextFilterContext.Type? textContext = null);
		public object GetFamilyInfoAsync(string assetId);
		public Vector2 GetTextBoundsAsync(GetTextBoundsParams parameters);
	}
	
	public interface TextSource : Instance
	{
		public new TextSource Clone();
		public bool CanSend { get; set; }
		public long UserId { get; }
	}
	
	public interface TextureGenerationPartGroup : Instance
	{
		public new TextureGenerationPartGroup Clone();
	}
	
	public interface TextureGenerationService : IServiceInstance
	{
		public new TextureGenerationService Clone();
	}
	
	public interface TextureGenerationUnwrappingRequest : Instance
	{
		public new TextureGenerationUnwrappingRequest Clone();
	}
	
	public interface ThreadState : Instance
	{
		public new ThreadState Clone();
	}
	
	public interface ToastNotificationService : IServiceInstance
	{
		public new ToastNotificationService Clone();
	}
	
	public interface TouchTransmitter : Instance
	{
		public new TouchTransmitter Clone();
	}
	
	public interface TracerService : IServiceInstance
	{
		public new TracerService Clone();
	}
	
	public interface TrackerLodController : Instance
	{
		public new TrackerLodController Clone();
		public Enum.TrackerLodFlagMode.Type AudioMode { get; set; }
		public Enum.TrackerExtrapolationFlagMode.Type VideoExtrapolationMode { get; set; }
		public Enum.TrackerLodValueMode.Type VideoLodMode { get; set; }
		public Enum.TrackerLodFlagMode.Type VideoMode { get; set; }
	}
	
	public interface TrackerStreamAnimation : ICreatableInstance
	{
		public new TrackerStreamAnimation Clone();
	}
	
	public interface Trail : ICreatableInstance
	{
		public new Trail Clone();
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public float Brightness { get; set; }
		public ColorSequence Color { get; set; }
		public bool Enabled { get; set; }
		public bool FaceCamera { get; set; }
		public float Lifetime { get; set; }
		public float LightEmission { get; set; }
		public float LightInfluence { get; set; }
		public float MaxLength { get; set; }
		public float MinLength { get; set; }
		public string Texture { get; set; }
		public float TextureLength { get; set; }
		public Enum.TextureMode.Type TextureMode { get; set; }
		public NumberSequence Transparency { get; set; }
		public NumberSequence WidthScale { get; set; }
		public void Clear();
	}
	
	public interface Translator : Instance
	{
		public new Translator Clone();
		public string LocaleId { get; }
		public string FormatByKey(string key, object args);
		public string Translate(Instance context, string text);
	}
	
	public interface TutorialService : IServiceInstance
	{
		public new TutorialService Clone();
	}
	
	public interface TweenBase : Instance
	{
		public new TweenBase Clone();
		public Enum.PlaybackState.Type PlaybackState { get; }
		public void Cancel();
		public void Pause();
		public void Play();
		public ScriptSignal<Enum.PlaybackState.Type> Completed { get; }
	}
	
	public interface Tween : TweenBase
	{
		public new Tween Clone();
		public Instance? Instance { get; }
		public TweenInfo TweenInfo { get; }
	}
	
	public interface TweenService : IServiceInstance
	{
		public new TweenService Clone();
		public Tween Create(Instance instance, TweenInfo tweenInfo, object propertyTable);
		public float GetValue(float alpha, Enum.EasingStyle.Type easingStyle, Enum.EasingDirection.Type easingDirection);
		public object SmoothDamp(object current, object target, object velocity, float smoothTime, float? maxSpeed = null, float? dt = null);
	}
	
	public interface UGCAvatarService : IServiceInstance
	{
		public new UGCAvatarService Clone();
	}
	
	public interface UIBase : Instance
	{
		public new UIBase Clone();
	}
	
	public interface UIComponent : UIBase
	{
		public new UIComponent Clone();
	}
	
	public interface UIConstraint : UIComponent
	{
		public new UIConstraint Clone();
	}
	
	public interface UIAspectRatioConstraint : UIConstraint, ICreatableInstance
	{
		public new UIAspectRatioConstraint Clone();
		public float AspectRatio { get; set; }
		public Enum.AspectType.Type AspectType { get; set; }
		public Enum.DominantAxis.Type DominantAxis { get; set; }
	}
	
	public interface UISizeConstraint : UIConstraint, ICreatableInstance
	{
		public new UISizeConstraint Clone();
		public Vector2 MaxSize { get; set; }
		public Vector2 MinSize { get; set; }
	}
	
	public interface UITextSizeConstraint : UIConstraint, ICreatableInstance
	{
		public new UITextSizeConstraint Clone();
		public int MaxTextSize { get; set; }
		public int MinTextSize { get; set; }
	}
	
	public interface UICorner : UIComponent, ICreatableInstance
	{
		public new UICorner Clone();
		public UDim CornerRadius { get; set; }
	}
	
	public interface UIDragDetector : UIComponent, ICreatableInstance
	{
		public new UIDragDetector Clone();
		public string ActivatedCursorIcon { get; set; }
		public Enum.UIDragDetectorBoundingBehavior.Type BoundingBehavior { get; set; }
		public GuiBase2d? BoundingUI { get; set; }
		public string CursorIcon { get; set; }
		public Vector2 DragAxis { get; set; }
		public Enum.UIDragDetectorDragRelativity.Type DragRelativity { get; set; }
		public float DragRotation { get; set; }
		public Enum.UIDragDetectorDragSpace.Type DragSpace { get; set; }
		public Enum.UIDragDetectorDragStyle.Type DragStyle { get; set; }
		public UDim2 DragUDim2 { get; set; }
		public bool Enabled { get; set; }
		public float MaxDragAngle { get; set; }
		public UDim2 MaxDragTranslation { get; set; }
		public float MinDragAngle { get; set; }
		public UDim2 MinDragTranslation { get; set; }
		public GuiObject? ReferenceUIInstance { get; set; }
		public Enum.UIDragDetectorResponseStyle.Type ResponseStyle { get; set; }
		public ScriptConnection AddConstraintFunction(int priority, Action function);
		public UDim2 GetReferencePosition();
		public float GetReferenceRotation();
		public void SetDragStyleFunction(Action function);
		public ScriptSignal<Vector2> DragContinue { get; }
		public ScriptSignal<Vector2> DragEnd { get; }
		public ScriptSignal<Vector2> DragStart { get; }
	}
	
	public interface UIFlexItem : UIComponent, ICreatableInstance
	{
		public new UIFlexItem Clone();
		public Enum.UIFlexMode.Type FlexMode { get; set; }
		public float GrowRatio { get; set; }
		public Enum.ItemLineAlignment.Type ItemLineAlignment { get; set; }
		public float ShrinkRatio { get; set; }
	}
	
	public interface UIGradient : UIComponent, ICreatableInstance
	{
		public new UIGradient Clone();
		public ColorSequence Color { get; set; }
		public bool Enabled { get; set; }
		public Vector2 Offset { get; set; }
		public float Rotation { get; set; }
		public NumberSequence Transparency { get; set; }
	}
	
	public interface UILayout : UIComponent
	{
		public new UILayout Clone();
	}
	
	public interface UIGridStyleLayout : UILayout
	{
		public new UIGridStyleLayout Clone();
		public Vector2 AbsoluteContentSize { get; }
		public Enum.FillDirection.Type FillDirection { get; set; }
		public Enum.HorizontalAlignment.Type HorizontalAlignment { get; set; }
		public Enum.SortOrder.Type SortOrder { get; set; }
		public Enum.VerticalAlignment.Type VerticalAlignment { get; set; }
		public void ApplyLayout();
		public void SetCustomSortFunction(Action? function = null);
	}
	
	public interface UIGridLayout : UIGridStyleLayout, ICreatableInstance
	{
		public new UIGridLayout Clone();
		public Vector2 AbsoluteCellCount { get; }
		public Vector2 AbsoluteCellSize { get; }
		public UDim2 CellPadding { get; set; }
		public UDim2 CellSize { get; set; }
		public int FillDirectionMaxCells { get; set; }
		public Enum.StartCorner.Type StartCorner { get; set; }
	}
	
	public interface UIListLayout : UIGridStyleLayout, ICreatableInstance
	{
		public new UIListLayout Clone();
		public Enum.UIFlexAlignment.Type HorizontalFlex { get; set; }
		public Enum.ItemLineAlignment.Type ItemLineAlignment { get; set; }
		public UDim Padding { get; set; }
		public Enum.UIFlexAlignment.Type VerticalFlex { get; set; }
		public bool Wraps { get; set; }
	}
	
	public interface UIPageLayout : UIGridStyleLayout, ICreatableInstance
	{
		public new UIPageLayout Clone();
		public bool Animated { get; set; }
		public bool Circular { get; set; }
		public GuiObject? CurrentPage { get; }
		public Enum.EasingDirection.Type EasingDirection { get; set; }
		public Enum.EasingStyle.Type EasingStyle { get; set; }
		public bool GamepadInputEnabled { get; set; }
		public UDim Padding { get; set; }
		public bool ScrollWheelInputEnabled { get; set; }
		public bool TouchInputEnabled { get; set; }
		public float TweenTime { get; set; }
		public void JumpTo(Instance page);
		public void JumpToIndex(int index);
		public void Next();
		public void Previous();
		public ScriptSignal<Instance> PageEnter { get; }
		public ScriptSignal<Instance> PageLeave { get; }
		public ScriptSignal<Instance> Stopped { get; }
	}
	
	public interface UITableLayout : UIGridStyleLayout, ICreatableInstance
	{
		public new UITableLayout Clone();
		public bool FillEmptySpaceColumns { get; set; }
		public bool FillEmptySpaceRows { get; set; }
		public Enum.TableMajorAxis.Type MajorAxis { get; set; }
		public UDim2 Padding { get; set; }
	}
	
	public interface UIPadding : UIComponent, ICreatableInstance
	{
		public new UIPadding Clone();
		public UDim PaddingBottom { get; set; }
		public UDim PaddingLeft { get; set; }
		public UDim PaddingRight { get; set; }
		public UDim PaddingTop { get; set; }
	}
	
	public interface UIScale : UIComponent, ICreatableInstance
	{
		public new UIScale Clone();
		public float Scale { get; set; }
	}
	
	public interface UIStroke : UIComponent, ICreatableInstance
	{
		public new UIStroke Clone();
		public Enum.ApplyStrokeMode.Type ApplyStrokeMode { get; set; }
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public Enum.LineJoinMode.Type LineJoinMode { get; set; }
		public float Thickness { get; set; }
		public float Transparency { get; set; }
	}
	
	public interface UIDragDetectorService : IServiceInstance
	{
		public new UIDragDetectorService Clone();
	}
	
	public interface UnvalidatedAssetService : IServiceInstance
	{
		public new UnvalidatedAssetService Clone();
	}
	
	public interface UserGameSettings : Instance
	{
		public new UserGameSettings Clone();
		public Enum.ComputerCameraMovementMode.Type ComputerCameraMovementMode { get; set; }
		public Enum.ComputerMovementMode.Type ComputerMovementMode { get; set; }
		public Enum.ControlMode.Type ControlMode { get; set; }
		public float GamepadCameraSensitivity { get; set; }
		public float MouseSensitivity { get; set; }
		public int RCCProfilerRecordFrameRate { get; set; }
		public int RCCProfilerRecordTimeFrame { get; set; }
		public Enum.RotationType.Type RotationType { get; set; }
		public Enum.SavedQualitySetting.Type SavedQualityLevel { get; set; }
		public Enum.TouchCameraMovementMode.Type TouchCameraMovementMode { get; set; }
		public Enum.TouchMovementMode.Type TouchMovementMode { get; set; }
		public bool VRSmoothRotationEnabled { get; }
		public bool VignetteEnabled { get; }
		public int GetCameraYInvertValue();
		public bool GetOnboardingCompleted(string onboardingId);
		public bool InFullScreen();
		public bool InStudioMode();
		public void SetCameraYInvertVisible();
		public void SetGamepadCameraSensitivityVisible();
		public void SetOnboardingCompleted(string onboardingId);
		public ScriptSignal<bool> FullscreenChanged { get; }
		public ScriptSignal<bool> StudioModeChanged { get; }
	}
	
	public interface UserInputService : IServiceInstance
	{
		public new UserInputService Clone();
		public bool AccelerometerEnabled { get; }
		public bool GamepadEnabled { get; }
		public bool GyroscopeEnabled { get; }
		public bool KeyboardEnabled { get; }
		public bool ModalEnabled { get; set; }
		public Enum.MouseBehavior.Type MouseBehavior { get; set; }
		public float MouseDeltaSensitivity { get; set; }
		public bool MouseEnabled { get; }
		public string MouseIcon { get; set; }
		public bool MouseIconEnabled { get; set; }
		public Vector2 OnScreenKeyboardPosition { get; }
		public Vector2 OnScreenKeyboardSize { get; }
		public bool OnScreenKeyboardVisible { get; }
		public bool TouchEnabled { get; }
		public CFrame UserHeadCFrame { get; }
		public bool VREnabled { get; }
		public bool GamepadSupports(Enum.UserInputType.Type gamepadNum, Enum.KeyCode.Type gamepadKeyCode);
		public object[] GetConnectedGamepads();
		public InputObject GetDeviceAcceleration();
		public InputObject GetDeviceGravity();
		public object GetDeviceRotation();
		public TextBox GetFocusedTextBox();
		public bool GetGamepadConnected(Enum.UserInputType.Type gamepadNum);
		public object[] GetGamepadState(Enum.UserInputType.Type gamepadNum);
		public string GetImageForKeyCode(Enum.KeyCode.Type keyCode);
		public object[] GetKeysPressed();
		public Enum.UserInputType.Type GetLastInputType();
		public object[] GetMouseButtonsPressed();
		public Vector2 GetMouseDelta();
		public Vector2 GetMouseLocation();
		public object[] GetNavigationGamepads();
		public string GetStringForKeyCode(Enum.KeyCode.Type keyCode);
		public object[] GetSupportedGamepadKeyCodes(Enum.UserInputType.Type gamepadNum);
		public CFrame GetUserCFrame(Enum.UserCFrame.Type type);
		public bool IsGamepadButtonDown(Enum.UserInputType.Type gamepadNum, Enum.KeyCode.Type gamepadKeyCode);
		public bool IsKeyDown(Enum.KeyCode.Type keyCode);
		public bool IsMouseButtonPressed(Enum.UserInputType.Type mouseButton);
		public bool IsNavigationGamepad(Enum.UserInputType.Type gamepadEnum);
		public void RecenterUserHeadCFrame();
		public void SetNavigationGamepad(Enum.UserInputType.Type gamepadEnum, bool enabled);
		public ScriptSignal<InputObject> DeviceAccelerationChanged { get; }
		public ScriptSignal<InputObject> DeviceGravityChanged { get; }
		public ScriptSignal<InputObject, CFrame> DeviceRotationChanged { get; }
		public ScriptSignal<Enum.UserInputType.Type> GamepadConnected { get; }
		public ScriptSignal<Enum.UserInputType.Type> GamepadDisconnected { get; }
		public ScriptSignal<InputObject, bool> InputBegan { get; }
		public ScriptSignal<InputObject, bool> InputChanged { get; }
		public ScriptSignal<InputObject, bool> InputEnded { get; }
		public ScriptSignal JumpRequest { get; }
		public ScriptSignal<Enum.UserInputType.Type> LastInputTypeChanged { get; }
		public ScriptSignal<float, Vector2, float, bool> PointerAction { get; }
		public ScriptSignal<TextBox> TextBoxFocusReleased { get; }
		public ScriptSignal<TextBox> TextBoxFocused { get; }
		public ScriptSignal<InputObject, bool> TouchEnded { get; }
		public ScriptSignal<object[], Enum.UserInputState.Type, bool> TouchLongPress { get; }
		public ScriptSignal<InputObject, bool> TouchMoved { get; }
		public ScriptSignal<object[], Vector2, Vector2, Enum.UserInputState.Type, bool> TouchPan { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState.Type, bool> TouchPinch { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState.Type, bool> TouchRotate { get; }
		public ScriptSignal<InputObject, bool> TouchStarted { get; }
		public ScriptSignal<Enum.SwipeDirection.Type, int, bool> TouchSwipe { get; }
		public ScriptSignal<object[], bool> TouchTap { get; }
		public ScriptSignal<Vector2, bool> TouchTapInWorld { get; }
		public ScriptSignal<Enum.UserCFrame.Type, CFrame> UserCFrameChanged { get; }
		public ScriptSignal WindowFocusReleased { get; }
		public ScriptSignal WindowFocused { get; }
	}
	
	public interface UserService : IServiceInstance
	{
		public new UserService Clone();
		public object[] GetUserInfosByUserIdsAsync(object[] userIds);
	}
	
	public interface VRService : IServiceInstance
	{
		public new VRService Clone();
		public Enum.VRScaling.Type AutomaticScaling { get; set; }
		public bool AvatarGestures { get; set; }
		public bool FadeOutViewOnCollision { get; set; }
		public Enum.UserCFrame.Type GuiInputUserCFrame { get; set; }
		public bool ThirdPersonFollowCamEnabled { get; }
		public bool VREnabled { get; }
		public Enum.VRTouchpadMode.Type GetTouchpadMode(Enum.VRTouchpad.Type pad);
		public CFrame GetUserCFrame(Enum.UserCFrame.Type type);
		public bool GetUserCFrameEnabled(Enum.UserCFrame.Type type);
		public void RecenterUserHeadCFrame();
		public void RequestNavigation(CFrame cframe, Enum.UserCFrame.Type inputUserCFrame);
		public void SetTouchpadMode(Enum.VRTouchpad.Type pad, Enum.VRTouchpadMode.Type mode);
		public ScriptSignal<CFrame, Enum.UserCFrame.Type> NavigationRequested { get; }
		public ScriptSignal<Enum.VRTouchpad.Type, Enum.VRTouchpadMode.Type> TouchpadModeChanged { get; }
		public ScriptSignal<Enum.UserCFrame.Type, CFrame> UserCFrameChanged { get; }
		public ScriptSignal<Enum.UserCFrame.Type, bool> UserCFrameEnabled { get; }
	}
	
	public interface VRStatusService : IServiceInstance
	{
		public new VRStatusService Clone();
	}
	
	public interface ValueBase : Instance
	{
		public new ValueBase Clone();
	}
	
	public interface BoolValue : ValueBase, ICreatableInstance
	{
		public new BoolValue Clone();
		public bool Value { get; set; }
		public ScriptSignal<bool> Changed { get; }
	}
	
	public interface BrickColorValue : ValueBase, ICreatableInstance
	{
		public new BrickColorValue Clone();
		public BrickColor Value { get; set; }
		public ScriptSignal<BrickColor> Changed { get; }
	}
	
	public interface CFrameValue : ValueBase, ICreatableInstance
	{
		public new CFrameValue Clone();
		public CFrame Value { get; set; }
		public ScriptSignal<CFrame> Changed { get; }
	}
	
	public interface Color3Value : ValueBase, ICreatableInstance
	{
		public new Color3Value Clone();
		public Color3 Value { get; set; }
		public ScriptSignal<Color3> Changed { get; }
	}
	
	public interface DoubleConstrainedValue : ValueBase, ICreatableInstance
	{
		public new DoubleConstrainedValue Clone();
		public float MaxValue { get; set; }
		public float MinValue { get; set; }
		public float Value { get; set; }
		public ScriptSignal<float> Changed { get; }
	}
	
	public interface IntConstrainedValue : ValueBase, ICreatableInstance
	{
		public new IntConstrainedValue Clone();
		public long MaxValue { get; set; }
		public long MinValue { get; set; }
		public long Value { get; set; }
		public ScriptSignal<long> Changed { get; }
	}
	
	public interface IntValue : ValueBase, ICreatableInstance
	{
		public new IntValue Clone();
		public long Value { get; set; }
		public ScriptSignal<long> Changed { get; }
	}
	
	public interface NumberValue : ValueBase, ICreatableInstance
	{
		public new NumberValue Clone();
		public float Value { get; set; }
		public ScriptSignal<float> Changed { get; }
	}
	
	public interface ObjectValue : ValueBase, ICreatableInstance
	{
		public new ObjectValue Clone();
		public Instance? Value { get; set; }
		public ScriptSignal<Instance> Changed { get; }
	}
	
	public interface RayValue : ValueBase, ICreatableInstance
	{
		public new RayValue Clone();
		public Ray Value { get; set; }
		public ScriptSignal<Ray> Changed { get; }
	}
	
	public interface StringValue : ValueBase, ICreatableInstance
	{
		public new StringValue Clone();
		public string Value { get; set; }
		public ScriptSignal<string> Changed { get; }
	}
	
	public interface Vector3Value : ValueBase, ICreatableInstance
	{
		public new Vector3Value Clone();
		public Vector3 Value { get; set; }
		public ScriptSignal<Vector3> Changed { get; }
	}
	
	public interface Vector3Curve : ICreatableInstance
	{
		public new Vector3Curve Clone();
		public object[] GetValueAtTime(float time);
		public FloatCurve X();
		public FloatCurve Y();
		public FloatCurve Z();
	}
	
	public interface VideoCaptureService : IServiceInstance
	{
		public new VideoCaptureService Clone();
	}
	
	public interface VideoDeviceInput : ICreatableInstance
	{
		public new VideoDeviceInput Clone();
		public bool Active { get; set; }
		public string CameraId { get; set; }
		public Enum.VideoDeviceCaptureQuality.Type CaptureQuality { get; set; }
		public bool IsReady { get; }
	}
	
	public interface VideoService : IServiceInstance
	{
		public new VideoService Clone();
	}
	
	public interface VisibilityCheckDispatcher : IServiceInstance
	{
		public new VisibilityCheckDispatcher Clone();
	}
	
	public interface VisualizationMode : ICreatableInstance
	{
		public new VisualizationMode Clone();
	}
	
	public interface VisualizationModeCategory : ICreatableInstance
	{
		public new VisualizationModeCategory Clone();
	}
	
	public interface VisualizationModeService : IServiceInstance
	{
		public new VisualizationModeService Clone();
	}
	
	public interface VoiceChatInternal : IServiceInstance
	{
		public new VoiceChatInternal Clone();
		public object GetAudioProcessingSettings();
		public object GetMicDevices();
		public object[] GetParticipants();
		public object GetSpeakerDevices();
		public int GetVoiceChatApiVersion();
		public int GetVoiceChatAvailable();
		public bool IsPublishPaused();
		public bool IsSubscribePaused(long userId);
		public bool JoinByGroupId(string groupId, bool? isMicMuted = null);
		public bool JoinByGroupIdToken(string groupId, bool isMicMuted, bool? isRetry = null);
		public void Leave();
		public bool PublishPause(bool paused);
		public void SetMicDevice(string micDeviceName, string micDeviceGuid);
		public void SetSpeakerDevice(string speakerDeviceName, string speakerDeviceGuid);
		public bool SubscribePause(long userId, bool paused);
		public bool SubscribePauseAll(bool paused);
		public bool IsVoiceEnabledForUserIdAsync(long userId);
		public ScriptSignal<Enum.VoiceChatState.Type, Enum.VoiceChatState.Type> StateChanged { get; }
	}
	
	public interface VoiceChatService : IServiceInstance
	{
		public new VoiceChatService Clone();
		public bool IsVoiceEnabledForUserIdAsync(long userId);
	}
	
	public interface WeldConstraint : ICreatableInstance
	{
		public new WeldConstraint Clone();
		public bool Active { get; }
		public bool Enabled { get; set; }
		public BasePart? Part0 { get; set; }
		public BasePart? Part1 { get; set; }
	}
	
	public interface Wire : ICreatableInstance
	{
		public new Wire Clone();
		public bool Connected { get; }
		public Instance? SourceInstance { get; set; }
		public string SourceName { get; set; }
		public Instance? TargetInstance { get; set; }
		public string TargetName { get; set; }
	}
	
}
